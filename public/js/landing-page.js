/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/landing-page/bootstrap-datepicker.min.js":
/*!***************************************************************!*\
  !*** ./resources/js/landing-page/bootstrap-datepicker.min.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*!\r\n * Datepicker for Bootstrap v1.6.4 (https://github.com/eternicode/bootstrap-datepicker)\r\n *\r\n * Copyright 2012 Stefan Petre\r\n * Improvements by Andrew Rowls\r\n * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)\r\n */\n!function (a) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(function (a, b) {\n  function c() {\n    return new Date(Date.UTC.apply(Date, arguments));\n  }\n  function d() {\n    var a = new Date();\n    return c(a.getFullYear(), a.getMonth(), a.getDate());\n  }\n  function e(a, b) {\n    return a.getUTCFullYear() === b.getUTCFullYear() && a.getUTCMonth() === b.getUTCMonth() && a.getUTCDate() === b.getUTCDate();\n  }\n  function f(a) {\n    return function () {\n      return this[a].apply(this, arguments);\n    };\n  }\n  function g(a) {\n    return a && !isNaN(a.getTime());\n  }\n  function h(b, c) {\n    function d(a, b) {\n      return b.toLowerCase();\n    }\n    var e,\n      f = a(b).data(),\n      g = {},\n      h = new RegExp(\"^\" + c.toLowerCase() + \"([A-Z])\");\n    c = new RegExp(\"^\" + c.toLowerCase());\n    for (var i in f) c.test(i) && (e = i.replace(h, d), g[e] = f[i]);\n    return g;\n  }\n  function i(b) {\n    var c = {};\n    if (q[b] || (b = b.split(\"-\")[0], q[b])) {\n      var d = q[b];\n      return a.each(p, function (a, b) {\n        b in d && (c[b] = d[b]);\n      }), c;\n    }\n  }\n  var j = function () {\n      var b = {\n        get: function get(a) {\n          return this.slice(a)[0];\n        },\n        contains: function contains(a) {\n          for (var b = a && a.valueOf(), c = 0, d = this.length; d > c; c++) if (this[c].valueOf() === b) return c;\n          return -1;\n        },\n        remove: function remove(a) {\n          this.splice(a, 1);\n        },\n        replace: function replace(b) {\n          b && (a.isArray(b) || (b = [b]), this.clear(), this.push.apply(this, b));\n        },\n        clear: function clear() {\n          this.length = 0;\n        },\n        copy: function copy() {\n          var a = new j();\n          return a.replace(this), a;\n        }\n      };\n      return function () {\n        var c = [];\n        return c.push.apply(c, arguments), a.extend(c, b), c;\n      };\n    }(),\n    k = function k(b, c) {\n      a(b).data(\"datepicker\", this), this._process_options(c), this.dates = new j(), this.viewDate = this.o.defaultViewDate, this.focusDate = null, this.element = a(b), this.isInput = this.element.is(\"input\"), this.inputField = this.isInput ? this.element : this.element.find(\"input\"), this.component = this.element.hasClass(\"date\") ? this.element.find(\".add-on, .input-group-addon, .btn\") : !1, this.hasInput = this.component && this.inputField.length, this.component && 0 === this.component.length && (this.component = !1), this.isInline = !this.component && this.element.is(\"div\"), this.picker = a(r.template), this._check_template(this.o.templates.leftArrow) && this.picker.find(\".prev\").html(this.o.templates.leftArrow), this._check_template(this.o.templates.rightArrow) && this.picker.find(\".next\").html(this.o.templates.rightArrow), this._buildEvents(), this._attachEvents(), this.isInline ? this.picker.addClass(\"datepicker-inline\").appendTo(this.element) : this.picker.addClass(\"datepicker-dropdown dropdown-menu\"), this.o.rtl && this.picker.addClass(\"datepicker-rtl\"), this.viewMode = this.o.startView, this.o.calendarWeeks && this.picker.find(\"thead .datepicker-title, tfoot .today, tfoot .clear\").attr(\"colspan\", function (a, b) {\n        return parseInt(b) + 1;\n      }), this._allow_update = !1, this.setStartDate(this._o.startDate), this.setEndDate(this._o.endDate), this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled), this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted), this.setDatesDisabled(this.o.datesDisabled), this.fillDow(), this.fillMonths(), this._allow_update = !0, this.update(), this.showMode(), this.isInline && this.show();\n    };\n  k.prototype = {\n    constructor: k,\n    _resolveViewName: function _resolveViewName(a, c) {\n      return 0 === a || \"days\" === a || \"month\" === a ? 0 : 1 === a || \"months\" === a || \"year\" === a ? 1 : 2 === a || \"years\" === a || \"decade\" === a ? 2 : 3 === a || \"decades\" === a || \"century\" === a ? 3 : 4 === a || \"centuries\" === a || \"millennium\" === a ? 4 : c === b ? !1 : c;\n    },\n    _check_template: function _check_template(c) {\n      try {\n        if (c === b || \"\" === c) return !1;\n        if ((c.match(/[<>]/g) || []).length <= 0) return !0;\n        var d = a(c);\n        return d.length > 0;\n      } catch (e) {\n        return !1;\n      }\n    },\n    _process_options: function _process_options(b) {\n      this._o = a.extend({}, this._o, b);\n      var e = this.o = a.extend({}, this._o),\n        f = e.language;\n      q[f] || (f = f.split(\"-\")[0], q[f] || (f = o.language)), e.language = f, e.startView = this._resolveViewName(e.startView, 0), e.minViewMode = this._resolveViewName(e.minViewMode, 0), e.maxViewMode = this._resolveViewName(e.maxViewMode, 4), e.startView = Math.min(e.startView, e.maxViewMode), e.startView = Math.max(e.startView, e.minViewMode), e.multidate !== !0 && (e.multidate = Number(e.multidate) || !1, e.multidate !== !1 && (e.multidate = Math.max(0, e.multidate))), e.multidateSeparator = String(e.multidateSeparator), e.weekStart %= 7, e.weekEnd = (e.weekStart + 6) % 7;\n      var g = r.parseFormat(e.format);\n      e.startDate !== -(1 / 0) && (e.startDate ? e.startDate instanceof Date ? e.startDate = this._local_to_utc(this._zero_time(e.startDate)) : e.startDate = r.parseDate(e.startDate, g, e.language, e.assumeNearbyYear) : e.startDate = -(1 / 0)), e.endDate !== 1 / 0 && (e.endDate ? e.endDate instanceof Date ? e.endDate = this._local_to_utc(this._zero_time(e.endDate)) : e.endDate = r.parseDate(e.endDate, g, e.language, e.assumeNearbyYear) : e.endDate = 1 / 0), e.daysOfWeekDisabled = e.daysOfWeekDisabled || [], a.isArray(e.daysOfWeekDisabled) || (e.daysOfWeekDisabled = e.daysOfWeekDisabled.split(/[,\\s]*/)), e.daysOfWeekDisabled = a.map(e.daysOfWeekDisabled, function (a) {\n        return parseInt(a, 10);\n      }), e.daysOfWeekHighlighted = e.daysOfWeekHighlighted || [], a.isArray(e.daysOfWeekHighlighted) || (e.daysOfWeekHighlighted = e.daysOfWeekHighlighted.split(/[,\\s]*/)), e.daysOfWeekHighlighted = a.map(e.daysOfWeekHighlighted, function (a) {\n        return parseInt(a, 10);\n      }), e.datesDisabled = e.datesDisabled || [], a.isArray(e.datesDisabled) || (e.datesDisabled = [e.datesDisabled]), e.datesDisabled = a.map(e.datesDisabled, function (a) {\n        return r.parseDate(a, g, e.language, e.assumeNearbyYear);\n      });\n      var h = String(e.orientation).toLowerCase().split(/\\s+/g),\n        i = e.orientation.toLowerCase();\n      if (h = a.grep(h, function (a) {\n        return /^auto|left|right|top|bottom$/.test(a);\n      }), e.orientation = {\n        x: \"auto\",\n        y: \"auto\"\n      }, i && \"auto\" !== i) {\n        if (1 === h.length) switch (h[0]) {\n          case \"top\":\n          case \"bottom\":\n            e.orientation.y = h[0];\n            break;\n          case \"left\":\n          case \"right\":\n            e.orientation.x = h[0];\n        } else i = a.grep(h, function (a) {\n          return /^left|right$/.test(a);\n        }), e.orientation.x = i[0] || \"auto\", i = a.grep(h, function (a) {\n          return /^top|bottom$/.test(a);\n        }), e.orientation.y = i[0] || \"auto\";\n      } else ;\n      if (e.defaultViewDate) {\n        var j = e.defaultViewDate.year || new Date().getFullYear(),\n          k = e.defaultViewDate.month || 0,\n          l = e.defaultViewDate.day || 1;\n        e.defaultViewDate = c(j, k, l);\n      } else e.defaultViewDate = d();\n    },\n    _events: [],\n    _secondaryEvents: [],\n    _applyEvents: function _applyEvents(a) {\n      for (var c, d, e, f = 0; f < a.length; f++) c = a[f][0], 2 === a[f].length ? (d = b, e = a[f][1]) : 3 === a[f].length && (d = a[f][1], e = a[f][2]), c.on(e, d);\n    },\n    _unapplyEvents: function _unapplyEvents(a) {\n      for (var c, d, e, f = 0; f < a.length; f++) c = a[f][0], 2 === a[f].length ? (e = b, d = a[f][1]) : 3 === a[f].length && (e = a[f][1], d = a[f][2]), c.off(d, e);\n    },\n    _buildEvents: function _buildEvents() {\n      var b = {\n        keyup: a.proxy(function (b) {\n          -1 === a.inArray(b.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) && this.update();\n        }, this),\n        keydown: a.proxy(this.keydown, this),\n        paste: a.proxy(this.paste, this)\n      };\n      this.o.showOnFocus === !0 && (b.focus = a.proxy(this.show, this)), this.isInput ? this._events = [[this.element, b]] : this.component && this.hasInput ? this._events = [[this.inputField, b], [this.component, {\n        click: a.proxy(this.show, this)\n      }]] : this._events = [[this.element, {\n        click: a.proxy(this.show, this),\n        keydown: a.proxy(this.keydown, this)\n      }]], this._events.push([this.element, \"*\", {\n        blur: a.proxy(function (a) {\n          this._focused_from = a.target;\n        }, this)\n      }], [this.element, {\n        blur: a.proxy(function (a) {\n          this._focused_from = a.target;\n        }, this)\n      }]), this.o.immediateUpdates && this._events.push([this.element, {\n        \"changeYear changeMonth\": a.proxy(function (a) {\n          this.update(a.date);\n        }, this)\n      }]), this._secondaryEvents = [[this.picker, {\n        click: a.proxy(this.click, this)\n      }], [a(window), {\n        resize: a.proxy(this.place, this)\n      }], [a(document), {\n        mousedown: a.proxy(function (a) {\n          this.element.is(a.target) || this.element.find(a.target).length || this.picker.is(a.target) || this.picker.find(a.target).length || this.isInline || this.hide();\n        }, this)\n      }]];\n    },\n    _attachEvents: function _attachEvents() {\n      this._detachEvents(), this._applyEvents(this._events);\n    },\n    _detachEvents: function _detachEvents() {\n      this._unapplyEvents(this._events);\n    },\n    _attachSecondaryEvents: function _attachSecondaryEvents() {\n      this._detachSecondaryEvents(), this._applyEvents(this._secondaryEvents);\n    },\n    _detachSecondaryEvents: function _detachSecondaryEvents() {\n      this._unapplyEvents(this._secondaryEvents);\n    },\n    _trigger: function _trigger(b, c) {\n      var d = c || this.dates.get(-1),\n        e = this._utc_to_local(d);\n      this.element.trigger({\n        type: b,\n        date: e,\n        dates: a.map(this.dates, this._utc_to_local),\n        format: a.proxy(function (a, b) {\n          0 === arguments.length ? (a = this.dates.length - 1, b = this.o.format) : \"string\" == typeof a && (b = a, a = this.dates.length - 1), b = b || this.o.format;\n          var c = this.dates.get(a);\n          return r.formatDate(c, b, this.o.language);\n        }, this)\n      });\n    },\n    show: function show() {\n      return this.inputField.prop(\"disabled\") || this.inputField.prop(\"readonly\") && this.o.enableOnReadonly === !1 ? void 0 : (this.isInline || this.picker.appendTo(this.o.container), this.place(), this.picker.show(), this._attachSecondaryEvents(), this._trigger(\"show\"), (window.navigator.msMaxTouchPoints || \"ontouchstart\" in document) && this.o.disableTouchKeyboard && a(this.element).blur(), this);\n    },\n    hide: function hide() {\n      return this.isInline || !this.picker.is(\":visible\") ? this : (this.focusDate = null, this.picker.hide().detach(), this._detachSecondaryEvents(), this.viewMode = this.o.startView, this.showMode(), this.o.forceParse && this.inputField.val() && this.setValue(), this._trigger(\"hide\"), this);\n    },\n    destroy: function destroy() {\n      return this.hide(), this._detachEvents(), this._detachSecondaryEvents(), this.picker.remove(), delete this.element.data().datepicker, this.isInput || delete this.element.data().date, this;\n    },\n    paste: function paste(b) {\n      var c;\n      if (b.originalEvent.clipboardData && b.originalEvent.clipboardData.types && -1 !== a.inArray(\"text/plain\", b.originalEvent.clipboardData.types)) c = b.originalEvent.clipboardData.getData(\"text/plain\");else {\n        if (!window.clipboardData) return;\n        c = window.clipboardData.getData(\"Text\");\n      }\n      this.setDate(c), this.update(), b.preventDefault();\n    },\n    _utc_to_local: function _utc_to_local(a) {\n      return a && new Date(a.getTime() + 6e4 * a.getTimezoneOffset());\n    },\n    _local_to_utc: function _local_to_utc(a) {\n      return a && new Date(a.getTime() - 6e4 * a.getTimezoneOffset());\n    },\n    _zero_time: function _zero_time(a) {\n      return a && new Date(a.getFullYear(), a.getMonth(), a.getDate());\n    },\n    _zero_utc_time: function _zero_utc_time(a) {\n      return a && new Date(Date.UTC(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate()));\n    },\n    getDates: function getDates() {\n      return a.map(this.dates, this._utc_to_local);\n    },\n    getUTCDates: function getUTCDates() {\n      return a.map(this.dates, function (a) {\n        return new Date(a);\n      });\n    },\n    getDate: function getDate() {\n      return this._utc_to_local(this.getUTCDate());\n    },\n    getUTCDate: function getUTCDate() {\n      var a = this.dates.get(-1);\n      return \"undefined\" != typeof a ? new Date(a) : null;\n    },\n    clearDates: function clearDates() {\n      this.inputField && this.inputField.val(\"\"), this.update(), this._trigger(\"changeDate\"), this.o.autoclose && this.hide();\n    },\n    setDates: function setDates() {\n      var b = a.isArray(arguments[0]) ? arguments[0] : arguments;\n      return this.update.apply(this, b), this._trigger(\"changeDate\"), this.setValue(), this;\n    },\n    setUTCDates: function setUTCDates() {\n      var b = a.isArray(arguments[0]) ? arguments[0] : arguments;\n      return this.update.apply(this, a.map(b, this._utc_to_local)), this._trigger(\"changeDate\"), this.setValue(), this;\n    },\n    setDate: f(\"setDates\"),\n    setUTCDate: f(\"setUTCDates\"),\n    remove: f(\"destroy\"),\n    setValue: function setValue() {\n      var a = this.getFormattedDate();\n      return this.inputField.val(a), this;\n    },\n    getFormattedDate: function getFormattedDate(c) {\n      c === b && (c = this.o.format);\n      var d = this.o.language;\n      return a.map(this.dates, function (a) {\n        return r.formatDate(a, c, d);\n      }).join(this.o.multidateSeparator);\n    },\n    getStartDate: function getStartDate() {\n      return this.o.startDate;\n    },\n    setStartDate: function setStartDate(a) {\n      return this._process_options({\n        startDate: a\n      }), this.update(), this.updateNavArrows(), this;\n    },\n    getEndDate: function getEndDate() {\n      return this.o.endDate;\n    },\n    setEndDate: function setEndDate(a) {\n      return this._process_options({\n        endDate: a\n      }), this.update(), this.updateNavArrows(), this;\n    },\n    setDaysOfWeekDisabled: function setDaysOfWeekDisabled(a) {\n      return this._process_options({\n        daysOfWeekDisabled: a\n      }), this.update(), this.updateNavArrows(), this;\n    },\n    setDaysOfWeekHighlighted: function setDaysOfWeekHighlighted(a) {\n      return this._process_options({\n        daysOfWeekHighlighted: a\n      }), this.update(), this;\n    },\n    setDatesDisabled: function setDatesDisabled(a) {\n      this._process_options({\n        datesDisabled: a\n      }), this.update(), this.updateNavArrows();\n    },\n    place: function place() {\n      if (this.isInline) return this;\n      var b = this.picker.outerWidth(),\n        c = this.picker.outerHeight(),\n        d = 10,\n        e = a(this.o.container),\n        f = e.width(),\n        g = \"body\" === this.o.container ? a(document).scrollTop() : e.scrollTop(),\n        h = e.offset(),\n        i = [];\n      this.element.parents().each(function () {\n        var b = a(this).css(\"z-index\");\n        \"auto\" !== b && 0 !== b && i.push(parseInt(b));\n      });\n      var j = Math.max.apply(Math, i) + this.o.zIndexOffset,\n        k = this.component ? this.component.parent().offset() : this.element.offset(),\n        l = this.component ? this.component.outerHeight(!0) : this.element.outerHeight(!1),\n        m = this.component ? this.component.outerWidth(!0) : this.element.outerWidth(!1),\n        n = k.left - h.left,\n        o = k.top - h.top;\n      \"body\" !== this.o.container && (o += g), this.picker.removeClass(\"datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left\"), \"auto\" !== this.o.orientation.x ? (this.picker.addClass(\"datepicker-orient-\" + this.o.orientation.x), \"right\" === this.o.orientation.x && (n -= b - m)) : k.left < 0 ? (this.picker.addClass(\"datepicker-orient-left\"), n -= k.left - d) : n + b > f ? (this.picker.addClass(\"datepicker-orient-right\"), n += m - b) : this.picker.addClass(\"datepicker-orient-left\");\n      var p,\n        q = this.o.orientation.y;\n      if (\"auto\" === q && (p = -g + o - c, q = 0 > p ? \"bottom\" : \"top\"), this.picker.addClass(\"datepicker-orient-\" + q), \"top\" === q ? o -= c + parseInt(this.picker.css(\"padding-top\")) : o += l, this.o.rtl) {\n        var r = f - (n + m);\n        this.picker.css({\n          top: o,\n          right: r,\n          zIndex: j\n        });\n      } else this.picker.css({\n        top: o,\n        left: n,\n        zIndex: j\n      });\n      return this;\n    },\n    _allow_update: !0,\n    update: function update() {\n      if (!this._allow_update) return this;\n      var b = this.dates.copy(),\n        c = [],\n        d = !1;\n      return arguments.length ? (a.each(arguments, a.proxy(function (a, b) {\n        b instanceof Date && (b = this._local_to_utc(b)), c.push(b);\n      }, this)), d = !0) : (c = this.isInput ? this.element.val() : this.element.data(\"date\") || this.inputField.val(), c = c && this.o.multidate ? c.split(this.o.multidateSeparator) : [c], delete this.element.data().date), c = a.map(c, a.proxy(function (a) {\n        return r.parseDate(a, this.o.format, this.o.language, this.o.assumeNearbyYear);\n      }, this)), c = a.grep(c, a.proxy(function (a) {\n        return !this.dateWithinRange(a) || !a;\n      }, this), !0), this.dates.replace(c), this.dates.length ? this.viewDate = new Date(this.dates.get(-1)) : this.viewDate < this.o.startDate ? this.viewDate = new Date(this.o.startDate) : this.viewDate > this.o.endDate ? this.viewDate = new Date(this.o.endDate) : this.viewDate = this.o.defaultViewDate, d ? this.setValue() : c.length && String(b) !== String(this.dates) && this._trigger(\"changeDate\"), !this.dates.length && b.length && this._trigger(\"clearDate\"), this.fill(), this.element.change(), this;\n    },\n    fillDow: function fillDow() {\n      var b = this.o.weekStart,\n        c = \"<tr>\";\n      for (this.o.calendarWeeks && (this.picker.find(\".datepicker-days .datepicker-switch\").attr(\"colspan\", function (a, b) {\n        return parseInt(b) + 1;\n      }), c += '<th class=\"cw\">&#160;</th>'); b < this.o.weekStart + 7;) c += '<th class=\"dow', a.inArray(b, this.o.daysOfWeekDisabled) > -1 && (c += \" disabled\"), c += '\">' + q[this.o.language].daysMin[b++ % 7] + \"</th>\";\n      c += \"</tr>\", this.picker.find(\".datepicker-days thead\").append(c);\n    },\n    fillMonths: function fillMonths() {\n      for (var a = this._utc_to_local(this.viewDate), b = \"\", c = 0; 12 > c;) {\n        var d = a && a.getMonth() === c ? \" focused\" : \"\";\n        b += '<span class=\"month' + d + '\">' + q[this.o.language].monthsShort[c++] + \"</span>\";\n      }\n      this.picker.find(\".datepicker-months td\").html(b);\n    },\n    setRange: function setRange(b) {\n      b && b.length ? this.range = a.map(b, function (a) {\n        return a.valueOf();\n      }) : delete this.range, this.fill();\n    },\n    getClassNames: function getClassNames(b) {\n      var c = [],\n        d = this.viewDate.getUTCFullYear(),\n        e = this.viewDate.getUTCMonth(),\n        f = new Date();\n      return b.getUTCFullYear() < d || b.getUTCFullYear() === d && b.getUTCMonth() < e ? c.push(\"old\") : (b.getUTCFullYear() > d || b.getUTCFullYear() === d && b.getUTCMonth() > e) && c.push(\"new\"), this.focusDate && b.valueOf() === this.focusDate.valueOf() && c.push(\"focused\"), this.o.todayHighlight && b.getUTCFullYear() === f.getFullYear() && b.getUTCMonth() === f.getMonth() && b.getUTCDate() === f.getDate() && c.push(\"today\"), -1 !== this.dates.contains(b) && c.push(\"active\"), this.dateWithinRange(b) || c.push(\"disabled\"), this.dateIsDisabled(b) && c.push(\"disabled\", \"disabled-date\"), -1 !== a.inArray(b.getUTCDay(), this.o.daysOfWeekHighlighted) && c.push(\"highlighted\"), this.range && (b > this.range[0] && b < this.range[this.range.length - 1] && c.push(\"range\"), -1 !== a.inArray(b.valueOf(), this.range) && c.push(\"selected\"), b.valueOf() === this.range[0] && c.push(\"range-start\"), b.valueOf() === this.range[this.range.length - 1] && c.push(\"range-end\")), c;\n    },\n    _fill_yearsView: function _fill_yearsView(c, d, e, f, g, h, i, j) {\n      var k, l, m, n, o, p, q, r, s, t, u;\n      for (k = \"\", l = this.picker.find(c), m = parseInt(g / e, 10) * e, o = parseInt(h / f, 10) * f, p = parseInt(i / f, 10) * f, n = a.map(this.dates, function (a) {\n        return parseInt(a.getUTCFullYear() / f, 10) * f;\n      }), l.find(\".datepicker-switch\").text(m + \"-\" + (m + 9 * f)), q = m - f, r = -1; 11 > r; r += 1) s = [d], t = null, -1 === r ? s.push(\"old\") : 10 === r && s.push(\"new\"), -1 !== a.inArray(q, n) && s.push(\"active\"), (o > q || q > p) && s.push(\"disabled\"), q === this.viewDate.getFullYear() && s.push(\"focused\"), j !== a.noop && (u = j(new Date(q, 0, 1)), u === b ? u = {} : \"boolean\" == typeof u ? u = {\n        enabled: u\n      } : \"string\" == typeof u && (u = {\n        classes: u\n      }), u.enabled === !1 && s.push(\"disabled\"), u.classes && (s = s.concat(u.classes.split(/\\s+/))), u.tooltip && (t = u.tooltip)), k += '<span class=\"' + s.join(\" \") + '\"' + (t ? ' title=\"' + t + '\"' : \"\") + \">\" + q + \"</span>\", q += f;\n      l.find(\"td\").html(k);\n    },\n    fill: function fill() {\n      var d,\n        e,\n        f = new Date(this.viewDate),\n        g = f.getUTCFullYear(),\n        h = f.getUTCMonth(),\n        i = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCFullYear() : -(1 / 0),\n        j = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCMonth() : -(1 / 0),\n        k = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCFullYear() : 1 / 0,\n        l = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCMonth() : 1 / 0,\n        m = q[this.o.language].today || q.en.today || \"\",\n        n = q[this.o.language].clear || q.en.clear || \"\",\n        o = q[this.o.language].titleFormat || q.en.titleFormat;\n      if (!isNaN(g) && !isNaN(h)) {\n        this.picker.find(\".datepicker-days .datepicker-switch\").text(r.formatDate(f, o, this.o.language)), this.picker.find(\"tfoot .today\").text(m).toggle(this.o.todayBtn !== !1), this.picker.find(\"tfoot .clear\").text(n).toggle(this.o.clearBtn !== !1), this.picker.find(\"thead .datepicker-title\").text(this.o.title).toggle(\"\" !== this.o.title), this.updateNavArrows(), this.fillMonths();\n        var p = c(g, h - 1, 28),\n          s = r.getDaysInMonth(p.getUTCFullYear(), p.getUTCMonth());\n        p.setUTCDate(s), p.setUTCDate(s - (p.getUTCDay() - this.o.weekStart + 7) % 7);\n        var t = new Date(p);\n        p.getUTCFullYear() < 100 && t.setUTCFullYear(p.getUTCFullYear()), t.setUTCDate(t.getUTCDate() + 42), t = t.valueOf();\n        for (var u, v = []; p.valueOf() < t;) {\n          if (p.getUTCDay() === this.o.weekStart && (v.push(\"<tr>\"), this.o.calendarWeeks)) {\n            var w = new Date(+p + (this.o.weekStart - p.getUTCDay() - 7) % 7 * 864e5),\n              x = new Date(Number(w) + (11 - w.getUTCDay()) % 7 * 864e5),\n              y = new Date(Number(y = c(x.getUTCFullYear(), 0, 1)) + (11 - y.getUTCDay()) % 7 * 864e5),\n              z = (x - y) / 864e5 / 7 + 1;\n            v.push('<td class=\"cw\">' + z + \"</td>\");\n          }\n          u = this.getClassNames(p), u.push(\"day\"), this.o.beforeShowDay !== a.noop && (e = this.o.beforeShowDay(this._utc_to_local(p)), e === b ? e = {} : \"boolean\" == typeof e ? e = {\n            enabled: e\n          } : \"string\" == typeof e && (e = {\n            classes: e\n          }), e.enabled === !1 && u.push(\"disabled\"), e.classes && (u = u.concat(e.classes.split(/\\s+/))), e.tooltip && (d = e.tooltip)), u = a.isFunction(a.uniqueSort) ? a.uniqueSort(u) : a.unique(u), v.push('<td class=\"' + u.join(\" \") + '\"' + (d ? ' title=\"' + d + '\"' : \"\") + \">\" + p.getUTCDate() + \"</td>\"), d = null, p.getUTCDay() === this.o.weekEnd && v.push(\"</tr>\"), p.setUTCDate(p.getUTCDate() + 1);\n        }\n        this.picker.find(\".datepicker-days tbody\").empty().append(v.join(\"\"));\n        var A = q[this.o.language].monthsTitle || q.en.monthsTitle || \"Months\",\n          B = this.picker.find(\".datepicker-months\").find(\".datepicker-switch\").text(this.o.maxViewMode < 2 ? A : g).end().find(\"span\").removeClass(\"active\");\n        if (a.each(this.dates, function (a, b) {\n          b.getUTCFullYear() === g && B.eq(b.getUTCMonth()).addClass(\"active\");\n        }), (i > g || g > k) && B.addClass(\"disabled\"), g === i && B.slice(0, j).addClass(\"disabled\"), g === k && B.slice(l + 1).addClass(\"disabled\"), this.o.beforeShowMonth !== a.noop) {\n          var C = this;\n          a.each(B, function (c, d) {\n            var e = new Date(g, c, 1),\n              f = C.o.beforeShowMonth(e);\n            f === b ? f = {} : \"boolean\" == typeof f ? f = {\n              enabled: f\n            } : \"string\" == typeof f && (f = {\n              classes: f\n            }), f.enabled !== !1 || a(d).hasClass(\"disabled\") || a(d).addClass(\"disabled\"), f.classes && a(d).addClass(f.classes), f.tooltip && a(d).prop(\"title\", f.tooltip);\n          });\n        }\n        this._fill_yearsView(\".datepicker-years\", \"year\", 10, 1, g, i, k, this.o.beforeShowYear), this._fill_yearsView(\".datepicker-decades\", \"decade\", 100, 10, g, i, k, this.o.beforeShowDecade), this._fill_yearsView(\".datepicker-centuries\", \"century\", 1e3, 100, g, i, k, this.o.beforeShowCentury);\n      }\n    },\n    updateNavArrows: function updateNavArrows() {\n      if (this._allow_update) {\n        var a = new Date(this.viewDate),\n          b = a.getUTCFullYear(),\n          c = a.getUTCMonth();\n        switch (this.viewMode) {\n          case 0:\n            this.o.startDate !== -(1 / 0) && b <= this.o.startDate.getUTCFullYear() && c <= this.o.startDate.getUTCMonth() ? this.picker.find(\".prev\").css({\n              visibility: \"hidden\"\n            }) : this.picker.find(\".prev\").css({\n              visibility: \"visible\"\n            }), this.o.endDate !== 1 / 0 && b >= this.o.endDate.getUTCFullYear() && c >= this.o.endDate.getUTCMonth() ? this.picker.find(\".next\").css({\n              visibility: \"hidden\"\n            }) : this.picker.find(\".next\").css({\n              visibility: \"visible\"\n            });\n            break;\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n            this.o.startDate !== -(1 / 0) && b <= this.o.startDate.getUTCFullYear() || this.o.maxViewMode < 2 ? this.picker.find(\".prev\").css({\n              visibility: \"hidden\"\n            }) : this.picker.find(\".prev\").css({\n              visibility: \"visible\"\n            }), this.o.endDate !== 1 / 0 && b >= this.o.endDate.getUTCFullYear() || this.o.maxViewMode < 2 ? this.picker.find(\".next\").css({\n              visibility: \"hidden\"\n            }) : this.picker.find(\".next\").css({\n              visibility: \"visible\"\n            });\n        }\n      }\n    },\n    click: function click(b) {\n      b.preventDefault(), b.stopPropagation();\n      var e, f, g, h, i, j, k;\n      e = a(b.target), e.hasClass(\"datepicker-switch\") && this.showMode(1);\n      var l = e.closest(\".prev, .next\");\n      l.length > 0 && (f = r.modes[this.viewMode].navStep * (l.hasClass(\"prev\") ? -1 : 1), 0 === this.viewMode ? (this.viewDate = this.moveMonth(this.viewDate, f), this._trigger(\"changeMonth\", this.viewDate)) : (this.viewDate = this.moveYear(this.viewDate, f), 1 === this.viewMode && this._trigger(\"changeYear\", this.viewDate)), this.fill()), e.hasClass(\"today\") && !e.hasClass(\"day\") && (this.showMode(-2), this._setDate(d(), \"linked\" === this.o.todayBtn ? null : \"view\")), e.hasClass(\"clear\") && this.clearDates(), e.hasClass(\"disabled\") || (e.hasClass(\"day\") && (g = parseInt(e.text(), 10) || 1, h = this.viewDate.getUTCFullYear(), i = this.viewDate.getUTCMonth(), e.hasClass(\"old\") && (0 === i ? (i = 11, h -= 1, j = !0, k = !0) : (i -= 1, j = !0)), e.hasClass(\"new\") && (11 === i ? (i = 0, h += 1, j = !0, k = !0) : (i += 1, j = !0)), this._setDate(c(h, i, g)), k && this._trigger(\"changeYear\", this.viewDate), j && this._trigger(\"changeMonth\", this.viewDate)), e.hasClass(\"month\") && (this.viewDate.setUTCDate(1), g = 1, i = e.parent().find(\"span\").index(e), h = this.viewDate.getUTCFullYear(), this.viewDate.setUTCMonth(i), this._trigger(\"changeMonth\", this.viewDate), 1 === this.o.minViewMode ? (this._setDate(c(h, i, g)), this.showMode()) : this.showMode(-1), this.fill()), (e.hasClass(\"year\") || e.hasClass(\"decade\") || e.hasClass(\"century\")) && (this.viewDate.setUTCDate(1), g = 1, i = 0, h = parseInt(e.text(), 10) || 0, this.viewDate.setUTCFullYear(h), e.hasClass(\"year\") && (this._trigger(\"changeYear\", this.viewDate), 2 === this.o.minViewMode && this._setDate(c(h, i, g))), e.hasClass(\"decade\") && (this._trigger(\"changeDecade\", this.viewDate), 3 === this.o.minViewMode && this._setDate(c(h, i, g))), e.hasClass(\"century\") && (this._trigger(\"changeCentury\", this.viewDate), 4 === this.o.minViewMode && this._setDate(c(h, i, g))), this.showMode(-1), this.fill())), this.picker.is(\":visible\") && this._focused_from && a(this._focused_from).focus(), delete this._focused_from;\n    },\n    _toggle_multidate: function _toggle_multidate(a) {\n      var b = this.dates.contains(a);\n      if (a || this.dates.clear(), -1 !== b ? (this.o.multidate === !0 || this.o.multidate > 1 || this.o.toggleActive) && this.dates.remove(b) : this.o.multidate === !1 ? (this.dates.clear(), this.dates.push(a)) : this.dates.push(a), \"number\" == typeof this.o.multidate) for (; this.dates.length > this.o.multidate;) this.dates.remove(0);\n    },\n    _setDate: function _setDate(a, b) {\n      b && \"date\" !== b || this._toggle_multidate(a && new Date(a)), b && \"view\" !== b || (this.viewDate = a && new Date(a)), this.fill(), this.setValue(), b && \"view\" === b || this._trigger(\"changeDate\"), this.inputField && this.inputField.change(), !this.o.autoclose || b && \"date\" !== b || this.hide();\n    },\n    moveDay: function moveDay(a, b) {\n      var c = new Date(a);\n      return c.setUTCDate(a.getUTCDate() + b), c;\n    },\n    moveWeek: function moveWeek(a, b) {\n      return this.moveDay(a, 7 * b);\n    },\n    moveMonth: function moveMonth(a, b) {\n      if (!g(a)) return this.o.defaultViewDate;\n      if (!b) return a;\n      var c,\n        d,\n        e = new Date(a.valueOf()),\n        f = e.getUTCDate(),\n        h = e.getUTCMonth(),\n        i = Math.abs(b);\n      if (b = b > 0 ? 1 : -1, 1 === i) d = -1 === b ? function () {\n        return e.getUTCMonth() === h;\n      } : function () {\n        return e.getUTCMonth() !== c;\n      }, c = h + b, e.setUTCMonth(c), (0 > c || c > 11) && (c = (c + 12) % 12);else {\n        for (var j = 0; i > j; j++) e = this.moveMonth(e, b);\n        c = e.getUTCMonth(), e.setUTCDate(f), d = function d() {\n          return c !== e.getUTCMonth();\n        };\n      }\n      for (; d();) e.setUTCDate(--f), e.setUTCMonth(c);\n      return e;\n    },\n    moveYear: function moveYear(a, b) {\n      return this.moveMonth(a, 12 * b);\n    },\n    moveAvailableDate: function moveAvailableDate(a, b, c) {\n      do {\n        if (a = this[c](a, b), !this.dateWithinRange(a)) return !1;\n        c = \"moveDay\";\n      } while (this.dateIsDisabled(a));\n      return a;\n    },\n    weekOfDateIsDisabled: function weekOfDateIsDisabled(b) {\n      return -1 !== a.inArray(b.getUTCDay(), this.o.daysOfWeekDisabled);\n    },\n    dateIsDisabled: function dateIsDisabled(b) {\n      return this.weekOfDateIsDisabled(b) || a.grep(this.o.datesDisabled, function (a) {\n        return e(b, a);\n      }).length > 0;\n    },\n    dateWithinRange: function dateWithinRange(a) {\n      return a >= this.o.startDate && a <= this.o.endDate;\n    },\n    keydown: function keydown(a) {\n      if (!this.picker.is(\":visible\")) return void ((40 === a.keyCode || 27 === a.keyCode) && (this.show(), a.stopPropagation()));\n      var b,\n        c,\n        d = !1,\n        e = this.focusDate || this.viewDate;\n      switch (a.keyCode) {\n        case 27:\n          this.focusDate ? (this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill()) : this.hide(), a.preventDefault(), a.stopPropagation();\n          break;\n        case 37:\n        case 38:\n        case 39:\n        case 40:\n          if (!this.o.keyboardNavigation || 7 === this.o.daysOfWeekDisabled.length) break;\n          b = 37 === a.keyCode || 38 === a.keyCode ? -1 : 1, 0 === this.viewMode ? a.ctrlKey ? (c = this.moveAvailableDate(e, b, \"moveYear\"), c && this._trigger(\"changeYear\", this.viewDate)) : a.shiftKey ? (c = this.moveAvailableDate(e, b, \"moveMonth\"), c && this._trigger(\"changeMonth\", this.viewDate)) : 37 === a.keyCode || 39 === a.keyCode ? c = this.moveAvailableDate(e, b, \"moveDay\") : this.weekOfDateIsDisabled(e) || (c = this.moveAvailableDate(e, b, \"moveWeek\")) : 1 === this.viewMode ? ((38 === a.keyCode || 40 === a.keyCode) && (b = 4 * b), c = this.moveAvailableDate(e, b, \"moveMonth\")) : 2 === this.viewMode && ((38 === a.keyCode || 40 === a.keyCode) && (b = 4 * b), c = this.moveAvailableDate(e, b, \"moveYear\")), c && (this.focusDate = this.viewDate = c, this.setValue(), this.fill(), a.preventDefault());\n          break;\n        case 13:\n          if (!this.o.forceParse) break;\n          e = this.focusDate || this.dates.get(-1) || this.viewDate, this.o.keyboardNavigation && (this._toggle_multidate(e), d = !0), this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.setValue(), this.fill(), this.picker.is(\":visible\") && (a.preventDefault(), a.stopPropagation(), this.o.autoclose && this.hide());\n          break;\n        case 9:\n          this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill(), this.hide();\n      }\n      d && (this.dates.length ? this._trigger(\"changeDate\") : this._trigger(\"clearDate\"), this.inputField && this.inputField.change());\n    },\n    showMode: function showMode(a) {\n      a && (this.viewMode = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, this.viewMode + a))), this.picker.children(\"div\").hide().filter(\".datepicker-\" + r.modes[this.viewMode].clsName).show(), this.updateNavArrows();\n    }\n  };\n  var l = function l(b, c) {\n    a(b).data(\"datepicker\", this), this.element = a(b), this.inputs = a.map(c.inputs, function (a) {\n      return a.jquery ? a[0] : a;\n    }), delete c.inputs, n.call(a(this.inputs), c).on(\"changeDate\", a.proxy(this.dateUpdated, this)), this.pickers = a.map(this.inputs, function (b) {\n      return a(b).data(\"datepicker\");\n    }), this.updateDates();\n  };\n  l.prototype = {\n    updateDates: function updateDates() {\n      this.dates = a.map(this.pickers, function (a) {\n        return a.getUTCDate();\n      }), this.updateRanges();\n    },\n    updateRanges: function updateRanges() {\n      var b = a.map(this.dates, function (a) {\n        return a.valueOf();\n      });\n      a.each(this.pickers, function (a, c) {\n        c.setRange(b);\n      });\n    },\n    dateUpdated: function dateUpdated(b) {\n      if (!this.updating) {\n        this.updating = !0;\n        var c = a(b.target).data(\"datepicker\");\n        if (\"undefined\" != typeof c) {\n          var d = c.getUTCDate(),\n            e = a.inArray(b.target, this.inputs),\n            f = e - 1,\n            g = e + 1,\n            h = this.inputs.length;\n          if (-1 !== e) {\n            if (a.each(this.pickers, function (a, b) {\n              b.getUTCDate() || b.setUTCDate(d);\n            }), d < this.dates[f]) for (; f >= 0 && d < this.dates[f];) this.pickers[f--].setUTCDate(d);else if (d > this.dates[g]) for (; h > g && d > this.dates[g];) this.pickers[g++].setUTCDate(d);\n            this.updateDates(), delete this.updating;\n          }\n        }\n      }\n    },\n    remove: function remove() {\n      a.map(this.pickers, function (a) {\n        a.remove();\n      }), delete this.element.data().datepicker;\n    }\n  };\n  var m = a.fn.datepicker,\n    n = function n(c) {\n      var d = Array.apply(null, arguments);\n      d.shift();\n      var e;\n      if (this.each(function () {\n        var b = a(this),\n          f = b.data(\"datepicker\"),\n          g = \"object\" == _typeof(c) && c;\n        if (!f) {\n          var j = h(this, \"date\"),\n            m = a.extend({}, o, j, g),\n            n = i(m.language),\n            p = a.extend({}, o, n, j, g);\n          b.hasClass(\"input-daterange\") || p.inputs ? (a.extend(p, {\n            inputs: p.inputs || b.find(\"input\").toArray()\n          }), f = new l(this, p)) : f = new k(this, p), b.data(\"datepicker\", f);\n        }\n        \"string\" == typeof c && \"function\" == typeof f[c] && (e = f[c].apply(f, d));\n      }), e === b || e instanceof k || e instanceof l) return this;\n      if (this.length > 1) throw new Error(\"Using only allowed for the collection of a single element (\" + c + \" function)\");\n      return e;\n    };\n  a.fn.datepicker = n;\n  var o = a.fn.datepicker.defaults = {\n      assumeNearbyYear: !1,\n      autoclose: !1,\n      beforeShowDay: a.noop,\n      beforeShowMonth: a.noop,\n      beforeShowYear: a.noop,\n      beforeShowDecade: a.noop,\n      beforeShowCentury: a.noop,\n      calendarWeeks: !1,\n      clearBtn: !1,\n      toggleActive: !1,\n      daysOfWeekDisabled: [],\n      daysOfWeekHighlighted: [],\n      datesDisabled: [],\n      endDate: 1 / 0,\n      forceParse: !0,\n      format: \"mm/dd/yyyy\",\n      keyboardNavigation: !0,\n      language: \"en\",\n      minViewMode: 0,\n      maxViewMode: 4,\n      multidate: !1,\n      multidateSeparator: \",\",\n      orientation: \"auto\",\n      rtl: !1,\n      startDate: -(1 / 0),\n      startView: 0,\n      todayBtn: !1,\n      todayHighlight: !1,\n      weekStart: 0,\n      disableTouchKeyboard: !1,\n      enableOnReadonly: !0,\n      showOnFocus: !0,\n      zIndexOffset: 10,\n      container: \"body\",\n      immediateUpdates: !1,\n      title: \"\",\n      templates: {\n        leftArrow: \"&laquo;\",\n        rightArrow: \"&raquo;\"\n      }\n    },\n    p = a.fn.datepicker.locale_opts = [\"format\", \"rtl\", \"weekStart\"];\n  a.fn.datepicker.Constructor = k;\n  var q = a.fn.datepicker.dates = {\n      en: {\n        days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n        daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n        months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        today: \"Today\",\n        clear: \"Clear\",\n        titleFormat: \"MM yyyy\"\n      }\n    },\n    r = {\n      modes: [{\n        clsName: \"days\",\n        navFnc: \"Month\",\n        navStep: 1\n      }, {\n        clsName: \"months\",\n        navFnc: \"FullYear\",\n        navStep: 1\n      }, {\n        clsName: \"years\",\n        navFnc: \"FullYear\",\n        navStep: 10\n      }, {\n        clsName: \"decades\",\n        navFnc: \"FullDecade\",\n        navStep: 100\n      }, {\n        clsName: \"centuries\",\n        navFnc: \"FullCentury\",\n        navStep: 1e3\n      }],\n      isLeapYear: function isLeapYear(a) {\n        return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;\n      },\n      getDaysInMonth: function getDaysInMonth(a, b) {\n        return [31, r.isLeapYear(a) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][b];\n      },\n      validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\n      nonpunctuation: /[^ -\\/:-@\\u5e74\\u6708\\u65e5\\[-`{-~\\t\\n\\r]+/g,\n      parseFormat: function parseFormat(a) {\n        if (\"function\" == typeof a.toValue && \"function\" == typeof a.toDisplay) return a;\n        var b = a.replace(this.validParts, \"\\x00\").split(\"\\x00\"),\n          c = a.match(this.validParts);\n        if (!b || !b.length || !c || 0 === c.length) throw new Error(\"Invalid date format.\");\n        return {\n          separators: b,\n          parts: c\n        };\n      },\n      parseDate: function parseDate(e, f, g, h) {\n        function i(a, b) {\n          return b === !0 && (b = 10), 100 > a && (a += 2e3, a > new Date().getFullYear() + b && (a -= 100)), a;\n        }\n        function j() {\n          var a = this.slice(0, s[n].length),\n            b = s[n].slice(0, a.length);\n          return a.toLowerCase() === b.toLowerCase();\n        }\n        if (!e) return b;\n        if (e instanceof Date) return e;\n        if (\"string\" == typeof f && (f = r.parseFormat(f)), f.toValue) return f.toValue(e, f, g);\n        var l,\n          m,\n          n,\n          o,\n          p = /([\\-+]\\d+)([dmwy])/,\n          s = e.match(/([\\-+]\\d+)([dmwy])/g),\n          t = {\n            d: \"moveDay\",\n            m: \"moveMonth\",\n            w: \"moveWeek\",\n            y: \"moveYear\"\n          },\n          u = {\n            yesterday: \"-1d\",\n            today: \"+0d\",\n            tomorrow: \"+1d\"\n          };\n        if (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(e)) {\n          for (e = new Date(), n = 0; n < s.length; n++) l = p.exec(s[n]), m = parseInt(l[1]), o = t[l[2]], e = k.prototype[o](e, m);\n          return c(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate());\n        }\n        if (\"undefined\" != typeof u[e] && (e = u[e], s = e.match(/([\\-+]\\d+)([dmwy])/g), /^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(e))) {\n          for (e = new Date(), n = 0; n < s.length; n++) l = p.exec(s[n]), m = parseInt(l[1]), o = t[l[2]], e = k.prototype[o](e, m);\n          return c(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate());\n        }\n        s = e && e.match(this.nonpunctuation) || [], e = new Date();\n        var v,\n          w,\n          x = {},\n          y = [\"yyyy\", \"yy\", \"M\", \"MM\", \"m\", \"mm\", \"d\", \"dd\"],\n          z = {\n            yyyy: function yyyy(a, b) {\n              return a.setUTCFullYear(h ? i(b, h) : b);\n            },\n            yy: function yy(a, b) {\n              return a.setUTCFullYear(h ? i(b, h) : b);\n            },\n            m: function m(a, b) {\n              if (isNaN(a)) return a;\n              for (b -= 1; 0 > b;) b += 12;\n              for (b %= 12, a.setUTCMonth(b); a.getUTCMonth() !== b;) a.setUTCDate(a.getUTCDate() - 1);\n              return a;\n            },\n            d: function d(a, b) {\n              return a.setUTCDate(b);\n            }\n          };\n        z.M = z.MM = z.mm = z.m, z.dd = z.d, e = d();\n        var A = f.parts.slice();\n        if (s.length !== A.length && (A = a(A).filter(function (b, c) {\n          return -1 !== a.inArray(c, y);\n        }).toArray()), s.length === A.length) {\n          var B;\n          for (n = 0, B = A.length; B > n; n++) {\n            if (v = parseInt(s[n], 10), l = A[n], isNaN(v)) switch (l) {\n              case \"MM\":\n                w = a(q[g].months).filter(j), v = a.inArray(w[0], q[g].months) + 1;\n                break;\n              case \"M\":\n                w = a(q[g].monthsShort).filter(j), v = a.inArray(w[0], q[g].monthsShort) + 1;\n            }\n            x[l] = v;\n          }\n          var C, D;\n          for (n = 0; n < y.length; n++) D = y[n], D in x && !isNaN(x[D]) && (C = new Date(e), z[D](C, x[D]), isNaN(C) || (e = C));\n        }\n        return e;\n      },\n      formatDate: function formatDate(b, c, d) {\n        if (!b) return \"\";\n        if (\"string\" == typeof c && (c = r.parseFormat(c)), c.toDisplay) return c.toDisplay(b, c, d);\n        var e = {\n          d: b.getUTCDate(),\n          D: q[d].daysShort[b.getUTCDay()],\n          DD: q[d].days[b.getUTCDay()],\n          m: b.getUTCMonth() + 1,\n          M: q[d].monthsShort[b.getUTCMonth()],\n          MM: q[d].months[b.getUTCMonth()],\n          yy: b.getUTCFullYear().toString().substring(2),\n          yyyy: b.getUTCFullYear()\n        };\n        e.dd = (e.d < 10 ? \"0\" : \"\") + e.d, e.mm = (e.m < 10 ? \"0\" : \"\") + e.m, b = [];\n        for (var f = a.extend([], c.separators), g = 0, h = c.parts.length; h >= g; g++) f.length && b.push(f.shift()), b.push(e[c.parts[g]]);\n        return b.join(\"\");\n      },\n      headTemplate: '<thead><tr><th colspan=\"7\" class=\"datepicker-title\"></th></tr><tr><th class=\"prev\">&laquo;</th><th colspan=\"5\" class=\"datepicker-switch\"></th><th class=\"next\">&raquo;</th></tr></thead>',\n      contTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\n      footTemplate: '<tfoot><tr><th colspan=\"7\" class=\"today\"></th></tr><tr><th colspan=\"7\" class=\"clear\"></th></tr></tfoot>'\n    };\n  r.template = '<div class=\"datepicker\"><div class=\"datepicker-days\"><table class=\"table-condensed\">' + r.headTemplate + \"<tbody></tbody>\" + r.footTemplate + '</table></div><div class=\"datepicker-months\"><table class=\"table-condensed\">' + r.headTemplate + r.contTemplate + r.footTemplate + '</table></div><div class=\"datepicker-years\"><table class=\"table-condensed\">' + r.headTemplate + r.contTemplate + r.footTemplate + '</table></div><div class=\"datepicker-decades\"><table class=\"table-condensed\">' + r.headTemplate + r.contTemplate + r.footTemplate + '</table></div><div class=\"datepicker-centuries\"><table class=\"table-condensed\">' + r.headTemplate + r.contTemplate + r.footTemplate + \"</table></div></div>\", a.fn.datepicker.DPGlobal = r, a.fn.datepicker.noConflict = function () {\n    return a.fn.datepicker = m, this;\n  }, a.fn.datepicker.version = \"1.6.4\", a(document).on(\"focus.datepicker.data-api click.datepicker.data-api\", '[data-provide=\"datepicker\"]', function (b) {\n    var c = a(this);\n    c.data(\"datepicker\") || (b.preventDefault(), n.call(c, \"show\"));\n  }), a(function () {\n    n.call(a('[data-provide=\"datepicker-inline\"]'));\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvbGFuZGluZy1wYWdlL2Jvb3RzdHJhcC1kYXRlcGlja2VyLm1pbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFVBQVNBLENBQUMsRUFBQztFQUFDLEtBQXFDLEdBQUNDLGlDQUFPLENBQUMseUVBQVEsQ0FBQyxvQ0FBQ0QsQ0FBQztBQUFBO0FBQUE7QUFBQSxrR0FBQyxHQUFDQSxDQUFvRDtBQUFBLENBQUMsQ0FBQyxVQUFTQSxDQUFDLEVBQUNPLENBQUMsRUFBQztFQUFDLFNBQVNDLENBQUNBLENBQUEsRUFBRTtJQUFDLE9BQU8sSUFBSUMsSUFBSSxDQUFDQSxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDRixJQUFJLEVBQUNHLFNBQVMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxTQUFTQyxDQUFDQSxDQUFBLEVBQUU7SUFBQyxJQUFJYixDQUFDLEdBQUMsSUFBSVMsSUFBSSxDQUFELENBQUM7SUFBQyxPQUFPRCxDQUFDLENBQUNSLENBQUMsQ0FBQ2MsV0FBVyxDQUFDLENBQUMsRUFBQ2QsQ0FBQyxDQUFDZSxRQUFRLENBQUMsQ0FBQyxFQUFDZixDQUFDLENBQUNnQixPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxTQUFTQyxDQUFDQSxDQUFDakIsQ0FBQyxFQUFDTyxDQUFDLEVBQUM7SUFBQyxPQUFPUCxDQUFDLENBQUNrQixjQUFjLENBQUMsQ0FBQyxLQUFHWCxDQUFDLENBQUNXLGNBQWMsQ0FBQyxDQUFDLElBQUVsQixDQUFDLENBQUNtQixXQUFXLENBQUMsQ0FBQyxLQUFHWixDQUFDLENBQUNZLFdBQVcsQ0FBQyxDQUFDLElBQUVuQixDQUFDLENBQUNvQixVQUFVLENBQUMsQ0FBQyxLQUFHYixDQUFDLENBQUNhLFVBQVUsQ0FBQyxDQUFDO0VBQUE7RUFBQyxTQUFTQyxDQUFDQSxDQUFDckIsQ0FBQyxFQUFDO0lBQUMsT0FBTyxZQUFVO01BQUMsT0FBTyxJ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QyxDQUFDcEIsRUFBRSxDQUFDLHFEQUFxRCxFQUFDLDZCQUE2QixFQUFDLFVBQVMvSCxDQUFDLEVBQUM7SUFBQyxJQUFJQyxDQUFDLEdBQUNSLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFBQ1EsQ0FBQyxDQUFDbUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFHcEIsQ0FBQyxDQUFDK0ssY0FBYyxDQUFDLENBQUMsRUFBQ3lCLENBQUMsQ0FBQ2dGLElBQUksQ0FBQ3ZSLENBQUMsRUFBQyxNQUFNLENBQUMsQ0FBQztFQUFBLENBQUMsQ0FBQyxFQUFDUixDQUFDLENBQUMsWUFBVTtJQUFDK00sQ0FBQyxDQUFDZ0YsSUFBSSxDQUFDL1IsQ0FBQyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7RUFBQSxDQUFDLENBQUM7QUFBQSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbGFuZGluZy1wYWdlL2Jvb3RzdHJhcC1kYXRlcGlja2VyLm1pbi5qcz8xMGU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBEYXRlcGlja2VyIGZvciBCb290c3RyYXAgdjEuNi40IChodHRwczovL2dpdGh1Yi5jb20vZXRlcm5pY29kZS9ib290c3RyYXAtZGF0ZXBpY2tlcilcclxuICpcclxuICogQ29weXJpZ2h0IDIwMTIgU3RlZmFuIFBldHJlXHJcbiAqIEltcHJvdmVtZW50cyBieSBBbmRyZXcgUm93bHNcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlIHYyLjAgKGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMClcclxuICovXHJcbiFmdW5jdGlvbihhKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxhKTphKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP3JlcXVpcmUoXCJqcXVlcnlcIik6alF1ZXJ5KX0oZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKCl7cmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KERhdGUsYXJndW1lbnRzKSl9ZnVuY3Rpb24gZCgpe3ZhciBhPW5ldyBEYXRlO3JldHVybiBjKGEuZ2V0RnVsbFllYXIoKSxhLmdldE1vbnRoKCksYS5nZXREYXRlKCkpfWZ1bmN0aW9uIGUoYSxiKXtyZXR1cm4gYS5nZXRVVENGdWxsWWVhcigpPT09Yi5nZXRVVENGdWxsWWVhcigpJiZhLmdldFVUQ01vbnRoKCk9PT1iLmdldFVUQ01vbnRoKCkmJmEuZ2V0VVRDRGF0ZSgpPT09Yi5nZXRVVENEYXRlKCl9ZnVuY3Rpb24gZihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1thXS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGcoYSl7cmV0dXJuIGEmJiFpc05hTihhLmdldFRpbWUoKSl9ZnVuY3Rpb24gaChiLGMpe2Z1bmN0aW9uIGQoYSxiKXtyZXR1cm4gYi50b0xvd2VyQ2FzZSgpfXZhciBlLGY9YShiKS5kYXRhKCksZz17fSxoPW5ldyBSZWdFeHAoXCJeXCIrYy50b0xvd2VyQ2FzZSgpK1wiKFtBLVpdKVwiKTtjPW5ldyBSZWdFeHAoXCJeXCIrYy50b0xvd2VyQ2FzZSgpKTtmb3IodmFyIGkgaW4gZiljLnRlc3QoaSkmJihlPWkucmVwbGFjZShoLGQpLGdbZV09ZltpXSk7cmV0dXJuIGd9ZnVuY3Rpb24gaShiKXt2YXIgYz17fTtpZihxW2JdfHwoYj1iLnNwbGl0KFwiLVwiKVswXSxxW2JdKSl7dmFyIGQ9cVtiXTtyZXR1cm4gYS5lYWNoKHAsZnVuY3Rpb24oYSxiKXtiIGluIGQmJihjW2JdPWRbYl0pfSksY319dmFyIGo9ZnVuY3Rpb24oKXt2YXIgYj17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnNsaWNlKGEpWzBdfSxjb250YWluczpmdW5jdGlvbihhKXtmb3IodmFyIGI9YSYmYS52YWx1ZU9mKCksYz0wLGQ9dGhpcy5sZW5ndGg7ZD5jO2MrKylpZih0aGlzW2NdLnZhbHVlT2YoKT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9LHJlbW92ZTpmdW5jdGlvbihhKXt0aGlzLnNwbGljZShhLDEpfSxyZXBsYWNlOmZ1bmN0aW9uKGIpe2ImJihhLmlzQXJyYXkoYil8fChiPVtiXSksdGhpcy5jbGVhcigpLHRoaXMucHVzaC5hcHBseSh0aGlzLGIpKX0sY2xlYXI6ZnVuY3Rpb24oKXt0aGlzLmxlbmd0aD0wfSxjb3B5OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGo7cmV0dXJuIGEucmVwbGFjZSh0aGlzKSxhfX07cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9W107cmV0dXJuIGMucHVzaC5hcHBseShjLGFyZ3VtZW50cyksYS5leHRlbmQoYyxiKSxjfX0oKSxrPWZ1bmN0aW9uKGIsYyl7YShiKS5kYXRhKFwiZGF0ZXBpY2tlclwiLHRoaXMpLHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyhjKSx0aGlzLmRhdGVzPW5ldyBqLHRoaXMudmlld0RhdGU9dGhpcy5vLmRlZmF1bHRWaWV3RGF0ZSx0aGlzLmZvY3VzRGF0ZT1udWxsLHRoaXMuZWxlbWVudD1hKGIpLHRoaXMuaXNJbnB1dD10aGlzLmVsZW1lbnQuaXMoXCJpbnB1dFwiKSx0aGlzLmlucHV0RmllbGQ9dGhpcy5pc0lucHV0P3RoaXMuZWxlbWVudDp0aGlzLmVsZW1lbnQuZmluZChcImlucHV0XCIpLHRoaXMuY29tcG9uZW50PXRoaXMuZWxlbWVudC5oYXNDbGFzcyhcImRhdGVcIik/dGhpcy5lbGVtZW50LmZpbmQoXCIuYWRkLW9uLCAuaW5wdXQtZ3JvdXAtYWRkb24sIC5idG5cIik6ITEsdGhpcy5oYXNJbnB1dD10aGlzLmNvbXBvbmVudCYmdGhpcy5pbnB1dEZpZWxkLmxlbmd0aCx0aGlzLmNvbXBvbmVudCYmMD09PXRoaXMuY29tcG9uZW50Lmxlbmd0aCYmKHRoaXMuY29tcG9uZW50PSExKSx0aGlzLmlzSW5saW5lPSF0aGlzLmNvbXBvbmVudCYmdGhpcy5lbGVtZW50LmlzKFwiZGl2XCIpLHRoaXMucGlja2VyPWEoci50ZW1wbGF0ZSksdGhpcy5fY2hlY2tfdGVtcGxhdGUodGhpcy5vLnRlbXBsYXRlcy5sZWZ0QXJyb3cpJiZ0aGlzLnBpY2tlci5maW5kKFwiLnByZXZcIikuaHRtbCh0aGlzLm8udGVtcGxhdGVzLmxlZnRBcnJvdyksdGhpcy5fY2hlY2tfdGVtcGxhdGUodGhpcy5vLnRlbXBsYXRlcy5yaWdodEFycm93KSYmdGhpcy5waWNrZXIuZmluZChcIi5uZXh0XCIpLmh0bWwodGhpcy5vLnRlbXBsYXRlcy5yaWdodEFycm93KSx0aGlzLl9idWlsZEV2ZW50cygpLHRoaXMuX2F0dGFjaEV2ZW50cygpLHRoaXMuaXNJbmxpbmU/dGhpcy5waWNrZXIuYWRkQ2xhc3MoXCJkYXRlcGlja2VyLWlubGluZVwiKS5hcHBlbmRUbyh0aGlzLmVsZW1lbnQpOnRoaXMucGlja2VyLmFkZENsYXNzKFwiZGF0ZXBpY2tlci1kcm9wZG93biBkcm9wZG93bi1tZW51XCIpLHRoaXMuby5ydGwmJnRoaXMucGlja2VyLmFkZENsYXNzKFwiZGF0ZXBpY2tlci1ydGxcIiksdGhpcy52aWV3TW9kZT10aGlzLm8uc3RhcnRWaWV3LHRoaXMuby5jYWxlbmRhcldlZWtzJiZ0aGlzLnBpY2tlci5maW5kKFwidGhlYWQgLmRhdGVwaWNrZXItdGl0bGUsIHRmb290IC50b2RheSwgdGZvb3QgLmNsZWFyXCIpLmF0dHIoXCJjb2xzcGFuXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGFyc2VJbnQoYikrMX0pLHRoaXMuX2FsbG93X3VwZGF0ZT0hMSx0aGlzLnNldFN0YXJ0RGF0ZSh0aGlzLl9vLnN0YXJ0RGF0ZSksdGhpcy5zZXRFbmREYXRlKHRoaXMuX28uZW5kRGF0ZSksdGhpcy5zZXREYXlzT2ZXZWVrRGlzYWJsZWQodGhpcy5vLmRheXNPZldlZWtEaXNhYmxlZCksdGhpcy5zZXREYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQodGhpcy5vLmRheXNPZldlZWtIaWdobGlnaHRlZCksdGhpcy5zZXREYXRlc0Rpc2FibGVkKHRoaXMuby5kYXRlc0Rpc2FibGVkKSx0aGlzLmZpbGxEb3coKSx0aGlzLmZpbGxNb250aHMoKSx0aGlzLl9hbGxvd191cGRhdGU9ITAsdGhpcy51cGRhdGUoKSx0aGlzLnNob3dNb2RlKCksdGhpcy5pc0lubGluZSYmdGhpcy5zaG93KCl9O2sucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjprLF9yZXNvbHZlVmlld05hbWU6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gMD09PWF8fFwiZGF5c1wiPT09YXx8XCJtb250aFwiPT09YT8wOjE9PT1hfHxcIm1vbnRoc1wiPT09YXx8XCJ5ZWFyXCI9PT1hPzE6Mj09PWF8fFwieWVhcnNcIj09PWF8fFwiZGVjYWRlXCI9PT1hPzI6Mz09PWF8fFwiZGVjYWRlc1wiPT09YXx8XCJjZW50dXJ5XCI9PT1hPzM6ND09PWF8fFwiY2VudHVyaWVzXCI9PT1hfHxcIm1pbGxlbm5pdW1cIj09PWE/NDpjPT09Yj8hMTpjfSxfY2hlY2tfdGVtcGxhdGU6ZnVuY3Rpb24oYyl7dHJ5e2lmKGM9PT1ifHxcIlwiPT09YylyZXR1cm4hMTtpZigoYy5tYXRjaCgvWzw+XS9nKXx8W10pLmxlbmd0aDw9MClyZXR1cm4hMDt2YXIgZD1hKGMpO3JldHVybiBkLmxlbmd0aD4wfWNhdGNoKGUpe3JldHVybiExfX0sX3Byb2Nlc3Nfb3B0aW9uczpmdW5jdGlvbihiKXt0aGlzLl9vPWEuZXh0ZW5kKHt9LHRoaXMuX28sYik7dmFyIGU9dGhpcy5vPWEuZXh0ZW5kKHt9LHRoaXMuX28pLGY9ZS5sYW5ndWFnZTtxW2ZdfHwoZj1mLnNwbGl0KFwiLVwiKVswXSxxW2ZdfHwoZj1vLmxhbmd1YWdlKSksZS5sYW5ndWFnZT1mLGUuc3RhcnRWaWV3PXRoaXMuX3Jlc29sdmVWaWV3TmFtZShlLnN0YXJ0VmlldywwKSxlLm1pblZpZXdNb2RlPXRoaXMuX3Jlc29sdmVWaWV3TmFtZShlLm1pblZpZXdNb2RlLDApLGUubWF4Vmlld01vZGU9dGhpcy5fcmVzb2x2ZVZpZXdOYW1lKGUubWF4Vmlld01vZGUsNCksZS5zdGFydFZpZXc9TWF0aC5taW4oZS5zdGFydFZpZXcsZS5tYXhWaWV3TW9kZSksZS5zdGFydFZpZXc9TWF0aC5tYXgoZS5zdGFydFZpZXcsZS5taW5WaWV3TW9kZSksZS5tdWx0aWRhdGUhPT0hMCYmKGUubXVsdGlkYXRlPU51bWJlcihlLm11bHRpZGF0ZSl8fCExLGUubXVsdGlkYXRlIT09ITEmJihlLm11bHRpZGF0ZT1NYXRoLm1heCgwLGUubXVsdGlkYXRlKSkpLGUubXVsdGlkYXRlU2VwYXJhdG9yPVN0cmluZyhlLm11bHRpZGF0ZVNlcGFyYXRvciksZS53ZWVrU3RhcnQlPTcsZS53ZWVrRW5kPShlLndlZWtTdGFydCs2KSU3O3ZhciBnPXIucGFyc2VGb3JtYXQoZS5mb3JtYXQpO2Uuc3RhcnREYXRlIT09LSgxLzApJiYoZS5zdGFydERhdGU/ZS5zdGFydERhdGUgaW5zdGFuY2VvZiBEYXRlP2Uuc3RhcnREYXRlPXRoaXMuX2xvY2FsX3RvX3V0Yyh0aGlzLl96ZXJvX3RpbWUoZS5zdGFydERhdGUpKTplLnN0YXJ0RGF0ZT1yLnBhcnNlRGF0ZShlLnN0YXJ0RGF0ZSxnLGUubGFuZ3VhZ2UsZS5hc3N1bWVOZWFyYnlZZWFyKTplLnN0YXJ0RGF0ZT0tKDEvMCkpLGUuZW5kRGF0ZSE9PTEvMCYmKGUuZW5kRGF0ZT9lLmVuZERhdGUgaW5zdGFuY2VvZiBEYXRlP2UuZW5kRGF0ZT10aGlzLl9sb2NhbF90b191dGModGhpcy5femVyb190aW1lKGUuZW5kRGF0ZSkpOmUuZW5kRGF0ZT1yLnBhcnNlRGF0ZShlLmVuZERhdGUsZyxlLmxhbmd1YWdlLGUuYXNzdW1lTmVhcmJ5WWVhcik6ZS5lbmREYXRlPTEvMCksZS5kYXlzT2ZXZWVrRGlzYWJsZWQ9ZS5kYXlzT2ZXZWVrRGlzYWJsZWR8fFtdLGEuaXNBcnJheShlLmRheXNPZldlZWtEaXNhYmxlZCl8fChlLmRheXNPZldlZWtEaXNhYmxlZD1lLmRheXNPZldlZWtEaXNhYmxlZC5zcGxpdCgvWyxcXHNdKi8pKSxlLmRheXNPZldlZWtEaXNhYmxlZD1hLm1hcChlLmRheXNPZldlZWtEaXNhYmxlZCxmdW5jdGlvbihhKXtyZXR1cm4gcGFyc2VJbnQoYSwxMCl9KSxlLmRheXNPZldlZWtIaWdobGlnaHRlZD1lLmRheXNPZldlZWtIaWdobGlnaHRlZHx8W10sYS5pc0FycmF5KGUuZGF5c09mV2Vla0hpZ2hsaWdodGVkKXx8KGUuZGF5c09mV2Vla0hpZ2hsaWdodGVkPWUuZGF5c09mV2Vla0hpZ2hsaWdodGVkLnNwbGl0KC9bLFxcc10qLykpLGUuZGF5c09mV2Vla0hpZ2hsaWdodGVkPWEubWFwKGUuZGF5c09mV2Vla0hpZ2hsaWdodGVkLGZ1bmN0aW9uKGEpe3JldHVybiBwYXJzZUludChhLDEwKX0pLGUuZGF0ZXNEaXNhYmxlZD1lLmRhdGVzRGlzYWJsZWR8fFtdLGEuaXNBcnJheShlLmRhdGVzRGlzYWJsZWQpfHwoZS5kYXRlc0Rpc2FibGVkPVtlLmRhdGVzRGlzYWJsZWRdKSxlLmRhdGVzRGlzYWJsZWQ9YS5tYXAoZS5kYXRlc0Rpc2FibGVkLGZ1bmN0aW9uKGEpe3JldHVybiByLnBhcnNlRGF0ZShhLGcsZS5sYW5ndWFnZSxlLmFzc3VtZU5lYXJieVllYXIpfSk7dmFyIGg9U3RyaW5nKGUub3JpZW50YXRpb24pLnRvTG93ZXJDYXNlKCkuc3BsaXQoL1xccysvZyksaT1lLm9yaWVudGF0aW9uLnRvTG93ZXJDYXNlKCk7aWYoaD1hLmdyZXAoaCxmdW5jdGlvbihhKXtyZXR1cm4vXmF1dG98bGVmdHxyaWdodHx0b3B8Ym90dG9tJC8udGVzdChhKX0pLGUub3JpZW50YXRpb249e3g6XCJhdXRvXCIseTpcImF1dG9cIn0saSYmXCJhdXRvXCIhPT1pKWlmKDE9PT1oLmxlbmd0aClzd2l0Y2goaFswXSl7Y2FzZVwidG9wXCI6Y2FzZVwiYm90dG9tXCI6ZS5vcmllbnRhdGlvbi55PWhbMF07YnJlYWs7Y2FzZVwibGVmdFwiOmNhc2VcInJpZ2h0XCI6ZS5vcmllbnRhdGlvbi54PWhbMF19ZWxzZSBpPWEuZ3JlcChoLGZ1bmN0aW9uKGEpe3JldHVybi9ebGVmdHxyaWdodCQvLnRlc3QoYSl9KSxlLm9yaWVudGF0aW9uLng9aVswXXx8XCJhdXRvXCIsaT1hLmdyZXAoaCxmdW5jdGlvbihhKXtyZXR1cm4vXnRvcHxib3R0b20kLy50ZXN0KGEpfSksZS5vcmllbnRhdGlvbi55PWlbMF18fFwiYXV0b1wiO2Vsc2U7aWYoZS5kZWZhdWx0Vmlld0RhdGUpe3ZhciBqPWUuZGVmYXVsdFZpZXdEYXRlLnllYXJ8fChuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxrPWUuZGVmYXVsdFZpZXdEYXRlLm1vbnRofHwwLGw9ZS5kZWZhdWx0Vmlld0RhdGUuZGF5fHwxO2UuZGVmYXVsdFZpZXdEYXRlPWMoaixrLGwpfWVsc2UgZS5kZWZhdWx0Vmlld0RhdGU9ZCgpfSxfZXZlbnRzOltdLF9zZWNvbmRhcnlFdmVudHM6W10sX2FwcGx5RXZlbnRzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxkLGUsZj0wO2Y8YS5sZW5ndGg7ZisrKWM9YVtmXVswXSwyPT09YVtmXS5sZW5ndGg/KGQ9YixlPWFbZl1bMV0pOjM9PT1hW2ZdLmxlbmd0aCYmKGQ9YVtmXVsxXSxlPWFbZl1bMl0pLGMub24oZSxkKX0sX3VuYXBwbHlFdmVudHM6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjLGQsZSxmPTA7ZjxhLmxlbmd0aDtmKyspYz1hW2ZdWzBdLDI9PT1hW2ZdLmxlbmd0aD8oZT1iLGQ9YVtmXVsxXSk6Mz09PWFbZl0ubGVuZ3RoJiYoZT1hW2ZdWzFdLGQ9YVtmXVsyXSksYy5vZmYoZCxlKX0sX2J1aWxkRXZlbnRzOmZ1bmN0aW9uKCl7dmFyIGI9e2tleXVwOmEucHJveHkoZnVuY3Rpb24oYil7LTE9PT1hLmluQXJyYXkoYi5rZXlDb2RlLFsyNywzNywzOSwzOCw0MCwzMiwxMyw5XSkmJnRoaXMudXBkYXRlKCl9LHRoaXMpLGtleWRvd246YS5wcm94eSh0aGlzLmtleWRvd24sdGhpcykscGFzdGU6YS5wcm94eSh0aGlzLnBhc3RlLHRoaXMpfTt0aGlzLm8uc2hvd09uRm9jdXM9PT0hMCYmKGIuZm9jdXM9YS5wcm94eSh0aGlzLnNob3csdGhpcykpLHRoaXMuaXNJbnB1dD90aGlzLl9ldmVudHM9W1t0aGlzLmVsZW1lbnQsYl1dOnRoaXMuY29tcG9uZW50JiZ0aGlzLmhhc0lucHV0P3RoaXMuX2V2ZW50cz1bW3RoaXMuaW5wdXRGaWVsZCxiXSxbdGhpcy5jb21wb25lbnQse2NsaWNrOmEucHJveHkodGhpcy5zaG93LHRoaXMpfV1dOnRoaXMuX2V2ZW50cz1bW3RoaXMuZWxlbWVudCx7Y2xpY2s6YS5wcm94eSh0aGlzLnNob3csdGhpcyksa2V5ZG93bjphLnByb3h5KHRoaXMua2V5ZG93bix0aGlzKX1dXSx0aGlzLl9ldmVudHMucHVzaChbdGhpcy5lbGVtZW50LFwiKlwiLHtibHVyOmEucHJveHkoZnVuY3Rpb24oYSl7dGhpcy5fZm9jdXNlZF9mcm9tPWEudGFyZ2V0fSx0aGlzKX1dLFt0aGlzLmVsZW1lbnQse2JsdXI6YS5wcm94eShmdW5jdGlvbihhKXt0aGlzLl9mb2N1c2VkX2Zyb209YS50YXJnZXR9LHRoaXMpfV0pLHRoaXMuby5pbW1lZGlhdGVVcGRhdGVzJiZ0aGlzLl9ldmVudHMucHVzaChbdGhpcy5lbGVtZW50LHtcImNoYW5nZVllYXIgY2hhbmdlTW9udGhcIjphLnByb3h5KGZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlKGEuZGF0ZSl9LHRoaXMpfV0pLHRoaXMuX3NlY29uZGFyeUV2ZW50cz1bW3RoaXMucGlja2VyLHtjbGljazphLnByb3h5KHRoaXMuY2xpY2ssdGhpcyl9XSxbYSh3aW5kb3cpLHtyZXNpemU6YS5wcm94eSh0aGlzLnBsYWNlLHRoaXMpfV0sW2EoZG9jdW1lbnQpLHttb3VzZWRvd246YS5wcm94eShmdW5jdGlvbihhKXt0aGlzLmVsZW1lbnQuaXMoYS50YXJnZXQpfHx0aGlzLmVsZW1lbnQuZmluZChhLnRhcmdldCkubGVuZ3RofHx0aGlzLnBpY2tlci5pcyhhLnRhcmdldCl8fHRoaXMucGlja2VyLmZpbmQoYS50YXJnZXQpLmxlbmd0aHx8dGhpcy5pc0lubGluZXx8dGhpcy5oaWRlKCl9LHRoaXMpfV1dfSxfYXR0YWNoRXZlbnRzOmZ1bmN0aW9uKCl7dGhpcy5fZGV0YWNoRXZlbnRzKCksdGhpcy5fYXBwbHlFdmVudHModGhpcy5fZXZlbnRzKX0sX2RldGFjaEV2ZW50czpmdW5jdGlvbigpe3RoaXMuX3VuYXBwbHlFdmVudHModGhpcy5fZXZlbnRzKX0sX2F0dGFjaFNlY29uZGFyeUV2ZW50czpmdW5jdGlvbigpe3RoaXMuX2RldGFjaFNlY29uZGFyeUV2ZW50cygpLHRoaXMuX2FwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyl9LF9kZXRhY2hTZWNvbmRhcnlFdmVudHM6ZnVuY3Rpb24oKXt0aGlzLl91bmFwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyl9LF90cmlnZ2VyOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9Y3x8dGhpcy5kYXRlcy5nZXQoLTEpLGU9dGhpcy5fdXRjX3RvX2xvY2FsKGQpO3RoaXMuZWxlbWVudC50cmlnZ2VyKHt0eXBlOmIsZGF0ZTplLGRhdGVzOmEubWFwKHRoaXMuZGF0ZXMsdGhpcy5fdXRjX3RvX2xvY2FsKSxmb3JtYXQ6YS5wcm94eShmdW5jdGlvbihhLGIpezA9PT1hcmd1bWVudHMubGVuZ3RoPyhhPXRoaXMuZGF0ZXMubGVuZ3RoLTEsYj10aGlzLm8uZm9ybWF0KTpcInN0cmluZ1wiPT10eXBlb2YgYSYmKGI9YSxhPXRoaXMuZGF0ZXMubGVuZ3RoLTEpLGI9Ynx8dGhpcy5vLmZvcm1hdDt2YXIgYz10aGlzLmRhdGVzLmdldChhKTtyZXR1cm4gci5mb3JtYXREYXRlKGMsYix0aGlzLm8ubGFuZ3VhZ2UpfSx0aGlzKX0pfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5wdXRGaWVsZC5wcm9wKFwiZGlzYWJsZWRcIil8fHRoaXMuaW5wdXRGaWVsZC5wcm9wKFwicmVhZG9ubHlcIikmJnRoaXMuby5lbmFibGVPblJlYWRvbmx5PT09ITE/dm9pZCAwOih0aGlzLmlzSW5saW5lfHx0aGlzLnBpY2tlci5hcHBlbmRUbyh0aGlzLm8uY29udGFpbmVyKSx0aGlzLnBsYWNlKCksdGhpcy5waWNrZXIuc2hvdygpLHRoaXMuX2F0dGFjaFNlY29uZGFyeUV2ZW50cygpLHRoaXMuX3RyaWdnZXIoXCJzaG93XCIpLCh3aW5kb3cubmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHN8fFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudCkmJnRoaXMuby5kaXNhYmxlVG91Y2hLZXlib2FyZCYmYSh0aGlzLmVsZW1lbnQpLmJsdXIoKSx0aGlzKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzSW5saW5lfHwhdGhpcy5waWNrZXIuaXMoXCI6dmlzaWJsZVwiKT90aGlzOih0aGlzLmZvY3VzRGF0ZT1udWxsLHRoaXMucGlja2VyLmhpZGUoKS5kZXRhY2goKSx0aGlzLl9kZXRhY2hTZWNvbmRhcnlFdmVudHMoKSx0aGlzLnZpZXdNb2RlPXRoaXMuby5zdGFydFZpZXcsdGhpcy5zaG93TW9kZSgpLHRoaXMuby5mb3JjZVBhcnNlJiZ0aGlzLmlucHV0RmllbGQudmFsKCkmJnRoaXMuc2V0VmFsdWUoKSx0aGlzLl90cmlnZ2VyKFwiaGlkZVwiKSx0aGlzKX0sZGVzdHJveTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhpZGUoKSx0aGlzLl9kZXRhY2hFdmVudHMoKSx0aGlzLl9kZXRhY2hTZWNvbmRhcnlFdmVudHMoKSx0aGlzLnBpY2tlci5yZW1vdmUoKSxkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlcGlja2VyLHRoaXMuaXNJbnB1dHx8ZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhKCkuZGF0ZSx0aGlzfSxwYXN0ZTpmdW5jdGlvbihiKXt2YXIgYztpZihiLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YSYmYi5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEudHlwZXMmJi0xIT09YS5pbkFycmF5KFwidGV4dC9wbGFpblwiLGIub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLnR5cGVzKSljPWIub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpO2Vsc2V7aWYoIXdpbmRvdy5jbGlwYm9hcmREYXRhKXJldHVybjtjPXdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpfXRoaXMuc2V0RGF0ZShjKSx0aGlzLnVwZGF0ZSgpLGIucHJldmVudERlZmF1bHQoKX0sX3V0Y190b19sb2NhbDpmdW5jdGlvbihhKXtyZXR1cm4gYSYmbmV3IERhdGUoYS5nZXRUaW1lKCkrNmU0KmEuZ2V0VGltZXpvbmVPZmZzZXQoKSl9LF9sb2NhbF90b191dGM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEmJm5ldyBEYXRlKGEuZ2V0VGltZSgpLTZlNCphLmdldFRpbWV6b25lT2Zmc2V0KCkpfSxfemVyb190aW1lOmZ1bmN0aW9uKGEpe3JldHVybiBhJiZuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksYS5nZXRNb250aCgpLGEuZ2V0RGF0ZSgpKX0sX3plcm9fdXRjX3RpbWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEmJm5ldyBEYXRlKERhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSxhLmdldFVUQ01vbnRoKCksYS5nZXRVVENEYXRlKCkpKX0sZ2V0RGF0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gYS5tYXAodGhpcy5kYXRlcyx0aGlzLl91dGNfdG9fbG9jYWwpfSxnZXRVVENEYXRlczpmdW5jdGlvbigpe3JldHVybiBhLm1hcCh0aGlzLmRhdGVzLGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgRGF0ZShhKX0pfSxnZXREYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3V0Y190b19sb2NhbCh0aGlzLmdldFVUQ0RhdGUoKSl9LGdldFVUQ0RhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmRhdGVzLmdldCgtMSk7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGE/bmV3IERhdGUoYSk6bnVsbH0sY2xlYXJEYXRlczpmdW5jdGlvbigpe3RoaXMuaW5wdXRGaWVsZCYmdGhpcy5pbnB1dEZpZWxkLnZhbChcIlwiKSx0aGlzLnVwZGF0ZSgpLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VEYXRlXCIpLHRoaXMuby5hdXRvY2xvc2UmJnRoaXMuaGlkZSgpfSxzZXREYXRlczpmdW5jdGlvbigpe3ZhciBiPWEuaXNBcnJheShhcmd1bWVudHNbMF0pP2FyZ3VtZW50c1swXTphcmd1bWVudHM7cmV0dXJuIHRoaXMudXBkYXRlLmFwcGx5KHRoaXMsYiksdGhpcy5fdHJpZ2dlcihcImNoYW5nZURhdGVcIiksdGhpcy5zZXRWYWx1ZSgpLHRoaXN9LHNldFVUQ0RhdGVzOmZ1bmN0aW9uKCl7dmFyIGI9YS5pc0FycmF5KGFyZ3VtZW50c1swXSk/YXJndW1lbnRzWzBdOmFyZ3VtZW50cztyZXR1cm4gdGhpcy51cGRhdGUuYXBwbHkodGhpcyxhLm1hcChiLHRoaXMuX3V0Y190b19sb2NhbCkpLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VEYXRlXCIpLHRoaXMuc2V0VmFsdWUoKSx0aGlzfSxzZXREYXRlOmYoXCJzZXREYXRlc1wiKSxzZXRVVENEYXRlOmYoXCJzZXRVVENEYXRlc1wiKSxyZW1vdmU6ZihcImRlc3Ryb3lcIiksc2V0VmFsdWU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldEZvcm1hdHRlZERhdGUoKTtyZXR1cm4gdGhpcy5pbnB1dEZpZWxkLnZhbChhKSx0aGlzfSxnZXRGb3JtYXR0ZWREYXRlOmZ1bmN0aW9uKGMpe2M9PT1iJiYoYz10aGlzLm8uZm9ybWF0KTt2YXIgZD10aGlzLm8ubGFuZ3VhZ2U7cmV0dXJuIGEubWFwKHRoaXMuZGF0ZXMsZnVuY3Rpb24oYSl7cmV0dXJuIHIuZm9ybWF0RGF0ZShhLGMsZCl9KS5qb2luKHRoaXMuby5tdWx0aWRhdGVTZXBhcmF0b3IpfSxnZXRTdGFydERhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLnN0YXJ0RGF0ZX0sc2V0U3RhcnREYXRlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9wcm9jZXNzX29wdGlvbnMoe3N0YXJ0RGF0ZTphfSksdGhpcy51cGRhdGUoKSx0aGlzLnVwZGF0ZU5hdkFycm93cygpLHRoaXN9LGdldEVuZERhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLmVuZERhdGV9LHNldEVuZERhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyh7ZW5kRGF0ZTphfSksdGhpcy51cGRhdGUoKSx0aGlzLnVwZGF0ZU5hdkFycm93cygpLHRoaXN9LHNldERheXNPZldlZWtEaXNhYmxlZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fcHJvY2Vzc19vcHRpb25zKHtkYXlzT2ZXZWVrRGlzYWJsZWQ6YX0pLHRoaXMudXBkYXRlKCksdGhpcy51cGRhdGVOYXZBcnJvd3MoKSx0aGlzfSxzZXREYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyh7ZGF5c09mV2Vla0hpZ2hsaWdodGVkOmF9KSx0aGlzLnVwZGF0ZSgpLHRoaXN9LHNldERhdGVzRGlzYWJsZWQ6ZnVuY3Rpb24oYSl7dGhpcy5fcHJvY2Vzc19vcHRpb25zKHtkYXRlc0Rpc2FibGVkOmF9KSx0aGlzLnVwZGF0ZSgpLHRoaXMudXBkYXRlTmF2QXJyb3dzKCl9LHBsYWNlOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0lubGluZSlyZXR1cm4gdGhpczt2YXIgYj10aGlzLnBpY2tlci5vdXRlcldpZHRoKCksYz10aGlzLnBpY2tlci5vdXRlckhlaWdodCgpLGQ9MTAsZT1hKHRoaXMuby5jb250YWluZXIpLGY9ZS53aWR0aCgpLGc9XCJib2R5XCI9PT10aGlzLm8uY29udGFpbmVyP2EoZG9jdW1lbnQpLnNjcm9sbFRvcCgpOmUuc2Nyb2xsVG9wKCksaD1lLm9mZnNldCgpLGk9W107dGhpcy5lbGVtZW50LnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9YSh0aGlzKS5jc3MoXCJ6LWluZGV4XCIpO1wiYXV0b1wiIT09YiYmMCE9PWImJmkucHVzaChwYXJzZUludChiKSl9KTt2YXIgaj1NYXRoLm1heC5hcHBseShNYXRoLGkpK3RoaXMuby56SW5kZXhPZmZzZXQsaz10aGlzLmNvbXBvbmVudD90aGlzLmNvbXBvbmVudC5wYXJlbnQoKS5vZmZzZXQoKTp0aGlzLmVsZW1lbnQub2Zmc2V0KCksbD10aGlzLmNvbXBvbmVudD90aGlzLmNvbXBvbmVudC5vdXRlckhlaWdodCghMCk6dGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCExKSxtPXRoaXMuY29tcG9uZW50P3RoaXMuY29tcG9uZW50Lm91dGVyV2lkdGgoITApOnRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCExKSxuPWsubGVmdC1oLmxlZnQsbz1rLnRvcC1oLnRvcDtcImJvZHlcIiE9PXRoaXMuby5jb250YWluZXImJihvKz1nKSx0aGlzLnBpY2tlci5yZW1vdmVDbGFzcyhcImRhdGVwaWNrZXItb3JpZW50LXRvcCBkYXRlcGlja2VyLW9yaWVudC1ib3R0b20gZGF0ZXBpY2tlci1vcmllbnQtcmlnaHQgZGF0ZXBpY2tlci1vcmllbnQtbGVmdFwiKSxcImF1dG9cIiE9PXRoaXMuby5vcmllbnRhdGlvbi54Pyh0aGlzLnBpY2tlci5hZGRDbGFzcyhcImRhdGVwaWNrZXItb3JpZW50LVwiK3RoaXMuby5vcmllbnRhdGlvbi54KSxcInJpZ2h0XCI9PT10aGlzLm8ub3JpZW50YXRpb24ueCYmKG4tPWItbSkpOmsubGVmdDwwPyh0aGlzLnBpY2tlci5hZGRDbGFzcyhcImRhdGVwaWNrZXItb3JpZW50LWxlZnRcIiksbi09ay5sZWZ0LWQpOm4rYj5mPyh0aGlzLnBpY2tlci5hZGRDbGFzcyhcImRhdGVwaWNrZXItb3JpZW50LXJpZ2h0XCIpLG4rPW0tYik6dGhpcy5waWNrZXIuYWRkQ2xhc3MoXCJkYXRlcGlja2VyLW9yaWVudC1sZWZ0XCIpO3ZhciBwLHE9dGhpcy5vLm9yaWVudGF0aW9uLnk7aWYoXCJhdXRvXCI9PT1xJiYocD0tZytvLWMscT0wPnA/XCJib3R0b21cIjpcInRvcFwiKSx0aGlzLnBpY2tlci5hZGRDbGFzcyhcImRhdGVwaWNrZXItb3JpZW50LVwiK3EpLFwidG9wXCI9PT1xP28tPWMrcGFyc2VJbnQodGhpcy5waWNrZXIuY3NzKFwicGFkZGluZy10b3BcIikpOm8rPWwsdGhpcy5vLnJ0bCl7dmFyIHI9Zi0obittKTt0aGlzLnBpY2tlci5jc3Moe3RvcDpvLHJpZ2h0OnIsekluZGV4Omp9KX1lbHNlIHRoaXMucGlja2VyLmNzcyh7dG9wOm8sbGVmdDpuLHpJbmRleDpqfSk7cmV0dXJuIHRoaXN9LF9hbGxvd191cGRhdGU6ITAsdXBkYXRlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuX2FsbG93X3VwZGF0ZSlyZXR1cm4gdGhpczt2YXIgYj10aGlzLmRhdGVzLmNvcHkoKSxjPVtdLGQ9ITE7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEuZWFjaChhcmd1bWVudHMsYS5wcm94eShmdW5jdGlvbihhLGIpe2IgaW5zdGFuY2VvZiBEYXRlJiYoYj10aGlzLl9sb2NhbF90b191dGMoYikpLGMucHVzaChiKX0sdGhpcykpLGQ9ITApOihjPXRoaXMuaXNJbnB1dD90aGlzLmVsZW1lbnQudmFsKCk6dGhpcy5lbGVtZW50LmRhdGEoXCJkYXRlXCIpfHx0aGlzLmlucHV0RmllbGQudmFsKCksYz1jJiZ0aGlzLm8ubXVsdGlkYXRlP2Muc3BsaXQodGhpcy5vLm11bHRpZGF0ZVNlcGFyYXRvcik6W2NdLGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGUpLGM9YS5tYXAoYyxhLnByb3h5KGZ1bmN0aW9uKGEpe3JldHVybiByLnBhcnNlRGF0ZShhLHRoaXMuby5mb3JtYXQsdGhpcy5vLmxhbmd1YWdlLHRoaXMuby5hc3N1bWVOZWFyYnlZZWFyKX0sdGhpcykpLGM9YS5ncmVwKGMsYS5wcm94eShmdW5jdGlvbihhKXtyZXR1cm4hdGhpcy5kYXRlV2l0aGluUmFuZ2UoYSl8fCFhfSx0aGlzKSwhMCksdGhpcy5kYXRlcy5yZXBsYWNlKGMpLHRoaXMuZGF0ZXMubGVuZ3RoP3RoaXMudmlld0RhdGU9bmV3IERhdGUodGhpcy5kYXRlcy5nZXQoLTEpKTp0aGlzLnZpZXdEYXRlPHRoaXMuby5zdGFydERhdGU/dGhpcy52aWV3RGF0ZT1uZXcgRGF0ZSh0aGlzLm8uc3RhcnREYXRlKTp0aGlzLnZpZXdEYXRlPnRoaXMuby5lbmREYXRlP3RoaXMudmlld0RhdGU9bmV3IERhdGUodGhpcy5vLmVuZERhdGUpOnRoaXMudmlld0RhdGU9dGhpcy5vLmRlZmF1bHRWaWV3RGF0ZSxkP3RoaXMuc2V0VmFsdWUoKTpjLmxlbmd0aCYmU3RyaW5nKGIpIT09U3RyaW5nKHRoaXMuZGF0ZXMpJiZ0aGlzLl90cmlnZ2VyKFwiY2hhbmdlRGF0ZVwiKSwhdGhpcy5kYXRlcy5sZW5ndGgmJmIubGVuZ3RoJiZ0aGlzLl90cmlnZ2VyKFwiY2xlYXJEYXRlXCIpLHRoaXMuZmlsbCgpLHRoaXMuZWxlbWVudC5jaGFuZ2UoKSx0aGlzfSxmaWxsRG93OmZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5vLndlZWtTdGFydCxjPVwiPHRyPlwiO2Zvcih0aGlzLm8uY2FsZW5kYXJXZWVrcyYmKHRoaXMucGlja2VyLmZpbmQoXCIuZGF0ZXBpY2tlci1kYXlzIC5kYXRlcGlja2VyLXN3aXRjaFwiKS5hdHRyKFwiY29sc3BhblwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHBhcnNlSW50KGIpKzF9KSxjKz0nPHRoIGNsYXNzPVwiY3dcIj4mIzE2MDs8L3RoPicpO2I8dGhpcy5vLndlZWtTdGFydCs3OyljKz0nPHRoIGNsYXNzPVwiZG93JyxhLmluQXJyYXkoYix0aGlzLm8uZGF5c09mV2Vla0Rpc2FibGVkKT4tMSYmKGMrPVwiIGRpc2FibGVkXCIpLGMrPSdcIj4nK3FbdGhpcy5vLmxhbmd1YWdlXS5kYXlzTWluW2IrKyU3XStcIjwvdGg+XCI7Yys9XCI8L3RyPlwiLHRoaXMucGlja2VyLmZpbmQoXCIuZGF0ZXBpY2tlci1kYXlzIHRoZWFkXCIpLmFwcGVuZChjKX0sZmlsbE1vbnRoczpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl91dGNfdG9fbG9jYWwodGhpcy52aWV3RGF0ZSksYj1cIlwiLGM9MDsxMj5jOyl7dmFyIGQ9YSYmYS5nZXRNb250aCgpPT09Yz9cIiBmb2N1c2VkXCI6XCJcIjtiKz0nPHNwYW4gY2xhc3M9XCJtb250aCcrZCsnXCI+JytxW3RoaXMuby5sYW5ndWFnZV0ubW9udGhzU2hvcnRbYysrXStcIjwvc3Bhbj5cIn10aGlzLnBpY2tlci5maW5kKFwiLmRhdGVwaWNrZXItbW9udGhzIHRkXCIpLmh0bWwoYil9LHNldFJhbmdlOmZ1bmN0aW9uKGIpe2ImJmIubGVuZ3RoP3RoaXMucmFuZ2U9YS5tYXAoYixmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZU9mKCl9KTpkZWxldGUgdGhpcy5yYW5nZSx0aGlzLmZpbGwoKX0sZ2V0Q2xhc3NOYW1lczpmdW5jdGlvbihiKXt2YXIgYz1bXSxkPXRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxlPXRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxmPW5ldyBEYXRlO3JldHVybiBiLmdldFVUQ0Z1bGxZZWFyKCk8ZHx8Yi5nZXRVVENGdWxsWWVhcigpPT09ZCYmYi5nZXRVVENNb250aCgpPGU/Yy5wdXNoKFwib2xkXCIpOihiLmdldFVUQ0Z1bGxZZWFyKCk+ZHx8Yi5nZXRVVENGdWxsWWVhcigpPT09ZCYmYi5nZXRVVENNb250aCgpPmUpJiZjLnB1c2goXCJuZXdcIiksdGhpcy5mb2N1c0RhdGUmJmIudmFsdWVPZigpPT09dGhpcy5mb2N1c0RhdGUudmFsdWVPZigpJiZjLnB1c2goXCJmb2N1c2VkXCIpLHRoaXMuby50b2RheUhpZ2hsaWdodCYmYi5nZXRVVENGdWxsWWVhcigpPT09Zi5nZXRGdWxsWWVhcigpJiZiLmdldFVUQ01vbnRoKCk9PT1mLmdldE1vbnRoKCkmJmIuZ2V0VVRDRGF0ZSgpPT09Zi5nZXREYXRlKCkmJmMucHVzaChcInRvZGF5XCIpLC0xIT09dGhpcy5kYXRlcy5jb250YWlucyhiKSYmYy5wdXNoKFwiYWN0aXZlXCIpLHRoaXMuZGF0ZVdpdGhpblJhbmdlKGIpfHxjLnB1c2goXCJkaXNhYmxlZFwiKSx0aGlzLmRhdGVJc0Rpc2FibGVkKGIpJiZjLnB1c2goXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWQtZGF0ZVwiKSwtMSE9PWEuaW5BcnJheShiLmdldFVUQ0RheSgpLHRoaXMuby5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQpJiZjLnB1c2goXCJoaWdobGlnaHRlZFwiKSx0aGlzLnJhbmdlJiYoYj50aGlzLnJhbmdlWzBdJiZiPHRoaXMucmFuZ2VbdGhpcy5yYW5nZS5sZW5ndGgtMV0mJmMucHVzaChcInJhbmdlXCIpLC0xIT09YS5pbkFycmF5KGIudmFsdWVPZigpLHRoaXMucmFuZ2UpJiZjLnB1c2goXCJzZWxlY3RlZFwiKSxiLnZhbHVlT2YoKT09PXRoaXMucmFuZ2VbMF0mJmMucHVzaChcInJhbmdlLXN0YXJ0XCIpLGIudmFsdWVPZigpPT09dGhpcy5yYW5nZVt0aGlzLnJhbmdlLmxlbmd0aC0xXSYmYy5wdXNoKFwicmFuZ2UtZW5kXCIpKSxjfSxfZmlsbF95ZWFyc1ZpZXc6ZnVuY3Rpb24oYyxkLGUsZixnLGgsaSxqKXt2YXIgayxsLG0sbixvLHAscSxyLHMsdCx1O2ZvcihrPVwiXCIsbD10aGlzLnBpY2tlci5maW5kKGMpLG09cGFyc2VJbnQoZy9lLDEwKSplLG89cGFyc2VJbnQoaC9mLDEwKSpmLHA9cGFyc2VJbnQoaS9mLDEwKSpmLG49YS5tYXAodGhpcy5kYXRlcyxmdW5jdGlvbihhKXtyZXR1cm4gcGFyc2VJbnQoYS5nZXRVVENGdWxsWWVhcigpL2YsMTApKmZ9KSxsLmZpbmQoXCIuZGF0ZXBpY2tlci1zd2l0Y2hcIikudGV4dChtK1wiLVwiKyhtKzkqZikpLHE9bS1mLHI9LTE7MTE+cjtyKz0xKXM9W2RdLHQ9bnVsbCwtMT09PXI/cy5wdXNoKFwib2xkXCIpOjEwPT09ciYmcy5wdXNoKFwibmV3XCIpLC0xIT09YS5pbkFycmF5KHEsbikmJnMucHVzaChcImFjdGl2ZVwiKSwobz5xfHxxPnApJiZzLnB1c2goXCJkaXNhYmxlZFwiKSxxPT09dGhpcy52aWV3RGF0ZS5nZXRGdWxsWWVhcigpJiZzLnB1c2goXCJmb2N1c2VkXCIpLGohPT1hLm5vb3AmJih1PWoobmV3IERhdGUocSwwLDEpKSx1PT09Yj91PXt9OlwiYm9vbGVhblwiPT10eXBlb2YgdT91PXtlbmFibGVkOnV9Olwic3RyaW5nXCI9PXR5cGVvZiB1JiYodT17Y2xhc3Nlczp1fSksdS5lbmFibGVkPT09ITEmJnMucHVzaChcImRpc2FibGVkXCIpLHUuY2xhc3NlcyYmKHM9cy5jb25jYXQodS5jbGFzc2VzLnNwbGl0KC9cXHMrLykpKSx1LnRvb2x0aXAmJih0PXUudG9vbHRpcCkpLGsrPSc8c3BhbiBjbGFzcz1cIicrcy5qb2luKFwiIFwiKSsnXCInKyh0PycgdGl0bGU9XCInK3QrJ1wiJzpcIlwiKStcIj5cIitxK1wiPC9zcGFuPlwiLHErPWY7bC5maW5kKFwidGRcIikuaHRtbChrKX0sZmlsbDpmdW5jdGlvbigpe3ZhciBkLGUsZj1uZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKSxnPWYuZ2V0VVRDRnVsbFllYXIoKSxoPWYuZ2V0VVRDTW9udGgoKSxpPXRoaXMuby5zdGFydERhdGUhPT0tKDEvMCk/dGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpOi0oMS8wKSxqPXRoaXMuby5zdGFydERhdGUhPT0tKDEvMCk/dGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpOi0oMS8wKSxrPXRoaXMuby5lbmREYXRlIT09MS8wP3RoaXMuby5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCk6MS8wLGw9dGhpcy5vLmVuZERhdGUhPT0xLzA/dGhpcy5vLmVuZERhdGUuZ2V0VVRDTW9udGgoKToxLzAsbT1xW3RoaXMuby5sYW5ndWFnZV0udG9kYXl8fHEuZW4udG9kYXl8fFwiXCIsbj1xW3RoaXMuby5sYW5ndWFnZV0uY2xlYXJ8fHEuZW4uY2xlYXJ8fFwiXCIsbz1xW3RoaXMuby5sYW5ndWFnZV0udGl0bGVGb3JtYXR8fHEuZW4udGl0bGVGb3JtYXQ7aWYoIWlzTmFOKGcpJiYhaXNOYU4oaCkpe3RoaXMucGlja2VyLmZpbmQoXCIuZGF0ZXBpY2tlci1kYXlzIC5kYXRlcGlja2VyLXN3aXRjaFwiKS50ZXh0KHIuZm9ybWF0RGF0ZShmLG8sdGhpcy5vLmxhbmd1YWdlKSksdGhpcy5waWNrZXIuZmluZChcInRmb290IC50b2RheVwiKS50ZXh0KG0pLnRvZ2dsZSh0aGlzLm8udG9kYXlCdG4hPT0hMSksdGhpcy5waWNrZXIuZmluZChcInRmb290IC5jbGVhclwiKS50ZXh0KG4pLnRvZ2dsZSh0aGlzLm8uY2xlYXJCdG4hPT0hMSksdGhpcy5waWNrZXIuZmluZChcInRoZWFkIC5kYXRlcGlja2VyLXRpdGxlXCIpLnRleHQodGhpcy5vLnRpdGxlKS50b2dnbGUoXCJcIiE9PXRoaXMuby50aXRsZSksdGhpcy51cGRhdGVOYXZBcnJvd3MoKSx0aGlzLmZpbGxNb250aHMoKTt2YXIgcD1jKGcsaC0xLDI4KSxzPXIuZ2V0RGF5c0luTW9udGgocC5nZXRVVENGdWxsWWVhcigpLHAuZ2V0VVRDTW9udGgoKSk7cC5zZXRVVENEYXRlKHMpLHAuc2V0VVRDRGF0ZShzLShwLmdldFVUQ0RheSgpLXRoaXMuby53ZWVrU3RhcnQrNyklNyk7dmFyIHQ9bmV3IERhdGUocCk7cC5nZXRVVENGdWxsWWVhcigpPDEwMCYmdC5zZXRVVENGdWxsWWVhcihwLmdldFVUQ0Z1bGxZZWFyKCkpLHQuc2V0VVRDRGF0ZSh0LmdldFVUQ0RhdGUoKSs0MiksdD10LnZhbHVlT2YoKTtmb3IodmFyIHUsdj1bXTtwLnZhbHVlT2YoKTx0Oyl7aWYocC5nZXRVVENEYXkoKT09PXRoaXMuby53ZWVrU3RhcnQmJih2LnB1c2goXCI8dHI+XCIpLHRoaXMuby5jYWxlbmRhcldlZWtzKSl7dmFyIHc9bmV3IERhdGUoK3ArKHRoaXMuby53ZWVrU3RhcnQtcC5nZXRVVENEYXkoKS03KSU3Kjg2NGU1KSx4PW5ldyBEYXRlKE51bWJlcih3KSsoMTEtdy5nZXRVVENEYXkoKSklNyo4NjRlNSkseT1uZXcgRGF0ZShOdW1iZXIoeT1jKHguZ2V0VVRDRnVsbFllYXIoKSwwLDEpKSsoMTEteS5nZXRVVENEYXkoKSklNyo4NjRlNSksej0oeC15KS84NjRlNS83KzE7di5wdXNoKCc8dGQgY2xhc3M9XCJjd1wiPicreitcIjwvdGQ+XCIpfXU9dGhpcy5nZXRDbGFzc05hbWVzKHApLHUucHVzaChcImRheVwiKSx0aGlzLm8uYmVmb3JlU2hvd0RheSE9PWEubm9vcCYmKGU9dGhpcy5vLmJlZm9yZVNob3dEYXkodGhpcy5fdXRjX3RvX2xvY2FsKHApKSxlPT09Yj9lPXt9OlwiYm9vbGVhblwiPT10eXBlb2YgZT9lPXtlbmFibGVkOmV9Olwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT17Y2xhc3NlczplfSksZS5lbmFibGVkPT09ITEmJnUucHVzaChcImRpc2FibGVkXCIpLGUuY2xhc3NlcyYmKHU9dS5jb25jYXQoZS5jbGFzc2VzLnNwbGl0KC9cXHMrLykpKSxlLnRvb2x0aXAmJihkPWUudG9vbHRpcCkpLHU9YS5pc0Z1bmN0aW9uKGEudW5pcXVlU29ydCk/YS51bmlxdWVTb3J0KHUpOmEudW5pcXVlKHUpLHYucHVzaCgnPHRkIGNsYXNzPVwiJyt1LmpvaW4oXCIgXCIpKydcIicrKGQ/JyB0aXRsZT1cIicrZCsnXCInOlwiXCIpK1wiPlwiK3AuZ2V0VVRDRGF0ZSgpK1wiPC90ZD5cIiksZD1udWxsLHAuZ2V0VVRDRGF5KCk9PT10aGlzLm8ud2Vla0VuZCYmdi5wdXNoKFwiPC90cj5cIikscC5zZXRVVENEYXRlKHAuZ2V0VVRDRGF0ZSgpKzEpfXRoaXMucGlja2VyLmZpbmQoXCIuZGF0ZXBpY2tlci1kYXlzIHRib2R5XCIpLmVtcHR5KCkuYXBwZW5kKHYuam9pbihcIlwiKSk7dmFyIEE9cVt0aGlzLm8ubGFuZ3VhZ2VdLm1vbnRoc1RpdGxlfHxxLmVuLm1vbnRoc1RpdGxlfHxcIk1vbnRoc1wiLEI9dGhpcy5waWNrZXIuZmluZChcIi5kYXRlcGlja2VyLW1vbnRoc1wiKS5maW5kKFwiLmRhdGVwaWNrZXItc3dpdGNoXCIpLnRleHQodGhpcy5vLm1heFZpZXdNb2RlPDI/QTpnKS5lbmQoKS5maW5kKFwic3BhblwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtpZihhLmVhY2godGhpcy5kYXRlcyxmdW5jdGlvbihhLGIpe2IuZ2V0VVRDRnVsbFllYXIoKT09PWcmJkIuZXEoYi5nZXRVVENNb250aCgpKS5hZGRDbGFzcyhcImFjdGl2ZVwiKX0pLChpPmd8fGc+aykmJkIuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSxnPT09aSYmQi5zbGljZSgwLGopLmFkZENsYXNzKFwiZGlzYWJsZWRcIiksZz09PWsmJkIuc2xpY2UobCsxKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMuby5iZWZvcmVTaG93TW9udGghPT1hLm5vb3Ape3ZhciBDPXRoaXM7YS5lYWNoKEIsZnVuY3Rpb24oYyxkKXt2YXIgZT1uZXcgRGF0ZShnLGMsMSksZj1DLm8uYmVmb3JlU2hvd01vbnRoKGUpO2Y9PT1iP2Y9e306XCJib29sZWFuXCI9PXR5cGVvZiBmP2Y9e2VuYWJsZWQ6Zn06XCJzdHJpbmdcIj09dHlwZW9mIGYmJihmPXtjbGFzc2VzOmZ9KSxmLmVuYWJsZWQhPT0hMXx8YShkKS5oYXNDbGFzcyhcImRpc2FibGVkXCIpfHxhKGQpLmFkZENsYXNzKFwiZGlzYWJsZWRcIiksZi5jbGFzc2VzJiZhKGQpLmFkZENsYXNzKGYuY2xhc3NlcyksZi50b29sdGlwJiZhKGQpLnByb3AoXCJ0aXRsZVwiLGYudG9vbHRpcCl9KX10aGlzLl9maWxsX3llYXJzVmlldyhcIi5kYXRlcGlja2VyLXllYXJzXCIsXCJ5ZWFyXCIsMTAsMSxnLGksayx0aGlzLm8uYmVmb3JlU2hvd1llYXIpLHRoaXMuX2ZpbGxfeWVhcnNWaWV3KFwiLmRhdGVwaWNrZXItZGVjYWRlc1wiLFwiZGVjYWRlXCIsMTAwLDEwLGcsaSxrLHRoaXMuby5iZWZvcmVTaG93RGVjYWRlKSx0aGlzLl9maWxsX3llYXJzVmlldyhcIi5kYXRlcGlja2VyLWNlbnR1cmllc1wiLFwiY2VudHVyeVwiLDFlMywxMDAsZyxpLGssdGhpcy5vLmJlZm9yZVNob3dDZW50dXJ5KX19LHVwZGF0ZU5hdkFycm93czpmdW5jdGlvbigpe2lmKHRoaXMuX2FsbG93X3VwZGF0ZSl7dmFyIGE9bmV3IERhdGUodGhpcy52aWV3RGF0ZSksYj1hLmdldFVUQ0Z1bGxZZWFyKCksYz1hLmdldFVUQ01vbnRoKCk7c3dpdGNoKHRoaXMudmlld01vZGUpe2Nhc2UgMDp0aGlzLm8uc3RhcnREYXRlIT09LSgxLzApJiZiPD10aGlzLm8uc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCkmJmM8PXRoaXMuby5zdGFydERhdGUuZ2V0VVRDTW9udGgoKT90aGlzLnBpY2tlci5maW5kKFwiLnByZXZcIikuY3NzKHt2aXNpYmlsaXR5OlwiaGlkZGVuXCJ9KTp0aGlzLnBpY2tlci5maW5kKFwiLnByZXZcIikuY3NzKHt2aXNpYmlsaXR5OlwidmlzaWJsZVwifSksdGhpcy5vLmVuZERhdGUhPT0xLzAmJmI+PXRoaXMuby5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkmJmM+PXRoaXMuby5lbmREYXRlLmdldFVUQ01vbnRoKCk/dGhpcy5waWNrZXIuZmluZChcIi5uZXh0XCIpLmNzcyh7dmlzaWJpbGl0eTpcImhpZGRlblwifSk6dGhpcy5waWNrZXIuZmluZChcIi5uZXh0XCIpLmNzcyh7dmlzaWJpbGl0eTpcInZpc2libGVcIn0pO2JyZWFrO2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDp0aGlzLm8uc3RhcnREYXRlIT09LSgxLzApJiZiPD10aGlzLm8uc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCl8fHRoaXMuby5tYXhWaWV3TW9kZTwyP3RoaXMucGlja2VyLmZpbmQoXCIucHJldlwiKS5jc3Moe3Zpc2liaWxpdHk6XCJoaWRkZW5cIn0pOnRoaXMucGlja2VyLmZpbmQoXCIucHJldlwiKS5jc3Moe3Zpc2liaWxpdHk6XCJ2aXNpYmxlXCJ9KSx0aGlzLm8uZW5kRGF0ZSE9PTEvMCYmYj49dGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKXx8dGhpcy5vLm1heFZpZXdNb2RlPDI/dGhpcy5waWNrZXIuZmluZChcIi5uZXh0XCIpLmNzcyh7dmlzaWJpbGl0eTpcImhpZGRlblwifSk6dGhpcy5waWNrZXIuZmluZChcIi5uZXh0XCIpLmNzcyh7dmlzaWJpbGl0eTpcInZpc2libGVcIn0pfX19LGNsaWNrOmZ1bmN0aW9uKGIpe2IucHJldmVudERlZmF1bHQoKSxiLnN0b3BQcm9wYWdhdGlvbigpO3ZhciBlLGYsZyxoLGksaixrO2U9YShiLnRhcmdldCksZS5oYXNDbGFzcyhcImRhdGVwaWNrZXItc3dpdGNoXCIpJiZ0aGlzLnNob3dNb2RlKDEpO3ZhciBsPWUuY2xvc2VzdChcIi5wcmV2LCAubmV4dFwiKTtsLmxlbmd0aD4wJiYoZj1yLm1vZGVzW3RoaXMudmlld01vZGVdLm5hdlN0ZXAqKGwuaGFzQ2xhc3MoXCJwcmV2XCIpPy0xOjEpLDA9PT10aGlzLnZpZXdNb2RlPyh0aGlzLnZpZXdEYXRlPXRoaXMubW92ZU1vbnRoKHRoaXMudmlld0RhdGUsZiksdGhpcy5fdHJpZ2dlcihcImNoYW5nZU1vbnRoXCIsdGhpcy52aWV3RGF0ZSkpOih0aGlzLnZpZXdEYXRlPXRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSxmKSwxPT09dGhpcy52aWV3TW9kZSYmdGhpcy5fdHJpZ2dlcihcImNoYW5nZVllYXJcIix0aGlzLnZpZXdEYXRlKSksdGhpcy5maWxsKCkpLGUuaGFzQ2xhc3MoXCJ0b2RheVwiKSYmIWUuaGFzQ2xhc3MoXCJkYXlcIikmJih0aGlzLnNob3dNb2RlKC0yKSx0aGlzLl9zZXREYXRlKGQoKSxcImxpbmtlZFwiPT09dGhpcy5vLnRvZGF5QnRuP251bGw6XCJ2aWV3XCIpKSxlLmhhc0NsYXNzKFwiY2xlYXJcIikmJnRoaXMuY2xlYXJEYXRlcygpLGUuaGFzQ2xhc3MoXCJkaXNhYmxlZFwiKXx8KGUuaGFzQ2xhc3MoXCJkYXlcIikmJihnPXBhcnNlSW50KGUudGV4dCgpLDEwKXx8MSxoPXRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxpPXRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxlLmhhc0NsYXNzKFwib2xkXCIpJiYoMD09PWk/KGk9MTEsaC09MSxqPSEwLGs9ITApOihpLT0xLGo9ITApKSxlLmhhc0NsYXNzKFwibmV3XCIpJiYoMTE9PT1pPyhpPTAsaCs9MSxqPSEwLGs9ITApOihpKz0xLGo9ITApKSx0aGlzLl9zZXREYXRlKGMoaCxpLGcpKSxrJiZ0aGlzLl90cmlnZ2VyKFwiY2hhbmdlWWVhclwiLHRoaXMudmlld0RhdGUpLGomJnRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VNb250aFwiLHRoaXMudmlld0RhdGUpKSxlLmhhc0NsYXNzKFwibW9udGhcIikmJih0aGlzLnZpZXdEYXRlLnNldFVUQ0RhdGUoMSksZz0xLGk9ZS5wYXJlbnQoKS5maW5kKFwic3BhblwiKS5pbmRleChlKSxoPXRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSx0aGlzLnZpZXdEYXRlLnNldFVUQ01vbnRoKGkpLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VNb250aFwiLHRoaXMudmlld0RhdGUpLDE9PT10aGlzLm8ubWluVmlld01vZGU/KHRoaXMuX3NldERhdGUoYyhoLGksZykpLHRoaXMuc2hvd01vZGUoKSk6dGhpcy5zaG93TW9kZSgtMSksdGhpcy5maWxsKCkpLChlLmhhc0NsYXNzKFwieWVhclwiKXx8ZS5oYXNDbGFzcyhcImRlY2FkZVwiKXx8ZS5oYXNDbGFzcyhcImNlbnR1cnlcIikpJiYodGhpcy52aWV3RGF0ZS5zZXRVVENEYXRlKDEpLGc9MSxpPTAsaD1wYXJzZUludChlLnRleHQoKSwxMCl8fDAsdGhpcy52aWV3RGF0ZS5zZXRVVENGdWxsWWVhcihoKSxlLmhhc0NsYXNzKFwieWVhclwiKSYmKHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VZZWFyXCIsdGhpcy52aWV3RGF0ZSksMj09PXRoaXMuby5taW5WaWV3TW9kZSYmdGhpcy5fc2V0RGF0ZShjKGgsaSxnKSkpLGUuaGFzQ2xhc3MoXCJkZWNhZGVcIikmJih0aGlzLl90cmlnZ2VyKFwiY2hhbmdlRGVjYWRlXCIsdGhpcy52aWV3RGF0ZSksMz09PXRoaXMuby5taW5WaWV3TW9kZSYmdGhpcy5fc2V0RGF0ZShjKGgsaSxnKSkpLGUuaGFzQ2xhc3MoXCJjZW50dXJ5XCIpJiYodGhpcy5fdHJpZ2dlcihcImNoYW5nZUNlbnR1cnlcIix0aGlzLnZpZXdEYXRlKSw0PT09dGhpcy5vLm1pblZpZXdNb2RlJiZ0aGlzLl9zZXREYXRlKGMoaCxpLGcpKSksdGhpcy5zaG93TW9kZSgtMSksdGhpcy5maWxsKCkpKSx0aGlzLnBpY2tlci5pcyhcIjp2aXNpYmxlXCIpJiZ0aGlzLl9mb2N1c2VkX2Zyb20mJmEodGhpcy5fZm9jdXNlZF9mcm9tKS5mb2N1cygpLGRlbGV0ZSB0aGlzLl9mb2N1c2VkX2Zyb219LF90b2dnbGVfbXVsdGlkYXRlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZGF0ZXMuY29udGFpbnMoYSk7aWYoYXx8dGhpcy5kYXRlcy5jbGVhcigpLC0xIT09Yj8odGhpcy5vLm11bHRpZGF0ZT09PSEwfHx0aGlzLm8ubXVsdGlkYXRlPjF8fHRoaXMuby50b2dnbGVBY3RpdmUpJiZ0aGlzLmRhdGVzLnJlbW92ZShiKTp0aGlzLm8ubXVsdGlkYXRlPT09ITE/KHRoaXMuZGF0ZXMuY2xlYXIoKSx0aGlzLmRhdGVzLnB1c2goYSkpOnRoaXMuZGF0ZXMucHVzaChhKSxcIm51bWJlclwiPT10eXBlb2YgdGhpcy5vLm11bHRpZGF0ZSlmb3IoO3RoaXMuZGF0ZXMubGVuZ3RoPnRoaXMuby5tdWx0aWRhdGU7KXRoaXMuZGF0ZXMucmVtb3ZlKDApfSxfc2V0RGF0ZTpmdW5jdGlvbihhLGIpe2ImJlwiZGF0ZVwiIT09Ynx8dGhpcy5fdG9nZ2xlX211bHRpZGF0ZShhJiZuZXcgRGF0ZShhKSksYiYmXCJ2aWV3XCIhPT1ifHwodGhpcy52aWV3RGF0ZT1hJiZuZXcgRGF0ZShhKSksdGhpcy5maWxsKCksdGhpcy5zZXRWYWx1ZSgpLGImJlwidmlld1wiPT09Ynx8dGhpcy5fdHJpZ2dlcihcImNoYW5nZURhdGVcIiksdGhpcy5pbnB1dEZpZWxkJiZ0aGlzLmlucHV0RmllbGQuY2hhbmdlKCksIXRoaXMuby5hdXRvY2xvc2V8fGImJlwiZGF0ZVwiIT09Ynx8dGhpcy5oaWRlKCl9LG1vdmVEYXk6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgRGF0ZShhKTtyZXR1cm4gYy5zZXRVVENEYXRlKGEuZ2V0VVRDRGF0ZSgpK2IpLGN9LG1vdmVXZWVrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubW92ZURheShhLDcqYil9LG1vdmVNb250aDpmdW5jdGlvbihhLGIpe2lmKCFnKGEpKXJldHVybiB0aGlzLm8uZGVmYXVsdFZpZXdEYXRlO2lmKCFiKXJldHVybiBhO3ZhciBjLGQsZT1uZXcgRGF0ZShhLnZhbHVlT2YoKSksZj1lLmdldFVUQ0RhdGUoKSxoPWUuZ2V0VVRDTW9udGgoKSxpPU1hdGguYWJzKGIpO2lmKGI9Yj4wPzE6LTEsMT09PWkpZD0tMT09PWI/ZnVuY3Rpb24oKXtyZXR1cm4gZS5nZXRVVENNb250aCgpPT09aH06ZnVuY3Rpb24oKXtyZXR1cm4gZS5nZXRVVENNb250aCgpIT09Y30sYz1oK2IsZS5zZXRVVENNb250aChjKSwoMD5jfHxjPjExKSYmKGM9KGMrMTIpJTEyKTtlbHNle2Zvcih2YXIgaj0wO2k+ajtqKyspZT10aGlzLm1vdmVNb250aChlLGIpO2M9ZS5nZXRVVENNb250aCgpLGUuc2V0VVRDRGF0ZShmKSxkPWZ1bmN0aW9uKCl7cmV0dXJuIGMhPT1lLmdldFVUQ01vbnRoKCl9fWZvcig7ZCgpOyllLnNldFVUQ0RhdGUoLS1mKSxlLnNldFVUQ01vbnRoKGMpO3JldHVybiBlfSxtb3ZlWWVhcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm1vdmVNb250aChhLDEyKmIpfSxtb3ZlQXZhaWxhYmxlRGF0ZTpmdW5jdGlvbihhLGIsYyl7ZG97aWYoYT10aGlzW2NdKGEsYiksIXRoaXMuZGF0ZVdpdGhpblJhbmdlKGEpKXJldHVybiExO2M9XCJtb3ZlRGF5XCJ9d2hpbGUodGhpcy5kYXRlSXNEaXNhYmxlZChhKSk7cmV0dXJuIGF9LHdlZWtPZkRhdGVJc0Rpc2FibGVkOmZ1bmN0aW9uKGIpe3JldHVybi0xIT09YS5pbkFycmF5KGIuZ2V0VVRDRGF5KCksdGhpcy5vLmRheXNPZldlZWtEaXNhYmxlZCl9LGRhdGVJc0Rpc2FibGVkOmZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLndlZWtPZkRhdGVJc0Rpc2FibGVkKGIpfHxhLmdyZXAodGhpcy5vLmRhdGVzRGlzYWJsZWQsZnVuY3Rpb24oYSl7cmV0dXJuIGUoYixhKX0pLmxlbmd0aD4wfSxkYXRlV2l0aGluUmFuZ2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGE+PXRoaXMuby5zdGFydERhdGUmJmE8PXRoaXMuby5lbmREYXRlfSxrZXlkb3duOmZ1bmN0aW9uKGEpe2lmKCF0aGlzLnBpY2tlci5pcyhcIjp2aXNpYmxlXCIpKXJldHVybiB2b2lkKCg0MD09PWEua2V5Q29kZXx8Mjc9PT1hLmtleUNvZGUpJiYodGhpcy5zaG93KCksYS5zdG9wUHJvcGFnYXRpb24oKSkpO3ZhciBiLGMsZD0hMSxlPXRoaXMuZm9jdXNEYXRlfHx0aGlzLnZpZXdEYXRlO3N3aXRjaChhLmtleUNvZGUpe2Nhc2UgMjc6dGhpcy5mb2N1c0RhdGU/KHRoaXMuZm9jdXNEYXRlPW51bGwsdGhpcy52aWV3RGF0ZT10aGlzLmRhdGVzLmdldCgtMSl8fHRoaXMudmlld0RhdGUsdGhpcy5maWxsKCkpOnRoaXMuaGlkZSgpLGEucHJldmVudERlZmF1bHQoKSxhLnN0b3BQcm9wYWdhdGlvbigpO2JyZWFrO2Nhc2UgMzc6Y2FzZSAzODpjYXNlIDM5OmNhc2UgNDA6aWYoIXRoaXMuby5rZXlib2FyZE5hdmlnYXRpb258fDc9PT10aGlzLm8uZGF5c09mV2Vla0Rpc2FibGVkLmxlbmd0aClicmVhaztiPTM3PT09YS5rZXlDb2RlfHwzOD09PWEua2V5Q29kZT8tMToxLDA9PT10aGlzLnZpZXdNb2RlP2EuY3RybEtleT8oYz10aGlzLm1vdmVBdmFpbGFibGVEYXRlKGUsYixcIm1vdmVZZWFyXCIpLGMmJnRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VZZWFyXCIsdGhpcy52aWV3RGF0ZSkpOmEuc2hpZnRLZXk/KGM9dGhpcy5tb3ZlQXZhaWxhYmxlRGF0ZShlLGIsXCJtb3ZlTW9udGhcIiksYyYmdGhpcy5fdHJpZ2dlcihcImNoYW5nZU1vbnRoXCIsdGhpcy52aWV3RGF0ZSkpOjM3PT09YS5rZXlDb2RlfHwzOT09PWEua2V5Q29kZT9jPXRoaXMubW92ZUF2YWlsYWJsZURhdGUoZSxiLFwibW92ZURheVwiKTp0aGlzLndlZWtPZkRhdGVJc0Rpc2FibGVkKGUpfHwoYz10aGlzLm1vdmVBdmFpbGFibGVEYXRlKGUsYixcIm1vdmVXZWVrXCIpKToxPT09dGhpcy52aWV3TW9kZT8oKDM4PT09YS5rZXlDb2RlfHw0MD09PWEua2V5Q29kZSkmJihiPTQqYiksYz10aGlzLm1vdmVBdmFpbGFibGVEYXRlKGUsYixcIm1vdmVNb250aFwiKSk6Mj09PXRoaXMudmlld01vZGUmJigoMzg9PT1hLmtleUNvZGV8fDQwPT09YS5rZXlDb2RlKSYmKGI9NCpiKSxjPXRoaXMubW92ZUF2YWlsYWJsZURhdGUoZSxiLFwibW92ZVllYXJcIikpLGMmJih0aGlzLmZvY3VzRGF0ZT10aGlzLnZpZXdEYXRlPWMsdGhpcy5zZXRWYWx1ZSgpLHRoaXMuZmlsbCgpLGEucHJldmVudERlZmF1bHQoKSk7YnJlYWs7Y2FzZSAxMzppZighdGhpcy5vLmZvcmNlUGFyc2UpYnJlYWs7ZT10aGlzLmZvY3VzRGF0ZXx8dGhpcy5kYXRlcy5nZXQoLTEpfHx0aGlzLnZpZXdEYXRlLHRoaXMuby5rZXlib2FyZE5hdmlnYXRpb24mJih0aGlzLl90b2dnbGVfbXVsdGlkYXRlKGUpLGQ9ITApLHRoaXMuZm9jdXNEYXRlPW51bGwsdGhpcy52aWV3RGF0ZT10aGlzLmRhdGVzLmdldCgtMSl8fHRoaXMudmlld0RhdGUsdGhpcy5zZXRWYWx1ZSgpLHRoaXMuZmlsbCgpLHRoaXMucGlja2VyLmlzKFwiOnZpc2libGVcIikmJihhLnByZXZlbnREZWZhdWx0KCksYS5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLm8uYXV0b2Nsb3NlJiZ0aGlzLmhpZGUoKSk7YnJlYWs7Y2FzZSA5OnRoaXMuZm9jdXNEYXRlPW51bGwsdGhpcy52aWV3RGF0ZT10aGlzLmRhdGVzLmdldCgtMSl8fHRoaXMudmlld0RhdGUsdGhpcy5maWxsKCksdGhpcy5oaWRlKCl9ZCYmKHRoaXMuZGF0ZXMubGVuZ3RoP3RoaXMuX3RyaWdnZXIoXCJjaGFuZ2VEYXRlXCIpOnRoaXMuX3RyaWdnZXIoXCJjbGVhckRhdGVcIiksdGhpcy5pbnB1dEZpZWxkJiZ0aGlzLmlucHV0RmllbGQuY2hhbmdlKCkpfSxzaG93TW9kZTpmdW5jdGlvbihhKXthJiYodGhpcy52aWV3TW9kZT1NYXRoLm1heCh0aGlzLm8ubWluVmlld01vZGUsTWF0aC5taW4odGhpcy5vLm1heFZpZXdNb2RlLHRoaXMudmlld01vZGUrYSkpKSx0aGlzLnBpY2tlci5jaGlsZHJlbihcImRpdlwiKS5oaWRlKCkuZmlsdGVyKFwiLmRhdGVwaWNrZXItXCIrci5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5jbHNOYW1lKS5zaG93KCksdGhpcy51cGRhdGVOYXZBcnJvd3MoKX19O3ZhciBsPWZ1bmN0aW9uKGIsYyl7YShiKS5kYXRhKFwiZGF0ZXBpY2tlclwiLHRoaXMpLHRoaXMuZWxlbWVudD1hKGIpLHRoaXMuaW5wdXRzPWEubWFwKGMuaW5wdXRzLGZ1bmN0aW9uKGEpe3JldHVybiBhLmpxdWVyeT9hWzBdOmF9KSxkZWxldGUgYy5pbnB1dHMsbi5jYWxsKGEodGhpcy5pbnB1dHMpLGMpLm9uKFwiY2hhbmdlRGF0ZVwiLGEucHJveHkodGhpcy5kYXRlVXBkYXRlZCx0aGlzKSksdGhpcy5waWNrZXJzPWEubWFwKHRoaXMuaW5wdXRzLGZ1bmN0aW9uKGIpe3JldHVybiBhKGIpLmRhdGEoXCJkYXRlcGlja2VyXCIpfSksdGhpcy51cGRhdGVEYXRlcygpfTtsLnByb3RvdHlwZT17dXBkYXRlRGF0ZXM6ZnVuY3Rpb24oKXt0aGlzLmRhdGVzPWEubWFwKHRoaXMucGlja2VycyxmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRVVENEYXRlKCl9KSx0aGlzLnVwZGF0ZVJhbmdlcygpfSx1cGRhdGVSYW5nZXM6ZnVuY3Rpb24oKXt2YXIgYj1hLm1hcCh0aGlzLmRhdGVzLGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlT2YoKX0pO2EuZWFjaCh0aGlzLnBpY2tlcnMsZnVuY3Rpb24oYSxjKXtjLnNldFJhbmdlKGIpfSl9LGRhdGVVcGRhdGVkOmZ1bmN0aW9uKGIpe2lmKCF0aGlzLnVwZGF0aW5nKXt0aGlzLnVwZGF0aW5nPSEwO3ZhciBjPWEoYi50YXJnZXQpLmRhdGEoXCJkYXRlcGlja2VyXCIpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBjKXt2YXIgZD1jLmdldFVUQ0RhdGUoKSxlPWEuaW5BcnJheShiLnRhcmdldCx0aGlzLmlucHV0cyksZj1lLTEsZz1lKzEsaD10aGlzLmlucHV0cy5sZW5ndGg7aWYoLTEhPT1lKXtpZihhLmVhY2godGhpcy5waWNrZXJzLGZ1bmN0aW9uKGEsYil7Yi5nZXRVVENEYXRlKCl8fGIuc2V0VVRDRGF0ZShkKX0pLGQ8dGhpcy5kYXRlc1tmXSlmb3IoO2Y+PTAmJmQ8dGhpcy5kYXRlc1tmXTspdGhpcy5waWNrZXJzW2YtLV0uc2V0VVRDRGF0ZShkKTtlbHNlIGlmKGQ+dGhpcy5kYXRlc1tnXSlmb3IoO2g+ZyYmZD50aGlzLmRhdGVzW2ddOyl0aGlzLnBpY2tlcnNbZysrXS5zZXRVVENEYXRlKGQpO3RoaXMudXBkYXRlRGF0ZXMoKSxkZWxldGUgdGhpcy51cGRhdGluZ319fX0scmVtb3ZlOmZ1bmN0aW9uKCl7YS5tYXAodGhpcy5waWNrZXJzLGZ1bmN0aW9uKGEpe2EucmVtb3ZlKCl9KSxkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlcGlja2VyfX07dmFyIG09YS5mbi5kYXRlcGlja2VyLG49ZnVuY3Rpb24oYyl7dmFyIGQ9QXJyYXkuYXBwbHkobnVsbCxhcmd1bWVudHMpO2Quc2hpZnQoKTt2YXIgZTtpZih0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1hKHRoaXMpLGY9Yi5kYXRhKFwiZGF0ZXBpY2tlclwiKSxnPVwib2JqZWN0XCI9PXR5cGVvZiBjJiZjO2lmKCFmKXt2YXIgaj1oKHRoaXMsXCJkYXRlXCIpLG09YS5leHRlbmQoe30sbyxqLGcpLG49aShtLmxhbmd1YWdlKSxwPWEuZXh0ZW5kKHt9LG8sbixqLGcpO2IuaGFzQ2xhc3MoXCJpbnB1dC1kYXRlcmFuZ2VcIil8fHAuaW5wdXRzPyhhLmV4dGVuZChwLHtpbnB1dHM6cC5pbnB1dHN8fGIuZmluZChcImlucHV0XCIpLnRvQXJyYXkoKX0pLGY9bmV3IGwodGhpcyxwKSk6Zj1uZXcgayh0aGlzLHApLGIuZGF0YShcImRhdGVwaWNrZXJcIixmKX1cInN0cmluZ1wiPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT10eXBlb2YgZltjXSYmKGU9ZltjXS5hcHBseShmLGQpKX0pLGU9PT1ifHxlIGluc3RhbmNlb2Yga3x8ZSBpbnN0YW5jZW9mIGwpcmV0dXJuIHRoaXM7aWYodGhpcy5sZW5ndGg+MSl0aHJvdyBuZXcgRXJyb3IoXCJVc2luZyBvbmx5IGFsbG93ZWQgZm9yIHRoZSBjb2xsZWN0aW9uIG9mIGEgc2luZ2xlIGVsZW1lbnQgKFwiK2MrXCIgZnVuY3Rpb24pXCIpO3JldHVybiBlfTthLmZuLmRhdGVwaWNrZXI9bjt2YXIgbz1hLmZuLmRhdGVwaWNrZXIuZGVmYXVsdHM9e2Fzc3VtZU5lYXJieVllYXI6ITEsYXV0b2Nsb3NlOiExLGJlZm9yZVNob3dEYXk6YS5ub29wLGJlZm9yZVNob3dNb250aDphLm5vb3AsYmVmb3JlU2hvd1llYXI6YS5ub29wLGJlZm9yZVNob3dEZWNhZGU6YS5ub29wLGJlZm9yZVNob3dDZW50dXJ5OmEubm9vcCxjYWxlbmRhcldlZWtzOiExLGNsZWFyQnRuOiExLHRvZ2dsZUFjdGl2ZTohMSxkYXlzT2ZXZWVrRGlzYWJsZWQ6W10sZGF5c09mV2Vla0hpZ2hsaWdodGVkOltdLGRhdGVzRGlzYWJsZWQ6W10sZW5kRGF0ZToxLzAsZm9yY2VQYXJzZTohMCxmb3JtYXQ6XCJtbS9kZC95eXl5XCIsa2V5Ym9hcmROYXZpZ2F0aW9uOiEwLGxhbmd1YWdlOlwiZW5cIixtaW5WaWV3TW9kZTowLG1heFZpZXdNb2RlOjQsbXVsdGlkYXRlOiExLG11bHRpZGF0ZVNlcGFyYXRvcjpcIixcIixvcmllbnRhdGlvbjpcImF1dG9cIixydGw6ITEsc3RhcnREYXRlOi0oMS8wKSxzdGFydFZpZXc6MCx0b2RheUJ0bjohMSx0b2RheUhpZ2hsaWdodDohMSx3ZWVrU3RhcnQ6MCxkaXNhYmxlVG91Y2hLZXlib2FyZDohMSxlbmFibGVPblJlYWRvbmx5OiEwLHNob3dPbkZvY3VzOiEwLHpJbmRleE9mZnNldDoxMCxjb250YWluZXI6XCJib2R5XCIsaW1tZWRpYXRlVXBkYXRlczohMSx0aXRsZTpcIlwiLHRlbXBsYXRlczp7bGVmdEFycm93OlwiJmxhcXVvO1wiLHJpZ2h0QXJyb3c6XCImcmFxdW87XCJ9fSxwPWEuZm4uZGF0ZXBpY2tlci5sb2NhbGVfb3B0cz1bXCJmb3JtYXRcIixcInJ0bFwiLFwid2Vla1N0YXJ0XCJdO2EuZm4uZGF0ZXBpY2tlci5Db25zdHJ1Y3Rvcj1rO3ZhciBxPWEuZm4uZGF0ZXBpY2tlci5kYXRlcz17ZW46e2RheXM6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl0sZGF5c1Nob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxkYXlzTWluOltcIlN1XCIsXCJNb1wiLFwiVHVcIixcIldlXCIsXCJUaFwiLFwiRnJcIixcIlNhXCJdLG1vbnRoczpbXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl0sbW9udGhzU2hvcnQ6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXSx0b2RheTpcIlRvZGF5XCIsY2xlYXI6XCJDbGVhclwiLHRpdGxlRm9ybWF0OlwiTU0geXl5eVwifX0scj17bW9kZXM6W3tjbHNOYW1lOlwiZGF5c1wiLG5hdkZuYzpcIk1vbnRoXCIsbmF2U3RlcDoxfSx7Y2xzTmFtZTpcIm1vbnRoc1wiLG5hdkZuYzpcIkZ1bGxZZWFyXCIsbmF2U3RlcDoxfSx7Y2xzTmFtZTpcInllYXJzXCIsbmF2Rm5jOlwiRnVsbFllYXJcIixuYXZTdGVwOjEwfSx7Y2xzTmFtZTpcImRlY2FkZXNcIixuYXZGbmM6XCJGdWxsRGVjYWRlXCIsbmF2U3RlcDoxMDB9LHtjbHNOYW1lOlwiY2VudHVyaWVzXCIsbmF2Rm5jOlwiRnVsbENlbnR1cnlcIixuYXZTdGVwOjFlM31dLGlzTGVhcFllYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGElND09PTAmJmElMTAwIT09MHx8YSU0MDA9PT0wfSxnZXREYXlzSW5Nb250aDpmdW5jdGlvbihhLGIpe3JldHVyblszMSxyLmlzTGVhcFllYXIoYSk/Mjk6MjgsMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdW2JdfSx2YWxpZFBhcnRzOi9kZD98REQ/fG1tP3xNTT98eXkoPzp5eSk/L2csbm9ucHVuY3R1YXRpb246L1teIC1cXC86LUBcXHU1ZTc0XFx1NjcwOFxcdTY1ZTVcXFstYHstflxcdFxcblxccl0rL2cscGFyc2VGb3JtYXQ6ZnVuY3Rpb24oYSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYS50b1ZhbHVlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLnRvRGlzcGxheSlyZXR1cm4gYTt2YXIgYj1hLnJlcGxhY2UodGhpcy52YWxpZFBhcnRzLFwiXFx4MDBcIikuc3BsaXQoXCJcXHgwMFwiKSxjPWEubWF0Y2godGhpcy52YWxpZFBhcnRzKTtpZighYnx8IWIubGVuZ3RofHwhY3x8MD09PWMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBmb3JtYXQuXCIpO3JldHVybntzZXBhcmF0b3JzOmIscGFydHM6Y319LHBhcnNlRGF0ZTpmdW5jdGlvbihlLGYsZyxoKXtmdW5jdGlvbiBpKGEsYil7cmV0dXJuIGI9PT0hMCYmKGI9MTApLDEwMD5hJiYoYSs9MmUzLGE+KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpK2ImJihhLT0xMDApKSxhfWZ1bmN0aW9uIGooKXt2YXIgYT10aGlzLnNsaWNlKDAsc1tuXS5sZW5ndGgpLGI9c1tuXS5zbGljZSgwLGEubGVuZ3RoKTtyZXR1cm4gYS50b0xvd2VyQ2FzZSgpPT09Yi50b0xvd2VyQ2FzZSgpfWlmKCFlKXJldHVybiBiO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBmJiYoZj1yLnBhcnNlRm9ybWF0KGYpKSxmLnRvVmFsdWUpcmV0dXJuIGYudG9WYWx1ZShlLGYsZyk7dmFyIGwsbSxuLG8scD0vKFtcXC0rXVxcZCspKFtkbXd5XSkvLHM9ZS5tYXRjaCgvKFtcXC0rXVxcZCspKFtkbXd5XSkvZyksdD17ZDpcIm1vdmVEYXlcIixtOlwibW92ZU1vbnRoXCIsdzpcIm1vdmVXZWVrXCIseTpcIm1vdmVZZWFyXCJ9LHU9e3llc3RlcmRheTpcIi0xZFwiLHRvZGF5OlwiKzBkXCIsdG9tb3Jyb3c6XCIrMWRcIn07aWYoL15bXFwtK11cXGQrW2Rtd3ldKFtcXHMsXStbXFwtK11cXGQrW2Rtd3ldKSokLy50ZXN0KGUpKXtmb3IoZT1uZXcgRGF0ZSxuPTA7bjxzLmxlbmd0aDtuKyspbD1wLmV4ZWMoc1tuXSksbT1wYXJzZUludChsWzFdKSxvPXRbbFsyXV0sZT1rLnByb3RvdHlwZVtvXShlLG0pO3JldHVybiBjKGUuZ2V0VVRDRnVsbFllYXIoKSxlLmdldFVUQ01vbnRoKCksZS5nZXRVVENEYXRlKCkpfWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB1W2VdJiYoZT11W2VdLHM9ZS5tYXRjaCgvKFtcXC0rXVxcZCspKFtkbXd5XSkvZyksL15bXFwtK11cXGQrW2Rtd3ldKFtcXHMsXStbXFwtK11cXGQrW2Rtd3ldKSokLy50ZXN0KGUpKSl7Zm9yKGU9bmV3IERhdGUsbj0wO248cy5sZW5ndGg7bisrKWw9cC5leGVjKHNbbl0pLG09cGFyc2VJbnQobFsxXSksbz10W2xbMl1dLGU9ay5wcm90b3R5cGVbb10oZSxtKTtyZXR1cm4gYyhlLmdldFVUQ0Z1bGxZZWFyKCksZS5nZXRVVENNb250aCgpLGUuZ2V0VVRDRGF0ZSgpKX1zPWUmJmUubWF0Y2godGhpcy5ub25wdW5jdHVhdGlvbil8fFtdLGU9bmV3IERhdGU7dmFyIHYsdyx4PXt9LHk9W1wieXl5eVwiLFwieXlcIixcIk1cIixcIk1NXCIsXCJtXCIsXCJtbVwiLFwiZFwiLFwiZGRcIl0sej17eXl5eTpmdW5jdGlvbihhLGIpe3JldHVybiBhLnNldFVUQ0Z1bGxZZWFyKGg/aShiLGgpOmIpfSx5eTpmdW5jdGlvbihhLGIpe3JldHVybiBhLnNldFVUQ0Z1bGxZZWFyKGg/aShiLGgpOmIpfSxtOmZ1bmN0aW9uKGEsYil7aWYoaXNOYU4oYSkpcmV0dXJuIGE7Zm9yKGItPTE7MD5iOyliKz0xMjtmb3IoYiU9MTIsYS5zZXRVVENNb250aChiKTthLmdldFVUQ01vbnRoKCkhPT1iOylhLnNldFVUQ0RhdGUoYS5nZXRVVENEYXRlKCktMSk7cmV0dXJuIGF9LGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5zZXRVVENEYXRlKGIpfX07ei5NPXouTU09ei5tbT16Lm0sei5kZD16LmQsZT1kKCk7dmFyIEE9Zi5wYXJ0cy5zbGljZSgpO2lmKHMubGVuZ3RoIT09QS5sZW5ndGgmJihBPWEoQSkuZmlsdGVyKGZ1bmN0aW9uKGIsYyl7cmV0dXJuLTEhPT1hLmluQXJyYXkoYyx5KX0pLnRvQXJyYXkoKSkscy5sZW5ndGg9PT1BLmxlbmd0aCl7dmFyIEI7Zm9yKG49MCxCPUEubGVuZ3RoO0I+bjtuKyspe2lmKHY9cGFyc2VJbnQoc1tuXSwxMCksbD1BW25dLGlzTmFOKHYpKXN3aXRjaChsKXtjYXNlXCJNTVwiOnc9YShxW2ddLm1vbnRocykuZmlsdGVyKGopLHY9YS5pbkFycmF5KHdbMF0scVtnXS5tb250aHMpKzE7YnJlYWs7Y2FzZVwiTVwiOnc9YShxW2ddLm1vbnRoc1Nob3J0KS5maWx0ZXIoaiksdj1hLmluQXJyYXkod1swXSxxW2ddLm1vbnRoc1Nob3J0KSsxfXhbbF09dn12YXIgQyxEO2ZvcihuPTA7bjx5Lmxlbmd0aDtuKyspRD15W25dLEQgaW4geCYmIWlzTmFOKHhbRF0pJiYoQz1uZXcgRGF0ZShlKSx6W0RdKEMseFtEXSksaXNOYU4oQyl8fChlPUMpKX1yZXR1cm4gZX0sZm9ybWF0RGF0ZTpmdW5jdGlvbihiLGMsZCl7aWYoIWIpcmV0dXJuXCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgYyYmKGM9ci5wYXJzZUZvcm1hdChjKSksXHJcbmMudG9EaXNwbGF5KXJldHVybiBjLnRvRGlzcGxheShiLGMsZCk7dmFyIGU9e2Q6Yi5nZXRVVENEYXRlKCksRDpxW2RdLmRheXNTaG9ydFtiLmdldFVUQ0RheSgpXSxERDpxW2RdLmRheXNbYi5nZXRVVENEYXkoKV0sbTpiLmdldFVUQ01vbnRoKCkrMSxNOnFbZF0ubW9udGhzU2hvcnRbYi5nZXRVVENNb250aCgpXSxNTTpxW2RdLm1vbnRoc1tiLmdldFVUQ01vbnRoKCldLHl5OmIuZ2V0VVRDRnVsbFllYXIoKS50b1N0cmluZygpLnN1YnN0cmluZygyKSx5eXl5OmIuZ2V0VVRDRnVsbFllYXIoKX07ZS5kZD0oZS5kPDEwP1wiMFwiOlwiXCIpK2UuZCxlLm1tPShlLm08MTA/XCIwXCI6XCJcIikrZS5tLGI9W107Zm9yKHZhciBmPWEuZXh0ZW5kKFtdLGMuc2VwYXJhdG9ycyksZz0wLGg9Yy5wYXJ0cy5sZW5ndGg7aD49ZztnKyspZi5sZW5ndGgmJmIucHVzaChmLnNoaWZ0KCkpLGIucHVzaChlW2MucGFydHNbZ11dKTtyZXR1cm4gYi5qb2luKFwiXCIpfSxoZWFkVGVtcGxhdGU6Jzx0aGVhZD48dHI+PHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJkYXRlcGlja2VyLXRpdGxlXCI+PC90aD48L3RyPjx0cj48dGggY2xhc3M9XCJwcmV2XCI+JmxhcXVvOzwvdGg+PHRoIGNvbHNwYW49XCI1XCIgY2xhc3M9XCJkYXRlcGlja2VyLXN3aXRjaFwiPjwvdGg+PHRoIGNsYXNzPVwibmV4dFwiPiZyYXF1bzs8L3RoPjwvdHI+PC90aGVhZD4nLGNvbnRUZW1wbGF0ZTonPHRib2R5Pjx0cj48dGQgY29sc3Bhbj1cIjdcIj48L3RkPjwvdHI+PC90Ym9keT4nLGZvb3RUZW1wbGF0ZTonPHRmb290Pjx0cj48dGggY29sc3Bhbj1cIjdcIiBjbGFzcz1cInRvZGF5XCI+PC90aD48L3RyPjx0cj48dGggY29sc3Bhbj1cIjdcIiBjbGFzcz1cImNsZWFyXCI+PC90aD48L3RyPjwvdGZvb3Q+J307ci50ZW1wbGF0ZT0nPGRpdiBjbGFzcz1cImRhdGVwaWNrZXJcIj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1kYXlzXCI+PHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+JytyLmhlYWRUZW1wbGF0ZStcIjx0Ym9keT48L3Rib2R5PlwiK3IuZm9vdFRlbXBsYXRlKyc8L3RhYmxlPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLW1vbnRoc1wiPjx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicrci5oZWFkVGVtcGxhdGUrci5jb250VGVtcGxhdGUrci5mb290VGVtcGxhdGUrJzwvdGFibGU+PC9kaXY+PGRpdiBjbGFzcz1cImRhdGVwaWNrZXIteWVhcnNcIj48dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nK3IuaGVhZFRlbXBsYXRlK3IuY29udFRlbXBsYXRlK3IuZm9vdFRlbXBsYXRlKyc8L3RhYmxlPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWRlY2FkZXNcIj48dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nK3IuaGVhZFRlbXBsYXRlK3IuY29udFRlbXBsYXRlK3IuZm9vdFRlbXBsYXRlKyc8L3RhYmxlPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWNlbnR1cmllc1wiPjx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicrci5oZWFkVGVtcGxhdGUrci5jb250VGVtcGxhdGUrci5mb290VGVtcGxhdGUrXCI8L3RhYmxlPjwvZGl2PjwvZGl2PlwiLGEuZm4uZGF0ZXBpY2tlci5EUEdsb2JhbD1yLGEuZm4uZGF0ZXBpY2tlci5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4uZGF0ZXBpY2tlcj1tLHRoaXN9LGEuZm4uZGF0ZXBpY2tlci52ZXJzaW9uPVwiMS42LjRcIixhKGRvY3VtZW50KS5vbihcImZvY3VzLmRhdGVwaWNrZXIuZGF0YS1hcGkgY2xpY2suZGF0ZXBpY2tlci5kYXRhLWFwaVwiLCdbZGF0YS1wcm92aWRlPVwiZGF0ZXBpY2tlclwiXScsZnVuY3Rpb24oYil7dmFyIGM9YSh0aGlzKTtjLmRhdGEoXCJkYXRlcGlja2VyXCIpfHwoYi5wcmV2ZW50RGVmYXVsdCgpLG4uY2FsbChjLFwic2hvd1wiKSl9KSxhKGZ1bmN0aW9uKCl7bi5jYWxsKGEoJ1tkYXRhLXByb3ZpZGU9XCJkYXRlcGlja2VyLWlubGluZVwiXScpKX0pfSk7Il0sIm5hbWVzIjpbImEiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwiX3R5cGVvZiIsInJlcXVpcmUiLCJqUXVlcnkiLCJiIiwiYyIsIkRhdGUiLCJVVEMiLCJhcHBseSIsImFyZ3VtZW50cyIsImQiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImYiLCJnIiwiaXNOYU4iLCJnZXRUaW1lIiwiaCIsInRvTG93ZXJDYXNlIiwiZGF0YSIsIlJlZ0V4cCIsImkiLCJ0ZXN0IiwicmVwbGFjZSIsInEiLCJzcGxpdCIsImVhY2giLCJwIiwiaiIsImdldCIsInNsaWNlIiwiY29udGFpbnMiLCJ2YWx1ZU9mIiwibGVuZ3RoIiwicmVtb3ZlIiwic3BsaWNlIiwiaXNBcnJheSIsImNsZWFyIiwicHVzaCIsImNvcHkiLCJleHRlbmQiLCJrIiwiX3Byb2Nlc3Nfb3B0aW9ucyIsImRhdGVzIiwidmlld0RhdGUiLCJvIiwiZGVmYXVsdFZpZXdEYXRlIiwiZm9jdXNEYXRlIiwiZWxlbWVudCIsImlzSW5wdXQiLCJpcyIsImlucHV0RmllbGQiLCJmaW5kIiwiY29tcG9uZW50IiwiaGFzQ2xhc3MiLCJoYXNJbnB1dCIsImlzSW5saW5lIiwicGlja2VyIiwiciIsInRlbXBsYXRlIiwiX2NoZWNrX3RlbXBsYXRlIiwidGVtcGxhdGVzIiwibGVmdEFycm93IiwiaHRtbCIsInJpZ2h0QXJyb3ciLCJfYnVpbGRFdmVudHMiLCJfYXR0YWNoRXZlbnRzIiwiYWRkQ2xhc3MiLCJhcHBlbmRUbyIsInJ0bCIsInZpZXdNb2RlIiwic3RhcnRWaWV3IiwiY2FsZW5kYXJXZWVrcyIsImF0dHIiLCJwYXJzZUludCIsIl9hbGxvd191cGRhdGUiLCJzZXRTdGFydERhdGUiLCJfbyIsInN0YXJ0RGF0ZSIsInNldEVuZERhdGUiLCJlbmREYXRlIiwic2V0RGF5c09mV2Vla0Rpc2FibGVkIiwiZGF5c09mV2Vla0Rpc2FibGVkIiwic2V0RGF5c09mV2Vla0hpZ2hsaWdodGVkIiwiZGF5c09mV2Vla0hpZ2hsaWdodGVkIiwic2V0RGF0ZXNEaXNhYmxlZCIsImRhdGVzRGlzYWJsZWQiLCJmaWxsRG93IiwiZmlsbE1vbnRocyIsInVwZGF0ZSIsInNob3dNb2RlIiwic2hvdyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiX3Jlc29sdmVWaWV3TmFtZSIsIm1hdGNoIiwibGFuZ3VhZ2UiLCJtaW5WaWV3TW9kZSIsIm1heFZpZXdNb2RlIiwiTWF0aCIsIm1pbiIsIm1heCIsIm11bHRpZGF0ZSIsIk51bWJlciIsIm11bHRpZGF0ZVNlcGFyYXRvciIsIlN0cmluZyIsIndlZWtTdGFydCIsIndlZWtFbmQiLCJwYXJzZUZvcm1hdCIsImZvcm1hdCIsIl9sb2NhbF90b191dGMiLCJfemVyb190aW1lIiwicGFyc2VEYXRlIiwiYXNzdW1lTmVhcmJ5WWVhciIsIm1hcCIsIm9yaWVudGF0aW9uIiwiZ3JlcCIsIngiLCJ5IiwieWVhciIsIm1vbnRoIiwibCIsImRheSIsIl9ldmVudHMiLCJfc2Vjb25kYXJ5RXZlbnRzIiwiX2FwcGx5RXZlbnRzIiwib24iLCJfdW5hcHBseUV2ZW50cyIsIm9mZiIsImtleXVwIiwicHJveHkiLCJpbkFycmF5Iiwia2V5Q29kZSIsImtleWRvd24iLCJwYXN0ZSIsInNob3dPbkZvY3VzIiwiZm9jdXMiLCJjbGljayIsImJsdXIiLCJfZm9jdXNlZF9mcm9tIiwidGFyZ2V0IiwiaW1tZWRpYXRlVXBkYXRlcyIsImRhdGUiLCJ3aW5kb3ciLCJyZXNpemUiLCJwbGFjZSIsImRvY3VtZW50IiwibW91c2Vkb3duIiwiaGlkZSIsIl9kZXRhY2hFdmVudHMiLCJfYXR0YWNoU2Vjb25kYXJ5RXZlbnRzIiwiX2RldGFjaFNlY29uZGFyeUV2ZW50cyIsIl90cmlnZ2VyIiwiX3V0Y190b19sb2NhbCIsInRyaWdnZXIiLCJ0eXBlIiwiZm9ybWF0RGF0ZSIsInByb3AiLCJlbmFibGVPblJlYWRvbmx5IiwiY29udGFpbmVyIiwibmF2aWdhdG9yIiwibXNNYXhUb3VjaFBvaW50cyIsImRpc2FibGVUb3VjaEtleWJvYXJkIiwiZGV0YWNoIiwiZm9yY2VQYXJzZSIsInZhbCIsInNldFZhbHVlIiwiZGVzdHJveSIsImRhdGVwaWNrZXIiLCJvcmlnaW5hbEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsInR5cGVzIiwiZ2V0RGF0YSIsInNldERhdGUiLCJwcmV2ZW50RGVmYXVsdCIsImdldFRpbWV6b25lT2Zmc2V0IiwiX3plcm9fdXRjX3RpbWUiLCJnZXREYXRlcyIsImdldFVUQ0RhdGVzIiwiY2xlYXJEYXRlcyIsImF1dG9jbG9zZSIsInNldERhdGVzIiwic2V0VVRDRGF0ZXMiLCJzZXRVVENEYXRlIiwiZ2V0Rm9ybWF0dGVkRGF0ZSIsImpvaW4iLCJnZXRTdGFydERhdGUiLCJ1cGRhdGVOYXZBcnJvd3MiLCJnZXRFbmREYXRlIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0Iiwid2lkdGgiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJwYXJlbnRzIiwiY3NzIiwiekluZGV4T2Zmc2V0IiwicGFyZW50IiwibSIsIm4iLCJsZWZ0IiwidG9wIiwicmVtb3ZlQ2xhc3MiLCJyaWdodCIsInpJbmRleCIsImRhdGVXaXRoaW5SYW5nZSIsImZpbGwiLCJjaGFuZ2UiLCJkYXlzTWluIiwiYXBwZW5kIiwibW9udGhzU2hvcnQiLCJzZXRSYW5nZSIsInJhbmdlIiwiZ2V0Q2xhc3NOYW1lcyIsInRvZGF5SGlnaGxpZ2h0IiwiZGF0ZUlzRGlzYWJsZWQiLCJnZXRVVENEYXkiLCJfZmlsbF95ZWFyc1ZpZXciLCJzIiwidCIsInUiLCJ0ZXh0Iiwibm9vcCIsImVuYWJsZWQiLCJjbGFzc2VzIiwiY29uY2F0IiwidG9vbHRpcCIsInRvZGF5IiwiZW4iLCJ0aXRsZUZvcm1hdCIsInRvZ2dsZSIsInRvZGF5QnRuIiwiY2xlYXJCdG4iLCJ0aXRsZSIsImdldERheXNJbk1vbnRoIiwic2V0VVRDRnVsbFllYXIiLCJ2IiwidyIsInoiLCJiZWZvcmVTaG93RGF5IiwiaXNGdW5jdGlvbiIsInVuaXF1ZVNvcnQiLCJ1bmlxdWUiLCJlbXB0eSIsIkEiLCJtb250aHNUaXRsZSIsIkIiLCJlbmQiLCJlcSIsImJlZm9yZVNob3dNb250aCIsIkMiLCJiZWZvcmVTaG93WWVhciIsImJlZm9yZVNob3dEZWNhZGUiLCJiZWZvcmVTaG93Q2VudHVyeSIsInZpc2liaWxpdHkiLCJzdG9wUHJvcGFnYXRpb24iLCJjbG9zZXN0IiwibW9kZXMiLCJuYXZTdGVwIiwibW92ZU1vbnRoIiwibW92ZVllYXIiLCJfc2V0RGF0ZSIsImluZGV4Iiwic2V0VVRDTW9udGgiLCJfdG9nZ2xlX211bHRpZGF0ZSIsInRvZ2dsZUFjdGl2ZSIsIm1vdmVEYXkiLCJtb3ZlV2VlayIsImFicyIsIm1vdmVBdmFpbGFibGVEYXRlIiwid2Vla09mRGF0ZUlzRGlzYWJsZWQiLCJrZXlib2FyZE5hdmlnYXRpb24iLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJjaGlsZHJlbiIsImZpbHRlciIsImNsc05hbWUiLCJpbnB1dHMiLCJqcXVlcnkiLCJjYWxsIiwiZGF0ZVVwZGF0ZWQiLCJwaWNrZXJzIiwidXBkYXRlRGF0ZXMiLCJ1cGRhdGVSYW5nZXMiLCJ1cGRhdGluZyIsImZuIiwiQXJyYXkiLCJzaGlmdCIsInRvQXJyYXkiLCJFcnJvciIsImRlZmF1bHRzIiwibG9jYWxlX29wdHMiLCJDb25zdHJ1Y3RvciIsImRheXMiLCJkYXlzU2hvcnQiLCJtb250aHMiLCJuYXZGbmMiLCJpc0xlYXBZZWFyIiwidmFsaWRQYXJ0cyIsIm5vbnB1bmN0dWF0aW9uIiwidG9WYWx1ZSIsInRvRGlzcGxheSIsInNlcGFyYXRvcnMiLCJwYXJ0cyIsInllc3RlcmRheSIsInRvbW9ycm93IiwiZXhlYyIsInl5eXkiLCJ5eSIsIk0iLCJNTSIsIm1tIiwiZGQiLCJEIiwiREQiLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImhlYWRUZW1wbGF0ZSIsImNvbnRUZW1wbGF0ZSIsImZvb3RUZW1wbGF0ZSIsIkRQR2xvYmFsIiwibm9Db25mbGljdCIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/landing-page/bootstrap-datepicker.min.js\n");

/***/ }),

/***/ "./resources/js/landing-page/bootstrap.min.js":
/*!****************************************************!*\
  !*** ./resources/js/landing-page/bootstrap.min.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*!\r\n  * Bootstrap v4.1.3 (https://getbootstrap.com/)\r\n  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\r\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n  */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? e(exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (t, e, h) {\n  \"use strict\";\n\n  function i(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n  function s(t, e, n) {\n    return e && i(t.prototype, e), n && i(t, n), t;\n  }\n  function l(r) {\n    for (var t = 1; t < arguments.length; t++) {\n      var o = null != arguments[t] ? arguments[t] : {},\n        e = Object.keys(o);\n      \"function\" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(o).filter(function (t) {\n        return Object.getOwnPropertyDescriptor(o, t).enumerable;\n      }))), e.forEach(function (t) {\n        var e, n, i;\n        e = r, i = o[n = t], n in e ? Object.defineProperty(e, n, {\n          value: i,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[n] = i;\n      });\n    }\n    return r;\n  }\n  e = e && e.hasOwnProperty(\"default\") ? e[\"default\"] : e, h = h && h.hasOwnProperty(\"default\") ? h[\"default\"] : h;\n  var r,\n    n,\n    o,\n    a,\n    c,\n    u,\n    f,\n    d,\n    g,\n    _,\n    m,\n    p,\n    v,\n    y,\n    E,\n    C,\n    T,\n    b,\n    S,\n    I,\n    A,\n    D,\n    w,\n    N,\n    O,\n    k,\n    P,\n    j,\n    H,\n    L,\n    R,\n    x,\n    W,\n    U,\n    q,\n    F,\n    K,\n    M,\n    Q,\n    B,\n    V,\n    Y,\n    z,\n    J,\n    Z,\n    G,\n    $,\n    X,\n    tt,\n    et,\n    nt,\n    it,\n    rt,\n    ot,\n    st,\n    at,\n    lt,\n    ct,\n    ht,\n    ut,\n    ft,\n    dt,\n    gt,\n    _t,\n    mt,\n    pt,\n    vt,\n    yt,\n    Et,\n    Ct,\n    Tt,\n    bt,\n    St,\n    It,\n    At,\n    Dt,\n    wt,\n    Nt,\n    Ot,\n    kt,\n    Pt,\n    jt,\n    Ht,\n    Lt,\n    Rt,\n    xt,\n    Wt,\n    Ut,\n    qt,\n    Ft,\n    Kt,\n    Mt,\n    Qt,\n    Bt,\n    Vt,\n    Yt,\n    zt,\n    Jt,\n    Zt,\n    Gt,\n    $t,\n    Xt,\n    te,\n    ee,\n    ne,\n    ie,\n    re,\n    oe,\n    se,\n    ae,\n    le,\n    ce,\n    he,\n    ue,\n    fe,\n    de,\n    ge,\n    _e,\n    me,\n    pe,\n    ve,\n    ye,\n    Ee,\n    Ce,\n    Te,\n    be,\n    Se,\n    Ie,\n    Ae,\n    De,\n    we,\n    Ne,\n    Oe,\n    ke,\n    Pe,\n    je,\n    He,\n    Le,\n    Re,\n    xe,\n    We,\n    Ue,\n    qe,\n    Fe,\n    Ke,\n    Me,\n    Qe,\n    Be,\n    Ve,\n    Ye,\n    ze,\n    Je,\n    Ze,\n    Ge,\n    $e,\n    Xe,\n    tn,\n    en,\n    nn,\n    rn,\n    on,\n    sn,\n    an,\n    ln,\n    cn,\n    hn,\n    un,\n    fn,\n    dn,\n    gn,\n    _n,\n    mn,\n    pn,\n    vn,\n    yn,\n    En,\n    Cn,\n    Tn,\n    bn,\n    Sn,\n    In,\n    An,\n    Dn,\n    wn,\n    Nn,\n    On,\n    kn,\n    Pn,\n    jn,\n    Hn,\n    Ln,\n    Rn,\n    xn,\n    Wn,\n    Un,\n    qn,\n    Fn = function (i) {\n      var e = \"transitionend\";\n      function t(t) {\n        var e = this,\n          n = !1;\n        return i(this).one(l.TRANSITION_END, function () {\n          n = !0;\n        }), setTimeout(function () {\n          n || l.triggerTransitionEnd(e);\n        }, t), this;\n      }\n      var l = {\n        TRANSITION_END: \"bsTransitionEnd\",\n        getUID: function getUID(t) {\n          for (; t += ~~(1e6 * Math.random()), document.getElementById(t););\n          return t;\n        },\n        getSelectorFromElement: function getSelectorFromElement(t) {\n          var e = t.getAttribute(\"data-target\");\n          e && \"#\" !== e || (e = t.getAttribute(\"href\") || \"\");\n          try {\n            return document.querySelector(e) ? e : null;\n          } catch (t) {\n            return null;\n          }\n        },\n        getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {\n          if (!t) return 0;\n          var e = i(t).css(\"transition-duration\");\n          return parseFloat(e) ? (e = e.split(\",\")[0], 1e3 * parseFloat(e)) : 0;\n        },\n        reflow: function reflow(t) {\n          return t.offsetHeight;\n        },\n        triggerTransitionEnd: function triggerTransitionEnd(t) {\n          i(t).trigger(e);\n        },\n        supportsTransitionEnd: function supportsTransitionEnd() {\n          return Boolean(e);\n        },\n        isElement: function isElement(t) {\n          return (t[0] || t).nodeType;\n        },\n        typeCheckConfig: function typeCheckConfig(t, e, n) {\n          for (var i in n) if (Object.prototype.hasOwnProperty.call(n, i)) {\n            var r = n[i],\n              o = e[i],\n              s = o && l.isElement(o) ? \"element\" : (a = o, {}.toString.call(a).match(/\\s([a-z]+)/i)[1].toLowerCase());\n            if (!new RegExp(r).test(s)) throw new Error(t.toUpperCase() + ': Option \"' + i + '\" provided type \"' + s + '\" but expected type \"' + r + '\".');\n          }\n          var a;\n        }\n      };\n      return i.fn.emulateTransitionEnd = t, i.event.special[l.TRANSITION_END] = {\n        bindType: e,\n        delegateType: e,\n        handle: function handle(t) {\n          if (i(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);\n        }\n      }, l;\n    }(e),\n    Kn = (n = \"alert\", a = \".\" + (o = \"bs.alert\"), c = (r = e).fn[n], u = {\n      CLOSE: \"close\" + a,\n      CLOSED: \"closed\" + a,\n      CLICK_DATA_API: \"click\" + a + \".data-api\"\n    }, f = \"alert\", d = \"fade\", g = \"show\", _ = function () {\n      function i(t) {\n        this._element = t;\n      }\n      var t = i.prototype;\n      return t.close = function (t) {\n        var e = this._element;\n        t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);\n      }, t.dispose = function () {\n        r.removeData(this._element, o), this._element = null;\n      }, t._getRootElement = function (t) {\n        var e = Fn.getSelectorFromElement(t),\n          n = !1;\n        return e && (n = document.querySelector(e)), n || (n = r(t).closest(\".\" + f)[0]), n;\n      }, t._triggerCloseEvent = function (t) {\n        var e = r.Event(u.CLOSE);\n        return r(t).trigger(e), e;\n      }, t._removeElement = function (e) {\n        var n = this;\n        if (r(e).removeClass(g), r(e).hasClass(d)) {\n          var t = Fn.getTransitionDurationFromElement(e);\n          r(e).one(Fn.TRANSITION_END, function (t) {\n            return n._destroyElement(e, t);\n          }).emulateTransitionEnd(t);\n        } else this._destroyElement(e);\n      }, t._destroyElement = function (t) {\n        r(t).detach().trigger(u.CLOSED).remove();\n      }, i._jQueryInterface = function (n) {\n        return this.each(function () {\n          var t = r(this),\n            e = t.data(o);\n          e || (e = new i(this), t.data(o, e)), \"close\" === n && e[n](this);\n        });\n      }, i._handleDismiss = function (e) {\n        return function (t) {\n          t && t.preventDefault(), e.close(this);\n        };\n      }, s(i, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }]), i;\n    }(), r(document).on(u.CLICK_DATA_API, '[data-dismiss=\"alert\"]', _._handleDismiss(new _())), r.fn[n] = _._jQueryInterface, r.fn[n].Constructor = _, r.fn[n].noConflict = function () {\n      return r.fn[n] = c, _._jQueryInterface;\n    }, _),\n    Mn = (p = \"button\", y = \".\" + (v = \"bs.button\"), E = \".data-api\", C = (m = e).fn[p], T = \"active\", b = \"btn\", I = '[data-toggle^=\"button\"]', A = '[data-toggle=\"buttons\"]', D = \"input\", w = \".active\", N = \".btn\", O = {\n      CLICK_DATA_API: \"click\" + y + E,\n      FOCUS_BLUR_DATA_API: (S = \"focus\") + y + E + \" blur\" + y + E\n    }, k = function () {\n      function n(t) {\n        this._element = t;\n      }\n      var t = n.prototype;\n      return t.toggle = function () {\n        var t = !0,\n          e = !0,\n          n = m(this._element).closest(A)[0];\n        if (n) {\n          var i = this._element.querySelector(D);\n          if (i) {\n            if (\"radio\" === i.type) if (i.checked && this._element.classList.contains(T)) t = !1;else {\n              var r = n.querySelector(w);\n              r && m(r).removeClass(T);\n            }\n            if (t) {\n              if (i.hasAttribute(\"disabled\") || n.hasAttribute(\"disabled\") || i.classList.contains(\"disabled\") || n.classList.contains(\"disabled\")) return;\n              i.checked = !this._element.classList.contains(T), m(i).trigger(\"change\");\n            }\n            i.focus(), e = !1;\n          }\n        }\n        e && this._element.setAttribute(\"aria-pressed\", !this._element.classList.contains(T)), t && m(this._element).toggleClass(T);\n      }, t.dispose = function () {\n        m.removeData(this._element, v), this._element = null;\n      }, n._jQueryInterface = function (e) {\n        return this.each(function () {\n          var t = m(this).data(v);\n          t || (t = new n(this), m(this).data(v, t)), \"toggle\" === e && t[e]();\n        });\n      }, s(n, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }]), n;\n    }(), m(document).on(O.CLICK_DATA_API, I, function (t) {\n      t.preventDefault();\n      var e = t.target;\n      m(e).hasClass(b) || (e = m(e).closest(N)), k._jQueryInterface.call(m(e), \"toggle\");\n    }).on(O.FOCUS_BLUR_DATA_API, I, function (t) {\n      var e = m(t.target).closest(N)[0];\n      m(e).toggleClass(S, /^focus(in)?$/.test(t.type));\n    }), m.fn[p] = k._jQueryInterface, m.fn[p].Constructor = k, m.fn[p].noConflict = function () {\n      return m.fn[p] = C, k._jQueryInterface;\n    }, k),\n    Qn = (j = \"carousel\", L = \".\" + (H = \"bs.carousel\"), R = \".data-api\", x = (P = e).fn[j], W = {\n      interval: 5e3,\n      keyboard: !0,\n      slide: !1,\n      pause: \"hover\",\n      wrap: !0\n    }, U = {\n      interval: \"(number|boolean)\",\n      keyboard: \"boolean\",\n      slide: \"(boolean|string)\",\n      pause: \"(string|boolean)\",\n      wrap: \"boolean\"\n    }, q = \"next\", F = \"prev\", K = \"left\", M = \"right\", Q = {\n      SLIDE: \"slide\" + L,\n      SLID: \"slid\" + L,\n      KEYDOWN: \"keydown\" + L,\n      MOUSEENTER: \"mouseenter\" + L,\n      MOUSELEAVE: \"mouseleave\" + L,\n      TOUCHEND: \"touchend\" + L,\n      LOAD_DATA_API: \"load\" + L + R,\n      CLICK_DATA_API: \"click\" + L + R\n    }, B = \"carousel\", V = \"active\", Y = \"slide\", z = \"carousel-item-right\", J = \"carousel-item-left\", Z = \"carousel-item-next\", G = \"carousel-item-prev\", $ = \".active\", X = \".active.carousel-item\", tt = \".carousel-item\", et = \".carousel-item-next, .carousel-item-prev\", nt = \".carousel-indicators\", it = \"[data-slide], [data-slide-to]\", rt = '[data-ride=\"carousel\"]', ot = function () {\n      function o(t, e) {\n        this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(e), this._element = P(t)[0], this._indicatorsElement = this._element.querySelector(nt), this._addEventListeners();\n      }\n      var t = o.prototype;\n      return t.next = function () {\n        this._isSliding || this._slide(q);\n      }, t.nextWhenVisible = function () {\n        !document.hidden && P(this._element).is(\":visible\") && \"hidden\" !== P(this._element).css(\"visibility\") && this.next();\n      }, t.prev = function () {\n        this._isSliding || this._slide(F);\n      }, t.pause = function (t) {\n        t || (this._isPaused = !0), this._element.querySelector(et) && (Fn.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n      }, t.cycle = function (t) {\n        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n      }, t.to = function (t) {\n        var e = this;\n        this._activeElement = this._element.querySelector(X);\n        var n = this._getItemIndex(this._activeElement);\n        if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) P(this._element).one(Q.SLID, function () {\n          return e.to(t);\n        });else {\n          if (n === t) return this.pause(), void this.cycle();\n          var i = n < t ? q : F;\n          this._slide(i, this._items[t]);\n        }\n      }, t.dispose = function () {\n        P(this._element).off(L), P.removeData(this._element, H), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;\n      }, t._getConfig = function (t) {\n        return t = l({}, W, t), Fn.typeCheckConfig(j, t, U), t;\n      }, t._addEventListeners = function () {\n        var e = this;\n        this._config.keyboard && P(this._element).on(Q.KEYDOWN, function (t) {\n          return e._keydown(t);\n        }), \"hover\" === this._config.pause && (P(this._element).on(Q.MOUSEENTER, function (t) {\n          return e.pause(t);\n        }).on(Q.MOUSELEAVE, function (t) {\n          return e.cycle(t);\n        }), \"ontouchstart\" in document.documentElement && P(this._element).on(Q.TOUCHEND, function () {\n          e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function (t) {\n            return e.cycle(t);\n          }, 500 + e._config.interval);\n        }));\n      }, t._keydown = function (t) {\n        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {\n          case 37:\n            t.preventDefault(), this.prev();\n            break;\n          case 39:\n            t.preventDefault(), this.next();\n        }\n      }, t._getItemIndex = function (t) {\n        return this._items = t && t.parentNode ? [].slice.call(t.parentNode.querySelectorAll(tt)) : [], this._items.indexOf(t);\n      }, t._getItemByDirection = function (t, e) {\n        var n = t === q,\n          i = t === F,\n          r = this._getItemIndex(e),\n          o = this._items.length - 1;\n        if ((i && 0 === r || n && r === o) && !this._config.wrap) return e;\n        var s = (r + (t === F ? -1 : 1)) % this._items.length;\n        return -1 === s ? this._items[this._items.length - 1] : this._items[s];\n      }, t._triggerSlideEvent = function (t, e) {\n        var n = this._getItemIndex(t),\n          i = this._getItemIndex(this._element.querySelector(X)),\n          r = P.Event(Q.SLIDE, {\n            relatedTarget: t,\n            direction: e,\n            from: i,\n            to: n\n          });\n        return P(this._element).trigger(r), r;\n      }, t._setActiveIndicatorElement = function (t) {\n        if (this._indicatorsElement) {\n          var e = [].slice.call(this._indicatorsElement.querySelectorAll($));\n          P(e).removeClass(V);\n          var n = this._indicatorsElement.children[this._getItemIndex(t)];\n          n && P(n).addClass(V);\n        }\n      }, t._slide = function (t, e) {\n        var n,\n          i,\n          r,\n          o = this,\n          s = this._element.querySelector(X),\n          a = this._getItemIndex(s),\n          l = e || s && this._getItemByDirection(t, s),\n          c = this._getItemIndex(l),\n          h = Boolean(this._interval);\n        if (t === q ? (n = J, i = Z, r = K) : (n = z, i = G, r = M), l && P(l).hasClass(V)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && s && l) {\n          this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(l);\n          var u = P.Event(Q.SLID, {\n            relatedTarget: l,\n            direction: r,\n            from: a,\n            to: c\n          });\n          if (P(this._element).hasClass(Y)) {\n            P(l).addClass(i), Fn.reflow(l), P(s).addClass(n), P(l).addClass(n);\n            var f = Fn.getTransitionDurationFromElement(s);\n            P(s).one(Fn.TRANSITION_END, function () {\n              P(l).removeClass(n + \" \" + i).addClass(V), P(s).removeClass(V + \" \" + i + \" \" + n), o._isSliding = !1, setTimeout(function () {\n                return P(o._element).trigger(u);\n              }, 0);\n            }).emulateTransitionEnd(f);\n          } else P(s).removeClass(V), P(l).addClass(V), this._isSliding = !1, P(this._element).trigger(u);\n          h && this.cycle();\n        }\n      }, o._jQueryInterface = function (i) {\n        return this.each(function () {\n          var t = P(this).data(H),\n            e = l({}, W, P(this).data());\n          \"object\" == _typeof(i) && (e = l({}, e, i));\n          var n = \"string\" == typeof i ? i : e.slide;\n          if (t || (t = new o(this, e), P(this).data(H, t)), \"number\" == typeof i) t.to(i);else if (\"string\" == typeof n) {\n            if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n            t[n]();\n          } else e.interval && (t.pause(), t.cycle());\n        });\n      }, o._dataApiClickHandler = function (t) {\n        var e = Fn.getSelectorFromElement(this);\n        if (e) {\n          var n = P(e)[0];\n          if (n && P(n).hasClass(B)) {\n            var i = l({}, P(n).data(), P(this).data()),\n              r = this.getAttribute(\"data-slide-to\");\n            r && (i.interval = !1), o._jQueryInterface.call(P(n), i), r && P(n).data(H).to(r), t.preventDefault();\n          }\n        }\n      }, s(o, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return W;\n        }\n      }]), o;\n    }(), P(document).on(Q.CLICK_DATA_API, it, ot._dataApiClickHandler), P(window).on(Q.LOAD_DATA_API, function () {\n      for (var t = [].slice.call(document.querySelectorAll(rt)), e = 0, n = t.length; e < n; e++) {\n        var i = P(t[e]);\n        ot._jQueryInterface.call(i, i.data());\n      }\n    }), P.fn[j] = ot._jQueryInterface, P.fn[j].Constructor = ot, P.fn[j].noConflict = function () {\n      return P.fn[j] = x, ot._jQueryInterface;\n    }, ot),\n    Bn = (at = \"collapse\", ct = \".\" + (lt = \"bs.collapse\"), ht = (st = e).fn[at], ut = {\n      toggle: !0,\n      parent: \"\"\n    }, ft = {\n      toggle: \"boolean\",\n      parent: \"(string|element)\"\n    }, dt = {\n      SHOW: \"show\" + ct,\n      SHOWN: \"shown\" + ct,\n      HIDE: \"hide\" + ct,\n      HIDDEN: \"hidden\" + ct,\n      CLICK_DATA_API: \"click\" + ct + \".data-api\"\n    }, gt = \"show\", _t = \"collapse\", mt = \"collapsing\", pt = \"collapsed\", vt = \"width\", yt = \"height\", Et = \".show, .collapsing\", Ct = '[data-toggle=\"collapse\"]', Tt = function () {\n      function a(e, t) {\n        this._isTransitioning = !1, this._element = e, this._config = this._getConfig(t), this._triggerArray = st.makeArray(document.querySelectorAll('[data-toggle=\"collapse\"][href=\"#' + e.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + e.id + '\"]'));\n        for (var n = [].slice.call(document.querySelectorAll(Ct)), i = 0, r = n.length; i < r; i++) {\n          var o = n[i],\n            s = Fn.getSelectorFromElement(o),\n            a = [].slice.call(document.querySelectorAll(s)).filter(function (t) {\n              return t === e;\n            });\n          null !== s && 0 < a.length && (this._selector = s, this._triggerArray.push(o));\n        }\n        this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();\n      }\n      var t = a.prototype;\n      return t.toggle = function () {\n        st(this._element).hasClass(gt) ? this.hide() : this.show();\n      }, t.show = function () {\n        var t,\n          e,\n          n = this;\n        if (!this._isTransitioning && !st(this._element).hasClass(gt) && (this._parent && 0 === (t = [].slice.call(this._parent.querySelectorAll(Et)).filter(function (t) {\n          return t.getAttribute(\"data-parent\") === n._config.parent;\n        })).length && (t = null), !(t && (e = st(t).not(this._selector).data(lt)) && e._isTransitioning))) {\n          var i = st.Event(dt.SHOW);\n          if (st(this._element).trigger(i), !i.isDefaultPrevented()) {\n            t && (a._jQueryInterface.call(st(t).not(this._selector), \"hide\"), e || st(t).data(lt, null));\n            var r = this._getDimension();\n            st(this._element).removeClass(_t).addClass(mt), this._element.style[r] = 0, this._triggerArray.length && st(this._triggerArray).removeClass(pt).attr(\"aria-expanded\", !0), this.setTransitioning(!0);\n            var o = \"scroll\" + (r[0].toUpperCase() + r.slice(1)),\n              s = Fn.getTransitionDurationFromElement(this._element);\n            st(this._element).one(Fn.TRANSITION_END, function () {\n              st(n._element).removeClass(mt).addClass(_t).addClass(gt), n._element.style[r] = \"\", n.setTransitioning(!1), st(n._element).trigger(dt.SHOWN);\n            }).emulateTransitionEnd(s), this._element.style[r] = this._element[o] + \"px\";\n          }\n        }\n      }, t.hide = function () {\n        var t = this;\n        if (!this._isTransitioning && st(this._element).hasClass(gt)) {\n          var e = st.Event(dt.HIDE);\n          if (st(this._element).trigger(e), !e.isDefaultPrevented()) {\n            var n = this._getDimension();\n            this._element.style[n] = this._element.getBoundingClientRect()[n] + \"px\", Fn.reflow(this._element), st(this._element).addClass(mt).removeClass(_t).removeClass(gt);\n            var i = this._triggerArray.length;\n            if (0 < i) for (var r = 0; r < i; r++) {\n              var o = this._triggerArray[r],\n                s = Fn.getSelectorFromElement(o);\n              if (null !== s) st([].slice.call(document.querySelectorAll(s))).hasClass(gt) || st(o).addClass(pt).attr(\"aria-expanded\", !1);\n            }\n            this.setTransitioning(!0);\n            this._element.style[n] = \"\";\n            var a = Fn.getTransitionDurationFromElement(this._element);\n            st(this._element).one(Fn.TRANSITION_END, function () {\n              t.setTransitioning(!1), st(t._element).removeClass(mt).addClass(_t).trigger(dt.HIDDEN);\n            }).emulateTransitionEnd(a);\n          }\n        }\n      }, t.setTransitioning = function (t) {\n        this._isTransitioning = t;\n      }, t.dispose = function () {\n        st.removeData(this._element, lt), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;\n      }, t._getConfig = function (t) {\n        return (t = l({}, ut, t)).toggle = Boolean(t.toggle), Fn.typeCheckConfig(at, t, ft), t;\n      }, t._getDimension = function () {\n        return st(this._element).hasClass(vt) ? vt : yt;\n      }, t._getParent = function () {\n        var n = this,\n          t = null;\n        Fn.isElement(this._config.parent) ? (t = this._config.parent, \"undefined\" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = document.querySelector(this._config.parent);\n        var e = '[data-toggle=\"collapse\"][data-parent=\"' + this._config.parent + '\"]',\n          i = [].slice.call(t.querySelectorAll(e));\n        return st(i).each(function (t, e) {\n          n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);\n        }), t;\n      }, t._addAriaAndCollapsedClass = function (t, e) {\n        if (t) {\n          var n = st(t).hasClass(gt);\n          e.length && st(e).toggleClass(pt, !n).attr(\"aria-expanded\", n);\n        }\n      }, a._getTargetFromElement = function (t) {\n        var e = Fn.getSelectorFromElement(t);\n        return e ? document.querySelector(e) : null;\n      }, a._jQueryInterface = function (i) {\n        return this.each(function () {\n          var t = st(this),\n            e = t.data(lt),\n            n = l({}, ut, t.data(), \"object\" == _typeof(i) && i ? i : {});\n          if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(lt, e)), \"string\" == typeof i) {\n            if (\"undefined\" == typeof e[i]) throw new TypeError('No method named \"' + i + '\"');\n            e[i]();\n          }\n        });\n      }, s(a, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return ut;\n        }\n      }]), a;\n    }(), st(document).on(dt.CLICK_DATA_API, Ct, function (t) {\n      \"A\" === t.currentTarget.tagName && t.preventDefault();\n      var n = st(this),\n        e = Fn.getSelectorFromElement(this),\n        i = [].slice.call(document.querySelectorAll(e));\n      st(i).each(function () {\n        var t = st(this),\n          e = t.data(lt) ? \"toggle\" : n.data();\n        Tt._jQueryInterface.call(t, e);\n      });\n    }), st.fn[at] = Tt._jQueryInterface, st.fn[at].Constructor = Tt, st.fn[at].noConflict = function () {\n      return st.fn[at] = ht, Tt._jQueryInterface;\n    }, Tt),\n    Vn = (St = \"dropdown\", At = \".\" + (It = \"bs.dropdown\"), Dt = \".data-api\", wt = (bt = e).fn[St], Nt = new RegExp(\"38|40|27\"), Ot = {\n      HIDE: \"hide\" + At,\n      HIDDEN: \"hidden\" + At,\n      SHOW: \"show\" + At,\n      SHOWN: \"shown\" + At,\n      CLICK: \"click\" + At,\n      CLICK_DATA_API: \"click\" + At + Dt,\n      KEYDOWN_DATA_API: \"keydown\" + At + Dt,\n      KEYUP_DATA_API: \"keyup\" + At + Dt\n    }, kt = \"disabled\", Pt = \"show\", jt = \"dropup\", Ht = \"dropright\", Lt = \"dropleft\", Rt = \"dropdown-menu-right\", xt = \"position-static\", Wt = '[data-toggle=\"dropdown\"]', Ut = \".dropdown form\", qt = \".dropdown-menu\", Ft = \".navbar-nav\", Kt = \".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", Mt = \"top-start\", Qt = \"top-end\", Bt = \"bottom-start\", Vt = \"bottom-end\", Yt = \"right-start\", zt = \"left-start\", Jt = {\n      offset: 0,\n      flip: !0,\n      boundary: \"scrollParent\",\n      reference: \"toggle\",\n      display: \"dynamic\"\n    }, Zt = {\n      offset: \"(number|string|function)\",\n      flip: \"boolean\",\n      boundary: \"(string|element)\",\n      reference: \"(string|element)\",\n      display: \"string\"\n    }, Gt = function () {\n      function c(t, e) {\n        this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();\n      }\n      var t = c.prototype;\n      return t.toggle = function () {\n        if (!this._element.disabled && !bt(this._element).hasClass(kt)) {\n          var t = c._getParentFromElement(this._element),\n            e = bt(this._menu).hasClass(Pt);\n          if (c._clearMenus(), !e) {\n            var n = {\n                relatedTarget: this._element\n              },\n              i = bt.Event(Ot.SHOW, n);\n            if (bt(t).trigger(i), !i.isDefaultPrevented()) {\n              if (!this._inNavbar) {\n                if (\"undefined\" == typeof h) throw new TypeError(\"Bootstrap dropdown require Popper.js (https://popper.js.org)\");\n                var r = this._element;\n                \"parent\" === this._config.reference ? r = t : Fn.isElement(this._config.reference) && (r = this._config.reference, \"undefined\" != typeof this._config.reference.jquery && (r = this._config.reference[0])), \"scrollParent\" !== this._config.boundary && bt(t).addClass(xt), this._popper = new h(r, this._menu, this._getPopperConfig());\n              }\n              \"ontouchstart\" in document.documentElement && 0 === bt(t).closest(Ft).length && bt(document.body).children().on(\"mouseover\", null, bt.noop), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), bt(this._menu).toggleClass(Pt), bt(t).toggleClass(Pt).trigger(bt.Event(Ot.SHOWN, n));\n            }\n          }\n        }\n      }, t.dispose = function () {\n        bt.removeData(this._element, It), bt(this._element).off(At), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);\n      }, t.update = function () {\n        this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();\n      }, t._addEventListeners = function () {\n        var e = this;\n        bt(this._element).on(Ot.CLICK, function (t) {\n          t.preventDefault(), t.stopPropagation(), e.toggle();\n        });\n      }, t._getConfig = function (t) {\n        return t = l({}, this.constructor.Default, bt(this._element).data(), t), Fn.typeCheckConfig(St, t, this.constructor.DefaultType), t;\n      }, t._getMenuElement = function () {\n        if (!this._menu) {\n          var t = c._getParentFromElement(this._element);\n          t && (this._menu = t.querySelector(qt));\n        }\n        return this._menu;\n      }, t._getPlacement = function () {\n        var t = bt(this._element.parentNode),\n          e = Bt;\n        return t.hasClass(jt) ? (e = Mt, bt(this._menu).hasClass(Rt) && (e = Qt)) : t.hasClass(Ht) ? e = Yt : t.hasClass(Lt) ? e = zt : bt(this._menu).hasClass(Rt) && (e = Vt), e;\n      }, t._detectNavbar = function () {\n        return 0 < bt(this._element).closest(\".navbar\").length;\n      }, t._getPopperConfig = function () {\n        var e = this,\n          t = {};\n        \"function\" == typeof this._config.offset ? t.fn = function (t) {\n          return t.offsets = l({}, t.offsets, e._config.offset(t.offsets) || {}), t;\n        } : t.offset = this._config.offset;\n        var n = {\n          placement: this._getPlacement(),\n          modifiers: {\n            offset: t,\n            flip: {\n              enabled: this._config.flip\n            },\n            preventOverflow: {\n              boundariesElement: this._config.boundary\n            }\n          }\n        };\n        return \"static\" === this._config.display && (n.modifiers.applyStyle = {\n          enabled: !1\n        }), n;\n      }, c._jQueryInterface = function (e) {\n        return this.each(function () {\n          var t = bt(this).data(It);\n          if (t || (t = new c(this, \"object\" == _typeof(e) ? e : null), bt(this).data(It, t)), \"string\" == typeof e) {\n            if (\"undefined\" == typeof t[e]) throw new TypeError('No method named \"' + e + '\"');\n            t[e]();\n          }\n        });\n      }, c._clearMenus = function (t) {\n        if (!t || 3 !== t.which && (\"keyup\" !== t.type || 9 === t.which)) for (var e = [].slice.call(document.querySelectorAll(Wt)), n = 0, i = e.length; n < i; n++) {\n          var r = c._getParentFromElement(e[n]),\n            o = bt(e[n]).data(It),\n            s = {\n              relatedTarget: e[n]\n            };\n          if (t && \"click\" === t.type && (s.clickEvent = t), o) {\n            var a = o._menu;\n            if (bt(r).hasClass(Pt) && !(t && (\"click\" === t.type && /input|textarea/i.test(t.target.tagName) || \"keyup\" === t.type && 9 === t.which) && bt.contains(r, t.target))) {\n              var l = bt.Event(Ot.HIDE, s);\n              bt(r).trigger(l), l.isDefaultPrevented() || (\"ontouchstart\" in document.documentElement && bt(document.body).children().off(\"mouseover\", null, bt.noop), e[n].setAttribute(\"aria-expanded\", \"false\"), bt(a).removeClass(Pt), bt(r).removeClass(Pt).trigger(bt.Event(Ot.HIDDEN, s)));\n            }\n          }\n        }\n      }, c._getParentFromElement = function (t) {\n        var e,\n          n = Fn.getSelectorFromElement(t);\n        return n && (e = document.querySelector(n)), e || t.parentNode;\n      }, c._dataApiKeydownHandler = function (t) {\n        if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || bt(t.target).closest(qt).length)) : Nt.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !bt(this).hasClass(kt))) {\n          var e = c._getParentFromElement(this),\n            n = bt(e).hasClass(Pt);\n          if ((n || 27 === t.which && 32 === t.which) && (!n || 27 !== t.which && 32 !== t.which)) {\n            var i = [].slice.call(e.querySelectorAll(Kt));\n            if (0 !== i.length) {\n              var r = i.indexOf(t.target);\n              38 === t.which && 0 < r && r--, 40 === t.which && r < i.length - 1 && r++, r < 0 && (r = 0), i[r].focus();\n            }\n          } else {\n            if (27 === t.which) {\n              var o = e.querySelector(Wt);\n              bt(o).trigger(\"focus\");\n            }\n            bt(this).trigger(\"click\");\n          }\n        }\n      }, s(c, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return Jt;\n        }\n      }, {\n        key: \"DefaultType\",\n        get: function get() {\n          return Zt;\n        }\n      }]), c;\n    }(), bt(document).on(Ot.KEYDOWN_DATA_API, Wt, Gt._dataApiKeydownHandler).on(Ot.KEYDOWN_DATA_API, qt, Gt._dataApiKeydownHandler).on(Ot.CLICK_DATA_API + \" \" + Ot.KEYUP_DATA_API, Gt._clearMenus).on(Ot.CLICK_DATA_API, Wt, function (t) {\n      t.preventDefault(), t.stopPropagation(), Gt._jQueryInterface.call(bt(this), \"toggle\");\n    }).on(Ot.CLICK_DATA_API, Ut, function (t) {\n      t.stopPropagation();\n    }), bt.fn[St] = Gt._jQueryInterface, bt.fn[St].Constructor = Gt, bt.fn[St].noConflict = function () {\n      return bt.fn[St] = wt, Gt._jQueryInterface;\n    }, Gt),\n    Yn = (Xt = \"modal\", ee = \".\" + (te = \"bs.modal\"), ne = ($t = e).fn[Xt], ie = {\n      backdrop: !0,\n      keyboard: !0,\n      focus: !0,\n      show: !0\n    }, re = {\n      backdrop: \"(boolean|string)\",\n      keyboard: \"boolean\",\n      focus: \"boolean\",\n      show: \"boolean\"\n    }, oe = {\n      HIDE: \"hide\" + ee,\n      HIDDEN: \"hidden\" + ee,\n      SHOW: \"show\" + ee,\n      SHOWN: \"shown\" + ee,\n      FOCUSIN: \"focusin\" + ee,\n      RESIZE: \"resize\" + ee,\n      CLICK_DISMISS: \"click.dismiss\" + ee,\n      KEYDOWN_DISMISS: \"keydown.dismiss\" + ee,\n      MOUSEUP_DISMISS: \"mouseup.dismiss\" + ee,\n      MOUSEDOWN_DISMISS: \"mousedown.dismiss\" + ee,\n      CLICK_DATA_API: \"click\" + ee + \".data-api\"\n    }, se = \"modal-scrollbar-measure\", ae = \"modal-backdrop\", le = \"modal-open\", ce = \"fade\", he = \"show\", ue = \".modal-dialog\", fe = '[data-toggle=\"modal\"]', de = '[data-dismiss=\"modal\"]', ge = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", _e = \".sticky-top\", me = function () {\n      function r(t, e) {\n        this._config = this._getConfig(e), this._element = t, this._dialog = t.querySelector(ue), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._scrollbarWidth = 0;\n      }\n      var t = r.prototype;\n      return t.toggle = function (t) {\n        return this._isShown ? this.hide() : this.show(t);\n      }, t.show = function (t) {\n        var e = this;\n        if (!this._isTransitioning && !this._isShown) {\n          $t(this._element).hasClass(ce) && (this._isTransitioning = !0);\n          var n = $t.Event(oe.SHOW, {\n            relatedTarget: t\n          });\n          $t(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), $t(document.body).addClass(le), this._setEscapeEvent(), this._setResizeEvent(), $t(this._element).on(oe.CLICK_DISMISS, de, function (t) {\n            return e.hide(t);\n          }), $t(this._dialog).on(oe.MOUSEDOWN_DISMISS, function () {\n            $t(e._element).one(oe.MOUSEUP_DISMISS, function (t) {\n              $t(t.target).is(e._element) && (e._ignoreBackdropClick = !0);\n            });\n          }), this._showBackdrop(function () {\n            return e._showElement(t);\n          }));\n        }\n      }, t.hide = function (t) {\n        var e = this;\n        if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {\n          var n = $t.Event(oe.HIDE);\n          if ($t(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {\n            this._isShown = !1;\n            var i = $t(this._element).hasClass(ce);\n            if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), $t(document).off(oe.FOCUSIN), $t(this._element).removeClass(he), $t(this._element).off(oe.CLICK_DISMISS), $t(this._dialog).off(oe.MOUSEDOWN_DISMISS), i) {\n              var r = Fn.getTransitionDurationFromElement(this._element);\n              $t(this._element).one(Fn.TRANSITION_END, function (t) {\n                return e._hideModal(t);\n              }).emulateTransitionEnd(r);\n            } else this._hideModal();\n          }\n        }\n      }, t.dispose = function () {\n        $t.removeData(this._element, te), $t(window, document, this._element, this._backdrop).off(ee), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;\n      }, t.handleUpdate = function () {\n        this._adjustDialog();\n      }, t._getConfig = function (t) {\n        return t = l({}, ie, t), Fn.typeCheckConfig(Xt, t, re), t;\n      }, t._showElement = function (t) {\n        var e = this,\n          n = $t(this._element).hasClass(ce);\n        this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.scrollTop = 0, n && Fn.reflow(this._element), $t(this._element).addClass(he), this._config.focus && this._enforceFocus();\n        var i = $t.Event(oe.SHOWN, {\n            relatedTarget: t\n          }),\n          r = function r() {\n            e._config.focus && e._element.focus(), e._isTransitioning = !1, $t(e._element).trigger(i);\n          };\n        if (n) {\n          var o = Fn.getTransitionDurationFromElement(this._element);\n          $t(this._dialog).one(Fn.TRANSITION_END, r).emulateTransitionEnd(o);\n        } else r();\n      }, t._enforceFocus = function () {\n        var e = this;\n        $t(document).off(oe.FOCUSIN).on(oe.FOCUSIN, function (t) {\n          document !== t.target && e._element !== t.target && 0 === $t(e._element).has(t.target).length && e._element.focus();\n        });\n      }, t._setEscapeEvent = function () {\n        var e = this;\n        this._isShown && this._config.keyboard ? $t(this._element).on(oe.KEYDOWN_DISMISS, function (t) {\n          27 === t.which && (t.preventDefault(), e.hide());\n        }) : this._isShown || $t(this._element).off(oe.KEYDOWN_DISMISS);\n      }, t._setResizeEvent = function () {\n        var e = this;\n        this._isShown ? $t(window).on(oe.RESIZE, function (t) {\n          return e.handleUpdate(t);\n        }) : $t(window).off(oe.RESIZE);\n      }, t._hideModal = function () {\n        var t = this;\n        this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._isTransitioning = !1, this._showBackdrop(function () {\n          $t(document.body).removeClass(le), t._resetAdjustments(), t._resetScrollbar(), $t(t._element).trigger(oe.HIDDEN);\n        });\n      }, t._removeBackdrop = function () {\n        this._backdrop && ($t(this._backdrop).remove(), this._backdrop = null);\n      }, t._showBackdrop = function (t) {\n        var e = this,\n          n = $t(this._element).hasClass(ce) ? ce : \"\";\n        if (this._isShown && this._config.backdrop) {\n          if (this._backdrop = document.createElement(\"div\"), this._backdrop.className = ae, n && this._backdrop.classList.add(n), $t(this._backdrop).appendTo(document.body), $t(this._element).on(oe.CLICK_DISMISS, function (t) {\n            e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && (\"static\" === e._config.backdrop ? e._element.focus() : e.hide());\n          }), n && Fn.reflow(this._backdrop), $t(this._backdrop).addClass(he), !t) return;\n          if (!n) return void t();\n          var i = Fn.getTransitionDurationFromElement(this._backdrop);\n          $t(this._backdrop).one(Fn.TRANSITION_END, t).emulateTransitionEnd(i);\n        } else if (!this._isShown && this._backdrop) {\n          $t(this._backdrop).removeClass(he);\n          var r = function r() {\n            e._removeBackdrop(), t && t();\n          };\n          if ($t(this._element).hasClass(ce)) {\n            var o = Fn.getTransitionDurationFromElement(this._backdrop);\n            $t(this._backdrop).one(Fn.TRANSITION_END, r).emulateTransitionEnd(o);\n          } else r();\n        } else t && t();\n      }, t._adjustDialog = function () {\n        var t = this._element.scrollHeight > document.documentElement.clientHeight;\n        !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + \"px\"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + \"px\");\n      }, t._resetAdjustments = function () {\n        this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n      }, t._checkScrollbar = function () {\n        var t = document.body.getBoundingClientRect();\n        this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();\n      }, t._setScrollbar = function () {\n        var r = this;\n        if (this._isBodyOverflowing) {\n          var t = [].slice.call(document.querySelectorAll(ge)),\n            e = [].slice.call(document.querySelectorAll(_e));\n          $t(t).each(function (t, e) {\n            var n = e.style.paddingRight,\n              i = $t(e).css(\"padding-right\");\n            $t(e).data(\"padding-right\", n).css(\"padding-right\", parseFloat(i) + r._scrollbarWidth + \"px\");\n          }), $t(e).each(function (t, e) {\n            var n = e.style.marginRight,\n              i = $t(e).css(\"margin-right\");\n            $t(e).data(\"margin-right\", n).css(\"margin-right\", parseFloat(i) - r._scrollbarWidth + \"px\");\n          });\n          var n = document.body.style.paddingRight,\n            i = $t(document.body).css(\"padding-right\");\n          $t(document.body).data(\"padding-right\", n).css(\"padding-right\", parseFloat(i) + this._scrollbarWidth + \"px\");\n        }\n      }, t._resetScrollbar = function () {\n        var t = [].slice.call(document.querySelectorAll(ge));\n        $t(t).each(function (t, e) {\n          var n = $t(e).data(\"padding-right\");\n          $t(e).removeData(\"padding-right\"), e.style.paddingRight = n || \"\";\n        });\n        var e = [].slice.call(document.querySelectorAll(\"\" + _e));\n        $t(e).each(function (t, e) {\n          var n = $t(e).data(\"margin-right\");\n          \"undefined\" != typeof n && $t(e).css(\"margin-right\", n).removeData(\"margin-right\");\n        });\n        var n = $t(document.body).data(\"padding-right\");\n        $t(document.body).removeData(\"padding-right\"), document.body.style.paddingRight = n || \"\";\n      }, t._getScrollbarWidth = function () {\n        var t = document.createElement(\"div\");\n        t.className = se, document.body.appendChild(t);\n        var e = t.getBoundingClientRect().width - t.clientWidth;\n        return document.body.removeChild(t), e;\n      }, r._jQueryInterface = function (n, i) {\n        return this.each(function () {\n          var t = $t(this).data(te),\n            e = l({}, ie, $t(this).data(), \"object\" == _typeof(n) && n ? n : {});\n          if (t || (t = new r(this, e), $t(this).data(te, t)), \"string\" == typeof n) {\n            if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n            t[n](i);\n          } else e.show && t.show(i);\n        });\n      }, s(r, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return ie;\n        }\n      }]), r;\n    }(), $t(document).on(oe.CLICK_DATA_API, fe, function (t) {\n      var e,\n        n = this,\n        i = Fn.getSelectorFromElement(this);\n      i && (e = document.querySelector(i));\n      var r = $t(e).data(te) ? \"toggle\" : l({}, $t(e).data(), $t(this).data());\n      \"A\" !== this.tagName && \"AREA\" !== this.tagName || t.preventDefault();\n      var o = $t(e).one(oe.SHOW, function (t) {\n        t.isDefaultPrevented() || o.one(oe.HIDDEN, function () {\n          $t(n).is(\":visible\") && n.focus();\n        });\n      });\n      me._jQueryInterface.call($t(e), r, this);\n    }), $t.fn[Xt] = me._jQueryInterface, $t.fn[Xt].Constructor = me, $t.fn[Xt].noConflict = function () {\n      return $t.fn[Xt] = ne, me._jQueryInterface;\n    }, me),\n    zn = (ve = \"tooltip\", Ee = \".\" + (ye = \"bs.tooltip\"), Ce = (pe = e).fn[ve], Te = \"bs-tooltip\", be = new RegExp(\"(^|\\\\s)\" + Te + \"\\\\S+\", \"g\"), Ae = {\n      animation: !0,\n      template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n      trigger: \"hover focus\",\n      title: \"\",\n      delay: 0,\n      html: !(Ie = {\n        AUTO: \"auto\",\n        TOP: \"top\",\n        RIGHT: \"right\",\n        BOTTOM: \"bottom\",\n        LEFT: \"left\"\n      }),\n      selector: !(Se = {\n        animation: \"boolean\",\n        template: \"string\",\n        title: \"(string|element|function)\",\n        trigger: \"string\",\n        delay: \"(number|object)\",\n        html: \"boolean\",\n        selector: \"(string|boolean)\",\n        placement: \"(string|function)\",\n        offset: \"(number|string)\",\n        container: \"(string|element|boolean)\",\n        fallbackPlacement: \"(string|array)\",\n        boundary: \"(string|element)\"\n      }),\n      placement: \"top\",\n      offset: 0,\n      container: !1,\n      fallbackPlacement: \"flip\",\n      boundary: \"scrollParent\"\n    }, we = \"out\", Ne = {\n      HIDE: \"hide\" + Ee,\n      HIDDEN: \"hidden\" + Ee,\n      SHOW: (De = \"show\") + Ee,\n      SHOWN: \"shown\" + Ee,\n      INSERTED: \"inserted\" + Ee,\n      CLICK: \"click\" + Ee,\n      FOCUSIN: \"focusin\" + Ee,\n      FOCUSOUT: \"focusout\" + Ee,\n      MOUSEENTER: \"mouseenter\" + Ee,\n      MOUSELEAVE: \"mouseleave\" + Ee\n    }, Oe = \"fade\", ke = \"show\", Pe = \".tooltip-inner\", je = \".arrow\", He = \"hover\", Le = \"focus\", Re = \"click\", xe = \"manual\", We = function () {\n      function i(t, e) {\n        if (\"undefined\" == typeof h) throw new TypeError(\"Bootstrap tooltips require Popper.js (https://popper.js.org)\");\n        this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();\n      }\n      var t = i.prototype;\n      return t.enable = function () {\n        this._isEnabled = !0;\n      }, t.disable = function () {\n        this._isEnabled = !1;\n      }, t.toggleEnabled = function () {\n        this._isEnabled = !this._isEnabled;\n      }, t.toggle = function (t) {\n        if (this._isEnabled) if (t) {\n          var e = this.constructor.DATA_KEY,\n            n = pe(t.currentTarget).data(e);\n          n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), pe(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);\n        } else {\n          if (pe(this.getTipElement()).hasClass(ke)) return void this._leave(null, this);\n          this._enter(null, this);\n        }\n      }, t.dispose = function () {\n        clearTimeout(this._timeout), pe.removeData(this.element, this.constructor.DATA_KEY), pe(this.element).off(this.constructor.EVENT_KEY), pe(this.element).closest(\".modal\").off(\"hide.bs.modal\"), this.tip && pe(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;\n      }, t.show = function () {\n        var e = this;\n        if (\"none\" === pe(this.element).css(\"display\")) throw new Error(\"Please use show on visible elements\");\n        var t = pe.Event(this.constructor.Event.SHOW);\n        if (this.isWithContent() && this._isEnabled) {\n          pe(this.element).trigger(t);\n          var n = pe.contains(this.element.ownerDocument.documentElement, this.element);\n          if (t.isDefaultPrevented() || !n) return;\n          var i = this.getTipElement(),\n            r = Fn.getUID(this.constructor.NAME);\n          i.setAttribute(\"id\", r), this.element.setAttribute(\"aria-describedby\", r), this.setContent(), this.config.animation && pe(i).addClass(Oe);\n          var o = \"function\" == typeof this.config.placement ? this.config.placement.call(this, i, this.element) : this.config.placement,\n            s = this._getAttachment(o);\n          this.addAttachmentClass(s);\n          var a = !1 === this.config.container ? document.body : pe(document).find(this.config.container);\n          pe(i).data(this.constructor.DATA_KEY, this), pe.contains(this.element.ownerDocument.documentElement, this.tip) || pe(i).appendTo(a), pe(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new h(this.element, i, {\n            placement: s,\n            modifiers: {\n              offset: {\n                offset: this.config.offset\n              },\n              flip: {\n                behavior: this.config.fallbackPlacement\n              },\n              arrow: {\n                element: je\n              },\n              preventOverflow: {\n                boundariesElement: this.config.boundary\n              }\n            },\n            onCreate: function onCreate(t) {\n              t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);\n            },\n            onUpdate: function onUpdate(t) {\n              e._handlePopperPlacementChange(t);\n            }\n          }), pe(i).addClass(ke), \"ontouchstart\" in document.documentElement && pe(document.body).children().on(\"mouseover\", null, pe.noop);\n          var l = function l() {\n            e.config.animation && e._fixTransition();\n            var t = e._hoverState;\n            e._hoverState = null, pe(e.element).trigger(e.constructor.Event.SHOWN), t === we && e._leave(null, e);\n          };\n          if (pe(this.tip).hasClass(Oe)) {\n            var c = Fn.getTransitionDurationFromElement(this.tip);\n            pe(this.tip).one(Fn.TRANSITION_END, l).emulateTransitionEnd(c);\n          } else l();\n        }\n      }, t.hide = function (t) {\n        var e = this,\n          n = this.getTipElement(),\n          i = pe.Event(this.constructor.Event.HIDE),\n          r = function r() {\n            e._hoverState !== De && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute(\"aria-describedby\"), pe(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();\n          };\n        if (pe(this.element).trigger(i), !i.isDefaultPrevented()) {\n          if (pe(n).removeClass(ke), \"ontouchstart\" in document.documentElement && pe(document.body).children().off(\"mouseover\", null, pe.noop), this._activeTrigger[Re] = !1, this._activeTrigger[Le] = !1, this._activeTrigger[He] = !1, pe(this.tip).hasClass(Oe)) {\n            var o = Fn.getTransitionDurationFromElement(n);\n            pe(n).one(Fn.TRANSITION_END, r).emulateTransitionEnd(o);\n          } else r();\n          this._hoverState = \"\";\n        }\n      }, t.update = function () {\n        null !== this._popper && this._popper.scheduleUpdate();\n      }, t.isWithContent = function () {\n        return Boolean(this.getTitle());\n      }, t.addAttachmentClass = function (t) {\n        pe(this.getTipElement()).addClass(Te + \"-\" + t);\n      }, t.getTipElement = function () {\n        return this.tip = this.tip || pe(this.config.template)[0], this.tip;\n      }, t.setContent = function () {\n        var t = this.getTipElement();\n        this.setElementContent(pe(t.querySelectorAll(Pe)), this.getTitle()), pe(t).removeClass(Oe + \" \" + ke);\n      }, t.setElementContent = function (t, e) {\n        var n = this.config.html;\n        \"object\" == _typeof(e) && (e.nodeType || e.jquery) ? n ? pe(e).parent().is(t) || t.empty().append(e) : t.text(pe(e).text()) : t[n ? \"html\" : \"text\"](e);\n      }, t.getTitle = function () {\n        var t = this.element.getAttribute(\"data-original-title\");\n        return t || (t = \"function\" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;\n      }, t._getAttachment = function (t) {\n        return Ie[t.toUpperCase()];\n      }, t._setListeners = function () {\n        var i = this;\n        this.config.trigger.split(\" \").forEach(function (t) {\n          if (\"click\" === t) pe(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (t) {\n            return i.toggle(t);\n          });else if (t !== xe) {\n            var e = t === He ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,\n              n = t === He ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;\n            pe(i.element).on(e, i.config.selector, function (t) {\n              return i._enter(t);\n            }).on(n, i.config.selector, function (t) {\n              return i._leave(t);\n            });\n          }\n          pe(i.element).closest(\".modal\").on(\"hide.bs.modal\", function () {\n            return i.hide();\n          });\n        }), this.config.selector ? this.config = l({}, this.config, {\n          trigger: \"manual\",\n          selector: \"\"\n        }) : this._fixTitle();\n      }, t._fixTitle = function () {\n        var t = _typeof(this.element.getAttribute(\"data-original-title\"));\n        (this.element.getAttribute(\"title\") || \"string\" !== t) && (this.element.setAttribute(\"data-original-title\", this.element.getAttribute(\"title\") || \"\"), this.element.setAttribute(\"title\", \"\"));\n      }, t._enter = function (t, e) {\n        var n = this.constructor.DATA_KEY;\n        (e = e || pe(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), pe(t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusin\" === t.type ? Le : He] = !0), pe(e.getTipElement()).hasClass(ke) || e._hoverState === De ? e._hoverState = De : (clearTimeout(e._timeout), e._hoverState = De, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {\n          e._hoverState === De && e.show();\n        }, e.config.delay.show) : e.show());\n      }, t._leave = function (t, e) {\n        var n = this.constructor.DATA_KEY;\n        (e = e || pe(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), pe(t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusout\" === t.type ? Le : He] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = we, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {\n          e._hoverState === we && e.hide();\n        }, e.config.delay.hide) : e.hide());\n      }, t._isWithActiveTrigger = function () {\n        for (var t in this._activeTrigger) if (this._activeTrigger[t]) return !0;\n        return !1;\n      }, t._getConfig = function (t) {\n        return \"number\" == typeof (t = l({}, this.constructor.Default, pe(this.element).data(), \"object\" == _typeof(t) && t ? t : {})).delay && (t.delay = {\n          show: t.delay,\n          hide: t.delay\n        }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), Fn.typeCheckConfig(ve, t, this.constructor.DefaultType), t;\n      }, t._getDelegateConfig = function () {\n        var t = {};\n        if (this.config) for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);\n        return t;\n      }, t._cleanTipClass = function () {\n        var t = pe(this.getTipElement()),\n          e = t.attr(\"class\").match(be);\n        null !== e && e.length && t.removeClass(e.join(\"\"));\n      }, t._handlePopperPlacementChange = function (t) {\n        var e = t.instance;\n        this.tip = e.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));\n      }, t._fixTransition = function () {\n        var t = this.getTipElement(),\n          e = this.config.animation;\n        null === t.getAttribute(\"x-placement\") && (pe(t).removeClass(Oe), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);\n      }, i._jQueryInterface = function (n) {\n        return this.each(function () {\n          var t = pe(this).data(ye),\n            e = \"object\" == _typeof(n) && n;\n          if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), pe(this).data(ye, t)), \"string\" == typeof n)) {\n            if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n            t[n]();\n          }\n        });\n      }, s(i, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return Ae;\n        }\n      }, {\n        key: \"NAME\",\n        get: function get() {\n          return ve;\n        }\n      }, {\n        key: \"DATA_KEY\",\n        get: function get() {\n          return ye;\n        }\n      }, {\n        key: \"Event\",\n        get: function get() {\n          return Ne;\n        }\n      }, {\n        key: \"EVENT_KEY\",\n        get: function get() {\n          return Ee;\n        }\n      }, {\n        key: \"DefaultType\",\n        get: function get() {\n          return Se;\n        }\n      }]), i;\n    }(), pe.fn[ve] = We._jQueryInterface, pe.fn[ve].Constructor = We, pe.fn[ve].noConflict = function () {\n      return pe.fn[ve] = Ce, We._jQueryInterface;\n    }, We),\n    Jn = (qe = \"popover\", Ke = \".\" + (Fe = \"bs.popover\"), Me = (Ue = e).fn[qe], Qe = \"bs-popover\", Be = new RegExp(\"(^|\\\\s)\" + Qe + \"\\\\S+\", \"g\"), Ve = l({}, zn.Default, {\n      placement: \"right\",\n      trigger: \"click\",\n      content: \"\",\n      template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n    }), Ye = l({}, zn.DefaultType, {\n      content: \"(string|element|function)\"\n    }), ze = \"fade\", Ze = \".popover-header\", Ge = \".popover-body\", $e = {\n      HIDE: \"hide\" + Ke,\n      HIDDEN: \"hidden\" + Ke,\n      SHOW: (Je = \"show\") + Ke,\n      SHOWN: \"shown\" + Ke,\n      INSERTED: \"inserted\" + Ke,\n      CLICK: \"click\" + Ke,\n      FOCUSIN: \"focusin\" + Ke,\n      FOCUSOUT: \"focusout\" + Ke,\n      MOUSEENTER: \"mouseenter\" + Ke,\n      MOUSELEAVE: \"mouseleave\" + Ke\n    }, Xe = function (t) {\n      var e, n;\n      function i() {\n        return t.apply(this, arguments) || this;\n      }\n      n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;\n      var r = i.prototype;\n      return r.isWithContent = function () {\n        return this.getTitle() || this._getContent();\n      }, r.addAttachmentClass = function (t) {\n        Ue(this.getTipElement()).addClass(Qe + \"-\" + t);\n      }, r.getTipElement = function () {\n        return this.tip = this.tip || Ue(this.config.template)[0], this.tip;\n      }, r.setContent = function () {\n        var t = Ue(this.getTipElement());\n        this.setElementContent(t.find(Ze), this.getTitle());\n        var e = this._getContent();\n        \"function\" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(Ge), e), t.removeClass(ze + \" \" + Je);\n      }, r._getContent = function () {\n        return this.element.getAttribute(\"data-content\") || this.config.content;\n      }, r._cleanTipClass = function () {\n        var t = Ue(this.getTipElement()),\n          e = t.attr(\"class\").match(Be);\n        null !== e && 0 < e.length && t.removeClass(e.join(\"\"));\n      }, i._jQueryInterface = function (n) {\n        return this.each(function () {\n          var t = Ue(this).data(Fe),\n            e = \"object\" == _typeof(n) ? n : null;\n          if ((t || !/destroy|hide/.test(n)) && (t || (t = new i(this, e), Ue(this).data(Fe, t)), \"string\" == typeof n)) {\n            if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n            t[n]();\n          }\n        });\n      }, s(i, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return Ve;\n        }\n      }, {\n        key: \"NAME\",\n        get: function get() {\n          return qe;\n        }\n      }, {\n        key: \"DATA_KEY\",\n        get: function get() {\n          return Fe;\n        }\n      }, {\n        key: \"Event\",\n        get: function get() {\n          return $e;\n        }\n      }, {\n        key: \"EVENT_KEY\",\n        get: function get() {\n          return Ke;\n        }\n      }, {\n        key: \"DefaultType\",\n        get: function get() {\n          return Ye;\n        }\n      }]), i;\n    }(zn), Ue.fn[qe] = Xe._jQueryInterface, Ue.fn[qe].Constructor = Xe, Ue.fn[qe].noConflict = function () {\n      return Ue.fn[qe] = Me, Xe._jQueryInterface;\n    }, Xe),\n    Zn = (en = \"scrollspy\", rn = \".\" + (nn = \"bs.scrollspy\"), on = (tn = e).fn[en], sn = {\n      offset: 10,\n      method: \"auto\",\n      target: \"\"\n    }, an = {\n      offset: \"number\",\n      method: \"string\",\n      target: \"(string|element)\"\n    }, ln = {\n      ACTIVATE: \"activate\" + rn,\n      SCROLL: \"scroll\" + rn,\n      LOAD_DATA_API: \"load\" + rn + \".data-api\"\n    }, cn = \"dropdown-item\", hn = \"active\", un = '[data-spy=\"scroll\"]', fn = \".active\", dn = \".nav, .list-group\", gn = \".nav-link\", _n = \".nav-item\", mn = \".list-group-item\", pn = \".dropdown\", vn = \".dropdown-item\", yn = \".dropdown-toggle\", En = \"offset\", Cn = \"position\", Tn = function () {\n      function n(t, e) {\n        var n = this;\n        this._element = t, this._scrollElement = \"BODY\" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + \" \" + gn + \",\" + this._config.target + \" \" + mn + \",\" + this._config.target + \" \" + vn, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, tn(this._scrollElement).on(ln.SCROLL, function (t) {\n          return n._process(t);\n        }), this.refresh(), this._process();\n      }\n      var t = n.prototype;\n      return t.refresh = function () {\n        var e = this,\n          t = this._scrollElement === this._scrollElement.window ? En : Cn,\n          r = \"auto\" === this._config.method ? t : this._config.method,\n          o = r === Cn ? this._getScrollTop() : 0;\n        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function (t) {\n          var e,\n            n = Fn.getSelectorFromElement(t);\n          if (n && (e = document.querySelector(n)), e) {\n            var i = e.getBoundingClientRect();\n            if (i.width || i.height) return [tn(e)[r]().top + o, n];\n          }\n          return null;\n        }).filter(function (t) {\n          return t;\n        }).sort(function (t, e) {\n          return t[0] - e[0];\n        }).forEach(function (t) {\n          e._offsets.push(t[0]), e._targets.push(t[1]);\n        });\n      }, t.dispose = function () {\n        tn.removeData(this._element, nn), tn(this._scrollElement).off(rn), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;\n      }, t._getConfig = function (t) {\n        if (\"string\" != typeof (t = l({}, sn, \"object\" == _typeof(t) && t ? t : {})).target) {\n          var e = tn(t.target).attr(\"id\");\n          e || (e = Fn.getUID(en), tn(t.target).attr(\"id\", e)), t.target = \"#\" + e;\n        }\n        return Fn.typeCheckConfig(en, t, an), t;\n      }, t._getScrollTop = function () {\n        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n      }, t._getScrollHeight = function () {\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n      }, t._getOffsetHeight = function () {\n        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n      }, t._process = function () {\n        var t = this._getScrollTop() + this._config.offset,\n          e = this._getScrollHeight(),\n          n = this._config.offset + e - this._getOffsetHeight();\n        if (this._scrollHeight !== e && this.refresh(), n <= t) {\n          var i = this._targets[this._targets.length - 1];\n          this._activeTarget !== i && this._activate(i);\n        } else {\n          if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();\n          for (var r = this._offsets.length; r--;) {\n            this._activeTarget !== this._targets[r] && t >= this._offsets[r] && (\"undefined\" == typeof this._offsets[r + 1] || t < this._offsets[r + 1]) && this._activate(this._targets[r]);\n          }\n        }\n      }, t._activate = function (e) {\n        this._activeTarget = e, this._clear();\n        var t = this._selector.split(\",\");\n        t = t.map(function (t) {\n          return t + '[data-target=\"' + e + '\"],' + t + '[href=\"' + e + '\"]';\n        });\n        var n = tn([].slice.call(document.querySelectorAll(t.join(\",\"))));\n        n.hasClass(cn) ? (n.closest(pn).find(yn).addClass(hn), n.addClass(hn)) : (n.addClass(hn), n.parents(dn).prev(gn + \", \" + mn).addClass(hn), n.parents(dn).prev(_n).children(gn).addClass(hn)), tn(this._scrollElement).trigger(ln.ACTIVATE, {\n          relatedTarget: e\n        });\n      }, t._clear = function () {\n        var t = [].slice.call(document.querySelectorAll(this._selector));\n        tn(t).filter(fn).removeClass(hn);\n      }, n._jQueryInterface = function (e) {\n        return this.each(function () {\n          var t = tn(this).data(nn);\n          if (t || (t = new n(this, \"object\" == _typeof(e) && e), tn(this).data(nn, t)), \"string\" == typeof e) {\n            if (\"undefined\" == typeof t[e]) throw new TypeError('No method named \"' + e + '\"');\n            t[e]();\n          }\n        });\n      }, s(n, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }, {\n        key: \"Default\",\n        get: function get() {\n          return sn;\n        }\n      }]), n;\n    }(), tn(window).on(ln.LOAD_DATA_API, function () {\n      for (var t = [].slice.call(document.querySelectorAll(un)), e = t.length; e--;) {\n        var n = tn(t[e]);\n        Tn._jQueryInterface.call(n, n.data());\n      }\n    }), tn.fn[en] = Tn._jQueryInterface, tn.fn[en].Constructor = Tn, tn.fn[en].noConflict = function () {\n      return tn.fn[en] = on, Tn._jQueryInterface;\n    }, Tn),\n    Gn = (In = \".\" + (Sn = \"bs.tab\"), An = (bn = e).fn.tab, Dn = {\n      HIDE: \"hide\" + In,\n      HIDDEN: \"hidden\" + In,\n      SHOW: \"show\" + In,\n      SHOWN: \"shown\" + In,\n      CLICK_DATA_API: \"click\" + In + \".data-api\"\n    }, wn = \"dropdown-menu\", Nn = \"active\", On = \"disabled\", kn = \"fade\", Pn = \"show\", jn = \".dropdown\", Hn = \".nav, .list-group\", Ln = \".active\", Rn = \"> li > .active\", xn = '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]', Wn = \".dropdown-toggle\", Un = \"> .dropdown-menu .active\", qn = function () {\n      function i(t) {\n        this._element = t;\n      }\n      var t = i.prototype;\n      return t.show = function () {\n        var n = this;\n        if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && bn(this._element).hasClass(Nn) || bn(this._element).hasClass(On))) {\n          var t,\n            i,\n            e = bn(this._element).closest(Hn)[0],\n            r = Fn.getSelectorFromElement(this._element);\n          if (e) {\n            var o = \"UL\" === e.nodeName ? Rn : Ln;\n            i = (i = bn.makeArray(bn(e).find(o)))[i.length - 1];\n          }\n          var s = bn.Event(Dn.HIDE, {\n              relatedTarget: this._element\n            }),\n            a = bn.Event(Dn.SHOW, {\n              relatedTarget: i\n            });\n          if (i && bn(i).trigger(s), bn(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {\n            r && (t = document.querySelector(r)), this._activate(this._element, e);\n            var l = function l() {\n              var t = bn.Event(Dn.HIDDEN, {\n                  relatedTarget: n._element\n                }),\n                e = bn.Event(Dn.SHOWN, {\n                  relatedTarget: i\n                });\n              bn(i).trigger(t), bn(n._element).trigger(e);\n            };\n            t ? this._activate(t, t.parentNode, l) : l();\n          }\n        }\n      }, t.dispose = function () {\n        bn.removeData(this._element, Sn), this._element = null;\n      }, t._activate = function (t, e, n) {\n        var i = this,\n          r = (\"UL\" === e.nodeName ? bn(e).find(Rn) : bn(e).children(Ln))[0],\n          o = n && r && bn(r).hasClass(kn),\n          s = function s() {\n            return i._transitionComplete(t, r, n);\n          };\n        if (r && o) {\n          var a = Fn.getTransitionDurationFromElement(r);\n          bn(r).one(Fn.TRANSITION_END, s).emulateTransitionEnd(a);\n        } else s();\n      }, t._transitionComplete = function (t, e, n) {\n        if (e) {\n          bn(e).removeClass(Pn + \" \" + Nn);\n          var i = bn(e.parentNode).find(Un)[0];\n          i && bn(i).removeClass(Nn), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !1);\n        }\n        if (bn(t).addClass(Nn), \"tab\" === t.getAttribute(\"role\") && t.setAttribute(\"aria-selected\", !0), Fn.reflow(t), bn(t).addClass(Pn), t.parentNode && bn(t.parentNode).hasClass(wn)) {\n          var r = bn(t).closest(jn)[0];\n          if (r) {\n            var o = [].slice.call(r.querySelectorAll(Wn));\n            bn(o).addClass(Nn);\n          }\n          t.setAttribute(\"aria-expanded\", !0);\n        }\n        n && n();\n      }, i._jQueryInterface = function (n) {\n        return this.each(function () {\n          var t = bn(this),\n            e = t.data(Sn);\n          if (e || (e = new i(this), t.data(Sn, e)), \"string\" == typeof n) {\n            if (\"undefined\" == typeof e[n]) throw new TypeError('No method named \"' + n + '\"');\n            e[n]();\n          }\n        });\n      }, s(i, null, [{\n        key: \"VERSION\",\n        get: function get() {\n          return \"4.1.3\";\n        }\n      }]), i;\n    }(), bn(document).on(Dn.CLICK_DATA_API, xn, function (t) {\n      t.preventDefault(), qn._jQueryInterface.call(bn(this), \"show\");\n    }), bn.fn.tab = qn._jQueryInterface, bn.fn.tab.Constructor = qn, bn.fn.tab.noConflict = function () {\n      return bn.fn.tab = An, qn._jQueryInterface;\n    }, qn);\n  !function (t) {\n    if (\"undefined\" == typeof t) throw new TypeError(\"Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.\");\n    var e = t.fn.jquery.split(\" \")[0].split(\".\");\n    if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error(\"Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0\");\n  }(e), t.Util = Fn, t.Alert = Kn, t.Button = Mn, t.Carousel = Qn, t.Collapse = Bn, t.Dropdown = Vn, t.Modal = Yn, t.Popover = Jn, t.Scrollspy = Zn, t.Tab = Gn, t.Tooltip = zn, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvbGFuZGluZy1wYWdlL2Jvb3RzdHJhcC5taW4uanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFVBQVNBLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO0VBQUMsUUFBUSxXQUFnQixPQUFBRSxPQUFBLENBQVBELE9BQU8sTUFBRSxXQUFXLElBQUUsUUFBYSxHQUFDRCxDQUFDLENBQUNDLE9BQU8sRUFBQ0csbUJBQU8sQ0FBQyxvREFBUSxDQUFDLEVBQUNBLG1CQUFPLENBQUMsOERBQVcsQ0FBQyxDQUFDLEdBQUMsS0FBcUMsR0FBQ0MsaUNBQU8sQ0FBQyxPQUFTLEVBQUMseUVBQVEsRUFBQyxtRkFBVyxDQUFDLG9DQUFDTCxDQUFDO0FBQUE7QUFBQTtBQUFBLGtHQUFDLEdBQUNBLENBQW1DO0FBQUEsQ0FBQyxDQUFDLElBQUksRUFBQyxVQUFTRCxDQUFDLEVBQUNDLENBQUMsRUFBQ1UsQ0FBQyxFQUFDO0VBQUMsWUFBWTs7RUFBQyxTQUFTQyxDQUFDQSxDQUFDWixDQUFDLEVBQUNDLENBQUMsRUFBQztJQUFDLEtBQUksSUFBSVksQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDWixDQUFDLENBQUNhLE1BQU0sRUFBQ0QsQ0FBQyxFQUFFLEVBQUM7TUFBQyxJQUFJRCxDQUFDLEdBQUNYLENBQUMsQ0FBQ1ksQ0FBQyxDQUFDO01BQUNELENBQUMsQ0FBQ0csVUFBVSxHQUFDSCxDQUFDLENBQUNHLFVBQVUsSUFBRSxDQUFDLENBQUMsRUFBQ0gsQ0FBQyxDQUFDSSxZQUFZLEdBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxJQUFHSixDQUFDLEtBQUdBLENBQUMsQ0FBQ0ssUUFBUSxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDbkIsQ0FBQyxFQUFDWSxDQUFDLENBQUNRLEdBQUcsRUFBQ1IsQ0FBQyxDQUFDO0lBQUE7RUFBQztFQUFDLFNBQVNTLENBQUNBLENBQUNyQixD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QUFDO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRTtJQUFDQyxFQUFFO0lBQUNDLEVBQUU7SUFBQ0MsRUFBRSxHQUFDLFVBQVN4TixDQUFDLEVBQUM7TUFBQyxJQUFJWCxDQUFDLEdBQUMsZUFBZTtNQUFDLFNBQVNELENBQUNBLENBQUNBLENBQUMsRUFBQztRQUFDLElBQUlDLENBQUMsR0FBQyxJQUFJO1VBQUNZLENBQUMsR0FBQyxDQUFDLENBQUM7UUFBQyxPQUFPRCxDQUFDLENBQUMsSUFB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QUUsRUFBQzVjLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDbkIsQ0FBQyxFQUFDLFlBQVksRUFBQztJQUFDaUMsS0FBSyxFQUFDLENBQUM7RUFBQyxDQUFDLENBQUM7QUFBQSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbGFuZGluZy1wYWdlL2Jvb3RzdHJhcC5taW4uanM/NDQyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICAqIEJvb3RzdHJhcCB2NC4xLjMgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXHJcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXHJcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG4gICovXHJcbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP2UoZXhwb3J0cyxyZXF1aXJlKFwianF1ZXJ5XCIpLHJlcXVpcmUoXCJwb3BwZXIuanNcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiLFwianF1ZXJ5XCIsXCJwb3BwZXIuanNcIl0sZSk6ZSh0LmJvb3RzdHJhcD17fSx0LmpRdWVyeSx0LlBvcHBlcil9KHRoaXMsZnVuY3Rpb24odCxlLGgpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIGk9ZVtuXTtpLmVudW1lcmFibGU9aS5lbnVtZXJhYmxlfHwhMSxpLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBpJiYoaS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsaS5rZXksaSl9fWZ1bmN0aW9uIHModCxlLG4pe3JldHVybiBlJiZpKHQucHJvdG90eXBlLGUpLG4mJmkodCxuKSx0fWZ1bmN0aW9uIGwocil7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG89bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fSxlPU9iamVjdC5rZXlzKG8pO1wiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJihlPWUuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobykuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8sdCkuZW51bWVyYWJsZX0pKSksZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlLG4saTtlPXIsaT1vW249dF0sbiBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW25dPWl9KX1yZXR1cm4gcn1lPWUmJmUuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0XCIpP2UuZGVmYXVsdDplLGg9aCYmaC5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/aC5kZWZhdWx0Omg7dmFyIHIsbixvLGEsYyx1LGYsZCxnLF8sbSxwLHYseSxFLEMsVCxiLFMsSSxBLEQsdyxOLE8sayxQLGosSCxMLFIseCxXLFUscSxGLEssTSxRLEIsVixZLHosSixaLEcsJCxYLHR0LGV0LG50LGl0LHJ0LG90LHN0LGF0LGx0LGN0LGh0LHV0LGZ0LGR0LGd0LF90LG10LHB0LHZ0LHl0LEV0LEN0LFR0LGJ0LFN0LEl0LEF0LER0LHd0LE50LE90LGt0LFB0LGp0LEh0LEx0LFJ0LHh0LFd0LFV0LHF0LEZ0LEt0LE10LFF0LEJ0LFZ0LFl0LHp0LEp0LFp0LEd0LCR0LFh0LHRlLGVlLG5lLGllLHJlLG9lLHNlLGFlLGxlLGNlLGhlLHVlLGZlLGRlLGdlLF9lLG1lLHBlLHZlLHllLEVlLENlLFRlLGJlLFNlLEllLEFlLERlLHdlLE5lLE9lLGtlLFBlLGplLEhlLExlLFJlLHhlLFdlLFVlLHFlLEZlLEtlLE1lLFFlLEJlLFZlLFllLHplLEplLFplLEdlLCRlLFhlLHRuLGVuLG5uLHJuLG9uLHNuLGFuLGxuLGNuLGhuLHVuLGZuLGRuLGduLF9uLG1uLHBuLHZuLHluLEVuLENuLFRuLGJuLFNuLEluLEFuLERuLHduLE5uLE9uLGtuLFBuLGpuLEhuLExuLFJuLHhuLFduLFVuLHFuLEZuPWZ1bmN0aW9uKGkpe3ZhciBlPVwidHJhbnNpdGlvbmVuZFwiO2Z1bmN0aW9uIHQodCl7dmFyIGU9dGhpcyxuPSExO3JldHVybiBpKHRoaXMpLm9uZShsLlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKCl7bj0hMH0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtufHxsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKGUpfSx0KSx0aGlzfXZhciBsPXtUUkFOU0lUSU9OX0VORDpcImJzVHJhbnNpdGlvbkVuZFwiLGdldFVJRDpmdW5jdGlvbih0KXtmb3IoO3QrPX5+KDFlNipNYXRoLnJhbmRvbSgpKSxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTspO3JldHVybiB0fSxnZXRTZWxlY3RvckZyb21FbGVtZW50OmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10YXJnZXRcIik7ZSYmXCIjXCIhPT1lfHwoZT10LmdldEF0dHJpYnV0ZShcImhyZWZcIil8fFwiXCIpO3RyeXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKT9lOm51bGx9Y2F0Y2godCl7cmV0dXJuIG51bGx9fSxnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudDpmdW5jdGlvbih0KXtpZighdClyZXR1cm4gMDt2YXIgZT1pKHQpLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIik7cmV0dXJuIHBhcnNlRmxvYXQoZSk/KGU9ZS5zcGxpdChcIixcIilbMF0sMWUzKnBhcnNlRmxvYXQoZSkpOjB9LHJlZmxvdzpmdW5jdGlvbih0KXtyZXR1cm4gdC5vZmZzZXRIZWlnaHR9LHRyaWdnZXJUcmFuc2l0aW9uRW5kOmZ1bmN0aW9uKHQpe2kodCkudHJpZ2dlcihlKX0sc3VwcG9ydHNUcmFuc2l0aW9uRW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oZSl9LGlzRWxlbWVudDpmdW5jdGlvbih0KXtyZXR1cm4odFswXXx8dCkubm9kZVR5cGV9LHR5cGVDaGVja0NvbmZpZzpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpIGluIG4paWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4saSkpe3ZhciByPW5baV0sbz1lW2ldLHM9byYmbC5pc0VsZW1lbnQobyk/XCJlbGVtZW50XCI6KGE9byx7fS50b1N0cmluZy5jYWxsKGEpLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpKTtpZighbmV3IFJlZ0V4cChyKS50ZXN0KHMpKXRocm93IG5ldyBFcnJvcih0LnRvVXBwZXJDYXNlKCkrJzogT3B0aW9uIFwiJytpKydcIiBwcm92aWRlZCB0eXBlIFwiJytzKydcIiBidXQgZXhwZWN0ZWQgdHlwZSBcIicrcisnXCIuJyl9dmFyIGF9fTtyZXR1cm4gaS5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZD10LGkuZXZlbnQuc3BlY2lhbFtsLlRSQU5TSVRJT05fRU5EXT17YmluZFR5cGU6ZSxkZWxlZ2F0ZVR5cGU6ZSxoYW5kbGU6ZnVuY3Rpb24odCl7aWYoaSh0LnRhcmdldCkuaXModGhpcykpcmV0dXJuIHQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0sbH0oZSksS249KG49XCJhbGVydFwiLGE9XCIuXCIrKG89XCJicy5hbGVydFwiKSxjPShyPWUpLmZuW25dLHU9e0NMT1NFOlwiY2xvc2VcIithLENMT1NFRDpcImNsb3NlZFwiK2EsQ0xJQ0tfREFUQV9BUEk6XCJjbGlja1wiK2ErXCIuZGF0YS1hcGlcIn0sZj1cImFsZXJ0XCIsZD1cImZhZGVcIixnPVwic2hvd1wiLF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBpKHQpe3RoaXMuX2VsZW1lbnQ9dH12YXIgdD1pLnByb3RvdHlwZTtyZXR1cm4gdC5jbG9zZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9lbGVtZW50O3QmJihlPXRoaXMuX2dldFJvb3RFbGVtZW50KHQpKSx0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChlKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8dGhpcy5fcmVtb3ZlRWxlbWVudChlKX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7ci5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsbyksdGhpcy5fZWxlbWVudD1udWxsfSx0Ll9nZXRSb290RWxlbWVudD1mdW5jdGlvbih0KXt2YXIgZT1Gbi5nZXRTZWxlY3RvckZyb21FbGVtZW50KHQpLG49ITE7cmV0dXJuIGUmJihuPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSkpLG58fChuPXIodCkuY2xvc2VzdChcIi5cIitmKVswXSksbn0sdC5fdHJpZ2dlckNsb3NlRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGU9ci5FdmVudCh1LkNMT1NFKTtyZXR1cm4gcih0KS50cmlnZ2VyKGUpLGV9LHQuX3JlbW92ZUVsZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztpZihyKGUpLnJlbW92ZUNsYXNzKGcpLHIoZSkuaGFzQ2xhc3MoZCkpe3ZhciB0PUZuLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGUpO3IoZSkub25lKEZuLlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKHQpe3JldHVybiBuLl9kZXN0cm95RWxlbWVudChlLHQpfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodCl9ZWxzZSB0aGlzLl9kZXN0cm95RWxlbWVudChlKX0sdC5fZGVzdHJveUVsZW1lbnQ9ZnVuY3Rpb24odCl7cih0KS5kZXRhY2goKS50cmlnZ2VyKHUuQ0xPU0VEKS5yZW1vdmUoKX0saS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1yKHRoaXMpLGU9dC5kYXRhKG8pO2V8fChlPW5ldyBpKHRoaXMpLHQuZGF0YShvLGUpKSxcImNsb3NlXCI9PT1uJiZlW25dKHRoaXMpfSl9LGkuX2hhbmRsZURpc21pc3M9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3QmJnQucHJldmVudERlZmF1bHQoKSxlLmNsb3NlKHRoaXMpfX0scyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuM1wifX1dKSxpfSgpLHIoZG9jdW1lbnQpLm9uKHUuQ0xJQ0tfREFUQV9BUEksJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXScsXy5faGFuZGxlRGlzbWlzcyhuZXcgXykpLHIuZm5bbl09Xy5falF1ZXJ5SW50ZXJmYWNlLHIuZm5bbl0uQ29uc3RydWN0b3I9XyxyLmZuW25dLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gci5mbltuXT1jLF8uX2pRdWVyeUludGVyZmFjZX0sXyksTW49KHA9XCJidXR0b25cIix5PVwiLlwiKyh2PVwiYnMuYnV0dG9uXCIpLEU9XCIuZGF0YS1hcGlcIixDPShtPWUpLmZuW3BdLFQ9XCJhY3RpdmVcIixiPVwiYnRuXCIsST0nW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsQT0nW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsRD1cImlucHV0XCIsdz1cIi5hY3RpdmVcIixOPVwiLmJ0blwiLE89e0NMSUNLX0RBVEFfQVBJOlwiY2xpY2tcIit5K0UsRk9DVVNfQkxVUl9EQVRBX0FQSTooUz1cImZvY3VzXCIpK3krRStcIiBibHVyXCIreStFfSxrPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbih0KXt0aGlzLl9lbGVtZW50PXR9dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIHQudG9nZ2xlPWZ1bmN0aW9uKCl7dmFyIHQ9ITAsZT0hMCxuPW0odGhpcy5fZWxlbWVudCkuY2xvc2VzdChBKVswXTtpZihuKXt2YXIgaT10aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoRCk7aWYoaSl7aWYoXCJyYWRpb1wiPT09aS50eXBlKWlmKGkuY2hlY2tlZCYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoVCkpdD0hMTtlbHNle3ZhciByPW4ucXVlcnlTZWxlY3Rvcih3KTtyJiZtKHIpLnJlbW92ZUNsYXNzKFQpfWlmKHQpe2lmKGkuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fG4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fGkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIil8fG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikpcmV0dXJuO2kuY2hlY2tlZD0hdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoVCksbShpKS50cmlnZ2VyKFwiY2hhbmdlXCIpfWkuZm9jdXMoKSxlPSExfX1lJiZ0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtcHJlc3NlZFwiLCF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhUKSksdCYmbSh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhUKX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7bS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsdiksdGhpcy5fZWxlbWVudD1udWxsfSxuLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PW0odGhpcykuZGF0YSh2KTt0fHwodD1uZXcgbih0aGlzKSxtKHRoaXMpLmRhdGEodix0KSksXCJ0b2dnbGVcIj09PWUmJnRbZV0oKX0pfSxzKG4sbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMS4zXCJ9fV0pLG59KCksbShkb2N1bWVudCkub24oTy5DTElDS19EQVRBX0FQSSxJLGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKTt2YXIgZT10LnRhcmdldDttKGUpLmhhc0NsYXNzKGIpfHwoZT1tKGUpLmNsb3Nlc3QoTikpLGsuX2pRdWVyeUludGVyZmFjZS5jYWxsKG0oZSksXCJ0b2dnbGVcIil9KS5vbihPLkZPQ1VTX0JMVVJfREFUQV9BUEksSSxmdW5jdGlvbih0KXt2YXIgZT1tKHQudGFyZ2V0KS5jbG9zZXN0KE4pWzBdO20oZSkudG9nZ2xlQ2xhc3MoUywvXmZvY3VzKGluKT8kLy50ZXN0KHQudHlwZSkpfSksbS5mbltwXT1rLl9qUXVlcnlJbnRlcmZhY2UsbS5mbltwXS5Db25zdHJ1Y3Rvcj1rLG0uZm5bcF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBtLmZuW3BdPUMsay5falF1ZXJ5SW50ZXJmYWNlfSxrKSxRbj0oaj1cImNhcm91c2VsXCIsTD1cIi5cIisoSD1cImJzLmNhcm91c2VsXCIpLFI9XCIuZGF0YS1hcGlcIix4PShQPWUpLmZuW2pdLFc9e2ludGVydmFsOjVlMyxrZXlib2FyZDohMCxzbGlkZTohMSxwYXVzZTpcImhvdmVyXCIsd3JhcDohMH0sVT17aW50ZXJ2YWw6XCIobnVtYmVyfGJvb2xlYW4pXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsc2xpZGU6XCIoYm9vbGVhbnxzdHJpbmcpXCIscGF1c2U6XCIoc3RyaW5nfGJvb2xlYW4pXCIsd3JhcDpcImJvb2xlYW5cIn0scT1cIm5leHRcIixGPVwicHJldlwiLEs9XCJsZWZ0XCIsTT1cInJpZ2h0XCIsUT17U0xJREU6XCJzbGlkZVwiK0wsU0xJRDpcInNsaWRcIitMLEtFWURPV046XCJrZXlkb3duXCIrTCxNT1VTRUVOVEVSOlwibW91c2VlbnRlclwiK0wsTU9VU0VMRUFWRTpcIm1vdXNlbGVhdmVcIitMLFRPVUNIRU5EOlwidG91Y2hlbmRcIitMLExPQURfREFUQV9BUEk6XCJsb2FkXCIrTCtSLENMSUNLX0RBVEFfQVBJOlwiY2xpY2tcIitMK1J9LEI9XCJjYXJvdXNlbFwiLFY9XCJhY3RpdmVcIixZPVwic2xpZGVcIix6PVwiY2Fyb3VzZWwtaXRlbS1yaWdodFwiLEo9XCJjYXJvdXNlbC1pdGVtLWxlZnRcIixaPVwiY2Fyb3VzZWwtaXRlbS1uZXh0XCIsRz1cImNhcm91c2VsLWl0ZW0tcHJldlwiLCQ9XCIuYWN0aXZlXCIsWD1cIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbVwiLHR0PVwiLmNhcm91c2VsLWl0ZW1cIixldD1cIi5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXZcIixudD1cIi5jYXJvdXNlbC1pbmRpY2F0b3JzXCIsaXQ9XCJbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXVwiLHJ0PSdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nLG90PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbyh0LGUpe3RoaXMuX2l0ZW1zPW51bGwsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl9hY3RpdmVFbGVtZW50PW51bGwsdGhpcy5faXNQYXVzZWQ9ITEsdGhpcy5faXNTbGlkaW5nPSExLHRoaXMudG91Y2hUaW1lb3V0PW51bGwsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9lbGVtZW50PVAodClbMF0sdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQ9dGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKG50KSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXZhciB0PW8ucHJvdG90eXBlO3JldHVybiB0Lm5leHQ9ZnVuY3Rpb24oKXt0aGlzLl9pc1NsaWRpbmd8fHRoaXMuX3NsaWRlKHEpfSx0Lm5leHRXaGVuVmlzaWJsZT1mdW5jdGlvbigpeyFkb2N1bWVudC5oaWRkZW4mJlAodGhpcy5fZWxlbWVudCkuaXMoXCI6dmlzaWJsZVwiKSYmXCJoaWRkZW5cIiE9PVAodGhpcy5fZWxlbWVudCkuY3NzKFwidmlzaWJpbGl0eVwiKSYmdGhpcy5uZXh0KCl9LHQucHJldj1mdW5jdGlvbigpe3RoaXMuX2lzU2xpZGluZ3x8dGhpcy5fc2xpZGUoRil9LHQucGF1c2U9ZnVuY3Rpb24odCl7dHx8KHRoaXMuX2lzUGF1c2VkPSEwKSx0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoZXQpJiYoRm4udHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCksdGhpcy5jeWNsZSghMCkpLGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLHRoaXMuX2ludGVydmFsPW51bGx9LHQuY3ljbGU9ZnVuY3Rpb24odCl7dHx8KHRoaXMuX2lzUGF1c2VkPSExKSx0aGlzLl9pbnRlcnZhbCYmKGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLHRoaXMuX2ludGVydmFsPW51bGwpLHRoaXMuX2NvbmZpZy5pbnRlcnZhbCYmIXRoaXMuX2lzUGF1c2VkJiYodGhpcy5faW50ZXJ2YWw9c2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZT90aGlzLm5leHRXaGVuVmlzaWJsZTp0aGlzLm5leHQpLmJpbmQodGhpcyksdGhpcy5fY29uZmlnLmludGVydmFsKSl9LHQudG89ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLl9hY3RpdmVFbGVtZW50PXRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihYKTt2YXIgbj10aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7aWYoISh0PnRoaXMuX2l0ZW1zLmxlbmd0aC0xfHx0PDApKWlmKHRoaXMuX2lzU2xpZGluZylQKHRoaXMuX2VsZW1lbnQpLm9uZShRLlNMSUQsZnVuY3Rpb24oKXtyZXR1cm4gZS50byh0KX0pO2Vsc2V7aWYobj09PXQpcmV0dXJuIHRoaXMucGF1c2UoKSx2b2lkIHRoaXMuY3ljbGUoKTt2YXIgaT1uPHQ/cTpGO3RoaXMuX3NsaWRlKGksdGhpcy5faXRlbXNbdF0pfX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7UCh0aGlzLl9lbGVtZW50KS5vZmYoTCksUC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsSCksdGhpcy5faXRlbXM9bnVsbCx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl9pc1BhdXNlZD1udWxsLHRoaXMuX2lzU2xpZGluZz1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pbmRpY2F0b3JzRWxlbWVudD1udWxsfSx0Ll9nZXRDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9bCh7fSxXLHQpLEZuLnR5cGVDaGVja0NvbmZpZyhqLHQsVSksdH0sdC5fYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX2NvbmZpZy5rZXlib2FyZCYmUCh0aGlzLl9lbGVtZW50KS5vbihRLktFWURPV04sZnVuY3Rpb24odCl7cmV0dXJuIGUuX2tleWRvd24odCl9KSxcImhvdmVyXCI9PT10aGlzLl9jb25maWcucGF1c2UmJihQKHRoaXMuX2VsZW1lbnQpLm9uKFEuTU9VU0VFTlRFUixmdW5jdGlvbih0KXtyZXR1cm4gZS5wYXVzZSh0KX0pLm9uKFEuTU9VU0VMRUFWRSxmdW5jdGlvbih0KXtyZXR1cm4gZS5jeWNsZSh0KX0pLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJlAodGhpcy5fZWxlbWVudCkub24oUS5UT1VDSEVORCxmdW5jdGlvbigpe2UucGF1c2UoKSxlLnRvdWNoVGltZW91dCYmY2xlYXJUaW1lb3V0KGUudG91Y2hUaW1lb3V0KSxlLnRvdWNoVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKHQpe3JldHVybiBlLmN5Y2xlKHQpfSw1MDArZS5fY29uZmlnLmludGVydmFsKX0pKX0sdC5fa2V5ZG93bj1mdW5jdGlvbih0KXtpZighL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKSlzd2l0Y2godC53aGljaCl7Y2FzZSAzNzp0LnByZXZlbnREZWZhdWx0KCksdGhpcy5wcmV2KCk7YnJlYWs7Y2FzZSAzOTp0LnByZXZlbnREZWZhdWx0KCksdGhpcy5uZXh0KCl9fSx0Ll9nZXRJdGVtSW5kZXg9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2l0ZW1zPXQmJnQucGFyZW50Tm9kZT9bXS5zbGljZS5jYWxsKHQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKHR0KSk6W10sdGhpcy5faXRlbXMuaW5kZXhPZih0KX0sdC5fZ2V0SXRlbUJ5RGlyZWN0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIG49dD09PXEsaT10PT09RixyPXRoaXMuX2dldEl0ZW1JbmRleChlKSxvPXRoaXMuX2l0ZW1zLmxlbmd0aC0xO2lmKChpJiYwPT09cnx8biYmcj09PW8pJiYhdGhpcy5fY29uZmlnLndyYXApcmV0dXJuIGU7dmFyIHM9KHIrKHQ9PT1GPy0xOjEpKSV0aGlzLl9pdGVtcy5sZW5ndGg7cmV0dXJuLTE9PT1zP3RoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aC0xXTp0aGlzLl9pdGVtc1tzXX0sdC5fdHJpZ2dlclNsaWRlRXZlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9nZXRJdGVtSW5kZXgodCksaT10aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFgpKSxyPVAuRXZlbnQoUS5TTElERSx7cmVsYXRlZFRhcmdldDp0LGRpcmVjdGlvbjplLGZyb206aSx0bzpufSk7cmV0dXJuIFAodGhpcy5fZWxlbWVudCkudHJpZ2dlcihyKSxyfSx0Ll9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50PWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KXt2YXIgZT1bXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJCkpO1AoZSkucmVtb3ZlQ2xhc3MoVik7dmFyIG49dGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KHQpXTtuJiZQKG4pLmFkZENsYXNzKFYpfX0sdC5fc2xpZGU9ZnVuY3Rpb24odCxlKXt2YXIgbixpLHIsbz10aGlzLHM9dGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFgpLGE9dGhpcy5fZ2V0SXRlbUluZGV4KHMpLGw9ZXx8cyYmdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKHQscyksYz10aGlzLl9nZXRJdGVtSW5kZXgobCksaD1Cb29sZWFuKHRoaXMuX2ludGVydmFsKTtpZih0PT09cT8obj1KLGk9WixyPUspOihuPXosaT1HLHI9TSksbCYmUChsKS5oYXNDbGFzcyhWKSl0aGlzLl9pc1NsaWRpbmc9ITE7ZWxzZSBpZighdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobCxyKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmcyYmbCl7dGhpcy5faXNTbGlkaW5nPSEwLGgmJnRoaXMucGF1c2UoKSx0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGwpO3ZhciB1PVAuRXZlbnQoUS5TTElELHtyZWxhdGVkVGFyZ2V0OmwsZGlyZWN0aW9uOnIsZnJvbTphLHRvOmN9KTtpZihQKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKFkpKXtQKGwpLmFkZENsYXNzKGkpLEZuLnJlZmxvdyhsKSxQKHMpLmFkZENsYXNzKG4pLFAobCkuYWRkQ2xhc3Mobik7dmFyIGY9Rm4uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQocyk7UChzKS5vbmUoRm4uVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXtQKGwpLnJlbW92ZUNsYXNzKG4rXCIgXCIraSkuYWRkQ2xhc3MoViksUChzKS5yZW1vdmVDbGFzcyhWK1wiIFwiK2krXCIgXCIrbiksby5faXNTbGlkaW5nPSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gUChvLl9lbGVtZW50KS50cmlnZ2VyKHUpfSwwKX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGYpfWVsc2UgUChzKS5yZW1vdmVDbGFzcyhWKSxQKGwpLmFkZENsYXNzKFYpLHRoaXMuX2lzU2xpZGluZz0hMSxQKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIodSk7aCYmdGhpcy5jeWNsZSgpfX0sby5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGkpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1QKHRoaXMpLmRhdGEoSCksZT1sKHt9LFcsUCh0aGlzKS5kYXRhKCkpO1wib2JqZWN0XCI9PXR5cGVvZiBpJiYoZT1sKHt9LGUsaSkpO3ZhciBuPVwic3RyaW5nXCI9PXR5cGVvZiBpP2k6ZS5zbGlkZTtpZih0fHwodD1uZXcgbyh0aGlzLGUpLFAodGhpcykuZGF0YShILHQpKSxcIm51bWJlclwiPT10eXBlb2YgaSl0LnRvKGkpO2Vsc2UgaWYoXCJzdHJpbmdcIj09dHlwZW9mIG4pe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0W25dKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrbisnXCInKTt0W25dKCl9ZWxzZSBlLmludGVydmFsJiYodC5wYXVzZSgpLHQuY3ljbGUoKSl9KX0sby5fZGF0YUFwaUNsaWNrSGFuZGxlcj1mdW5jdGlvbih0KXt2YXIgZT1Gbi5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO2lmKGUpe3ZhciBuPVAoZSlbMF07aWYobiYmUChuKS5oYXNDbGFzcyhCKSl7dmFyIGk9bCh7fSxQKG4pLmRhdGEoKSxQKHRoaXMpLmRhdGEoKSkscj10aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtc2xpZGUtdG9cIik7ciYmKGkuaW50ZXJ2YWw9ITEpLG8uX2pRdWVyeUludGVyZmFjZS5jYWxsKFAobiksaSksciYmUChuKS5kYXRhKEgpLnRvKHIpLHQucHJldmVudERlZmF1bHQoKX19fSxzKG8sbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMS4zXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBXfX1dKSxvfSgpLFAoZG9jdW1lbnQpLm9uKFEuQ0xJQ0tfREFUQV9BUEksaXQsb3QuX2RhdGFBcGlDbGlja0hhbmRsZXIpLFAod2luZG93KS5vbihRLkxPQURfREFUQV9BUEksZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHJ0KSksZT0wLG49dC5sZW5ndGg7ZTxuO2UrKyl7dmFyIGk9UCh0W2VdKTtvdC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoaSxpLmRhdGEoKSl9fSksUC5mbltqXT1vdC5falF1ZXJ5SW50ZXJmYWNlLFAuZm5bal0uQ29uc3RydWN0b3I9b3QsUC5mbltqXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIFAuZm5bal09eCxvdC5falF1ZXJ5SW50ZXJmYWNlfSxvdCksQm49KGF0PVwiY29sbGFwc2VcIixjdD1cIi5cIisobHQ9XCJicy5jb2xsYXBzZVwiKSxodD0oc3Q9ZSkuZm5bYXRdLHV0PXt0b2dnbGU6ITAscGFyZW50OlwiXCJ9LGZ0PXt0b2dnbGU6XCJib29sZWFuXCIscGFyZW50OlwiKHN0cmluZ3xlbGVtZW50KVwifSxkdD17U0hPVzpcInNob3dcIitjdCxTSE9XTjpcInNob3duXCIrY3QsSElERTpcImhpZGVcIitjdCxISURERU46XCJoaWRkZW5cIitjdCxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrY3QrXCIuZGF0YS1hcGlcIn0sZ3Q9XCJzaG93XCIsX3Q9XCJjb2xsYXBzZVwiLG10PVwiY29sbGFwc2luZ1wiLHB0PVwiY29sbGFwc2VkXCIsdnQ9XCJ3aWR0aFwiLHl0PVwiaGVpZ2h0XCIsRXQ9XCIuc2hvdywgLmNvbGxhcHNpbmdcIixDdD0nW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLFR0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShlLHQpe3RoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9lbGVtZW50PWUsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyh0KSx0aGlzLl90cmlnZ2VyQXJyYXk9c3QubWFrZUFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJytlLmlkKydcIl0sW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS10YXJnZXQ9XCIjJytlLmlkKydcIl0nKSk7Zm9yKHZhciBuPVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChDdCkpLGk9MCxyPW4ubGVuZ3RoO2k8cjtpKyspe3ZhciBvPW5baV0scz1Gbi5nZXRTZWxlY3RvckZyb21FbGVtZW50KG8pLGE9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1lfSk7bnVsbCE9PXMmJjA8YS5sZW5ndGgmJih0aGlzLl9zZWxlY3Rvcj1zLHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKG8pKX10aGlzLl9wYXJlbnQ9dGhpcy5fY29uZmlnLnBhcmVudD90aGlzLl9nZXRQYXJlbnQoKTpudWxsLHRoaXMuX2NvbmZpZy5wYXJlbnR8fHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LHRoaXMuX3RyaWdnZXJBcnJheSksdGhpcy5fY29uZmlnLnRvZ2dsZSYmdGhpcy50b2dnbGUoKX12YXIgdD1hLnByb3RvdHlwZTtyZXR1cm4gdC50b2dnbGU9ZnVuY3Rpb24oKXtzdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhndCk/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9LHQuc2hvdz1mdW5jdGlvbigpe3ZhciB0LGUsbj10aGlzO2lmKCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJiFzdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhndCkmJih0aGlzLl9wYXJlbnQmJjA9PT0odD1bXS5zbGljZS5jYWxsKHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKEV0KSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LmdldEF0dHJpYnV0ZShcImRhdGEtcGFyZW50XCIpPT09bi5fY29uZmlnLnBhcmVudH0pKS5sZW5ndGgmJih0PW51bGwpLCEodCYmKGU9c3QodCkubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKGx0KSkmJmUuX2lzVHJhbnNpdGlvbmluZykpKXt2YXIgaT1zdC5FdmVudChkdC5TSE9XKTtpZihzdCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGkpLCFpLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt0JiYoYS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoc3QodCkubm90KHRoaXMuX3NlbGVjdG9yKSxcImhpZGVcIiksZXx8c3QodCkuZGF0YShsdCxudWxsKSk7dmFyIHI9dGhpcy5fZ2V0RGltZW5zaW9uKCk7c3QodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoX3QpLmFkZENsYXNzKG10KSx0aGlzLl9lbGVtZW50LnN0eWxlW3JdPTAsdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCYmc3QodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhwdCkuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy5zZXRUcmFuc2l0aW9uaW5nKCEwKTt2YXIgbz1cInNjcm9sbFwiKyhyWzBdLnRvVXBwZXJDYXNlKCkrci5zbGljZSgxKSkscz1Gbi5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtzdCh0aGlzLl9lbGVtZW50KS5vbmUoRm4uVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXtzdChuLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhtdCkuYWRkQ2xhc3MoX3QpLmFkZENsYXNzKGd0KSxuLl9lbGVtZW50LnN0eWxlW3JdPVwiXCIsbi5zZXRUcmFuc2l0aW9uaW5nKCExKSxzdChuLl9lbGVtZW50KS50cmlnZ2VyKGR0LlNIT1dOKX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHMpLHRoaXMuX2VsZW1lbnQuc3R5bGVbcl09dGhpcy5fZWxlbWVudFtvXStcInB4XCJ9fX0sdC5oaWRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiZzdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhndCkpe3ZhciBlPXN0LkV2ZW50KGR0LkhJREUpO2lmKHN0KHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoZSksIWUuaXNEZWZhdWx0UHJldmVudGVkKCkpe3ZhciBuPXRoaXMuX2dldERpbWVuc2lvbigpO3RoaXMuX2VsZW1lbnQuc3R5bGVbbl09dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtuXStcInB4XCIsRm4ucmVmbG93KHRoaXMuX2VsZW1lbnQpLHN0KHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKG10KS5yZW1vdmVDbGFzcyhfdCkucmVtb3ZlQ2xhc3MoZ3QpO3ZhciBpPXRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7aWYoMDxpKWZvcih2YXIgcj0wO3I8aTtyKyspe3ZhciBvPXRoaXMuX3RyaWdnZXJBcnJheVtyXSxzPUZuLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQobyk7aWYobnVsbCE9PXMpc3QoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpKSkuaGFzQ2xhc3MoZ3QpfHxzdChvKS5hZGRDbGFzcyhwdCkuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMSl9dGhpcy5zZXRUcmFuc2l0aW9uaW5nKCEwKTt0aGlzLl9lbGVtZW50LnN0eWxlW25dPVwiXCI7dmFyIGE9Rm4uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7c3QodGhpcy5fZWxlbWVudCkub25lKEZuLlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKCl7dC5zZXRUcmFuc2l0aW9uaW5nKCExKSxzdCh0Ll9lbGVtZW50KS5yZW1vdmVDbGFzcyhtdCkuYWRkQ2xhc3MoX3QpLnRyaWdnZXIoZHQuSElEREVOKX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGEpfX19LHQuc2V0VHJhbnNpdGlvbmluZz1mdW5jdGlvbih0KXt0aGlzLl9pc1RyYW5zaXRpb25pbmc9dH0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7c3QucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LGx0KSx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9wYXJlbnQ9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fdHJpZ2dlckFycmF5PW51bGwsdGhpcy5faXNUcmFuc2l0aW9uaW5nPW51bGx9LHQuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4odD1sKHt9LHV0LHQpKS50b2dnbGU9Qm9vbGVhbih0LnRvZ2dsZSksRm4udHlwZUNoZWNrQ29uZmlnKGF0LHQsZnQpLHR9LHQuX2dldERpbWVuc2lvbj1mdW5jdGlvbigpe3JldHVybiBzdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyh2dCk/dnQ6eXR9LHQuX2dldFBhcmVudD1mdW5jdGlvbigpe3ZhciBuPXRoaXMsdD1udWxsO0ZuLmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KT8odD10aGlzLl9jb25maWcucGFyZW50LFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSYmKHQ9dGhpcy5fY29uZmlnLnBhcmVudFswXSkpOnQ9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucGFyZW50KTt2YXIgZT0nW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInK3RoaXMuX2NvbmZpZy5wYXJlbnQrJ1wiXScsaT1bXS5zbGljZS5jYWxsKHQucXVlcnlTZWxlY3RvckFsbChlKSk7cmV0dXJuIHN0KGkpLmVhY2goZnVuY3Rpb24odCxlKXtuLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoYS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZSksW2VdKX0pLHR9LHQuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcz1mdW5jdGlvbih0LGUpe2lmKHQpe3ZhciBuPXN0KHQpLmhhc0NsYXNzKGd0KTtlLmxlbmd0aCYmc3QoZSkudG9nZ2xlQ2xhc3MocHQsIW4pLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsbil9fSxhLl9nZXRUYXJnZXRGcm9tRWxlbWVudD1mdW5jdGlvbih0KXt2YXIgZT1Gbi5nZXRTZWxlY3RvckZyb21FbGVtZW50KHQpO3JldHVybiBlP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk6bnVsbH0sYS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGkpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1zdCh0aGlzKSxlPXQuZGF0YShsdCksbj1sKHt9LHV0LHQuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiBpJiZpP2k6e30pO2lmKCFlJiZuLnRvZ2dsZSYmL3Nob3d8aGlkZS8udGVzdChpKSYmKG4udG9nZ2xlPSExKSxlfHwoZT1uZXcgYSh0aGlzLG4pLHQuZGF0YShsdCxlKSksXCJzdHJpbmdcIj09dHlwZW9mIGkpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlW2ldKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicraSsnXCInKTtlW2ldKCl9fSl9LHMoYSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4xLjNcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV0fX1dKSxhfSgpLHN0KGRvY3VtZW50KS5vbihkdC5DTElDS19EQVRBX0FQSSxDdCxmdW5jdGlvbih0KXtcIkFcIj09PXQuY3VycmVudFRhcmdldC50YWdOYW1lJiZ0LnByZXZlbnREZWZhdWx0KCk7dmFyIG49c3QodGhpcyksZT1Gbi5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpLGk9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGUpKTtzdChpKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9c3QodGhpcyksZT10LmRhdGEobHQpP1widG9nZ2xlXCI6bi5kYXRhKCk7VHQuX2pRdWVyeUludGVyZmFjZS5jYWxsKHQsZSl9KX0pLHN0LmZuW2F0XT1UdC5falF1ZXJ5SW50ZXJmYWNlLHN0LmZuW2F0XS5Db25zdHJ1Y3Rvcj1UdCxzdC5mblthdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBzdC5mblthdF09aHQsVHQuX2pRdWVyeUludGVyZmFjZX0sVHQpLFZuPShTdD1cImRyb3Bkb3duXCIsQXQ9XCIuXCIrKEl0PVwiYnMuZHJvcGRvd25cIiksRHQ9XCIuZGF0YS1hcGlcIix3dD0oYnQ9ZSkuZm5bU3RdLE50PW5ldyBSZWdFeHAoXCIzOHw0MHwyN1wiKSxPdD17SElERTpcImhpZGVcIitBdCxISURERU46XCJoaWRkZW5cIitBdCxTSE9XOlwic2hvd1wiK0F0LFNIT1dOOlwic2hvd25cIitBdCxDTElDSzpcImNsaWNrXCIrQXQsQ0xJQ0tfREFUQV9BUEk6XCJjbGlja1wiK0F0K0R0LEtFWURPV05fREFUQV9BUEk6XCJrZXlkb3duXCIrQXQrRHQsS0VZVVBfREFUQV9BUEk6XCJrZXl1cFwiK0F0K0R0fSxrdD1cImRpc2FibGVkXCIsUHQ9XCJzaG93XCIsanQ9XCJkcm9wdXBcIixIdD1cImRyb3ByaWdodFwiLEx0PVwiZHJvcGxlZnRcIixSdD1cImRyb3Bkb3duLW1lbnUtcmlnaHRcIix4dD1cInBvc2l0aW9uLXN0YXRpY1wiLFd0PSdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsVXQ9XCIuZHJvcGRvd24gZm9ybVwiLHF0PVwiLmRyb3Bkb3duLW1lbnVcIixGdD1cIi5uYXZiYXItbmF2XCIsS3Q9XCIuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKVwiLE10PVwidG9wLXN0YXJ0XCIsUXQ9XCJ0b3AtZW5kXCIsQnQ9XCJib3R0b20tc3RhcnRcIixWdD1cImJvdHRvbS1lbmRcIixZdD1cInJpZ2h0LXN0YXJ0XCIsenQ9XCJsZWZ0LXN0YXJ0XCIsSnQ9e29mZnNldDowLGZsaXA6ITAsYm91bmRhcnk6XCJzY3JvbGxQYXJlbnRcIixyZWZlcmVuY2U6XCJ0b2dnbGVcIixkaXNwbGF5OlwiZHluYW1pY1wifSxadD17b2Zmc2V0OlwiKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pXCIsZmxpcDpcImJvb2xlYW5cIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixyZWZlcmVuY2U6XCIoc3RyaW5nfGVsZW1lbnQpXCIsZGlzcGxheTpcInN0cmluZ1wifSxHdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGModCxlKXt0aGlzLl9lbGVtZW50PXQsdGhpcy5fcG9wcGVyPW51bGwsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9tZW51PXRoaXMuX2dldE1lbnVFbGVtZW50KCksdGhpcy5faW5OYXZiYXI9dGhpcy5fZGV0ZWN0TmF2YmFyKCksdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKX12YXIgdD1jLnByb3RvdHlwZTtyZXR1cm4gdC50b2dnbGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZWxlbWVudC5kaXNhYmxlZCYmIWJ0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGt0KSl7dmFyIHQ9Yy5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCksZT1idCh0aGlzLl9tZW51KS5oYXNDbGFzcyhQdCk7aWYoYy5fY2xlYXJNZW51cygpLCFlKXt2YXIgbj17cmVsYXRlZFRhcmdldDp0aGlzLl9lbGVtZW50fSxpPWJ0LkV2ZW50KE90LlNIT1csbik7aWYoYnQodCkudHJpZ2dlcihpKSwhaS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7aWYoIXRoaXMuX2luTmF2YmFyKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgaCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO3ZhciByPXRoaXMuX2VsZW1lbnQ7XCJwYXJlbnRcIj09PXRoaXMuX2NvbmZpZy5yZWZlcmVuY2U/cj10OkZuLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSYmKHI9dGhpcy5fY29uZmlnLnJlZmVyZW5jZSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkmJihyPXRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF0pKSxcInNjcm9sbFBhcmVudFwiIT09dGhpcy5fY29uZmlnLmJvdW5kYXJ5JiZidCh0KS5hZGRDbGFzcyh4dCksdGhpcy5fcG9wcGVyPW5ldyBoKHIsdGhpcy5fbWVudSx0aGlzLl9nZXRQb3BwZXJDb25maWcoKSl9XCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmMD09PWJ0KHQpLmNsb3Nlc3QoRnQpLmxlbmd0aCYmYnQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbihcIm1vdXNlb3ZlclwiLG51bGwsYnQubm9vcCksdGhpcy5fZWxlbWVudC5mb2N1cygpLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCEwKSxidCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhQdCksYnQodCkudG9nZ2xlQ2xhc3MoUHQpLnRyaWdnZXIoYnQuRXZlbnQoT3QuU0hPV04sbikpfX19fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXtidC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsSXQpLGJ0KHRoaXMuX2VsZW1lbnQpLm9mZihBdCksdGhpcy5fZWxlbWVudD1udWxsLCh0aGlzLl9tZW51PW51bGwpIT09dGhpcy5fcG9wcGVyJiYodGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCl9LHQudXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5faW5OYXZiYXI9dGhpcy5fZGV0ZWN0TmF2YmFyKCksbnVsbCE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCl9LHQuX2FkZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztidCh0aGlzLl9lbGVtZW50KS5vbihPdC5DTElDSyxmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxlLnRvZ2dsZSgpfSl9LHQuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4gdD1sKHt9LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxidCh0aGlzLl9lbGVtZW50KS5kYXRhKCksdCksRm4udHlwZUNoZWNrQ29uZmlnKFN0LHQsdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksdH0sdC5fZ2V0TWVudUVsZW1lbnQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fbWVudSl7dmFyIHQ9Yy5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7dCYmKHRoaXMuX21lbnU9dC5xdWVyeVNlbGVjdG9yKHF0KSl9cmV0dXJuIHRoaXMuX21lbnV9LHQuX2dldFBsYWNlbWVudD1mdW5jdGlvbigpe3ZhciB0PWJ0KHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSksZT1CdDtyZXR1cm4gdC5oYXNDbGFzcyhqdCk/KGU9TXQsYnQodGhpcy5fbWVudSkuaGFzQ2xhc3MoUnQpJiYoZT1RdCkpOnQuaGFzQ2xhc3MoSHQpP2U9WXQ6dC5oYXNDbGFzcyhMdCk/ZT16dDpidCh0aGlzLl9tZW51KS5oYXNDbGFzcyhSdCkmJihlPVZ0KSxlfSx0Ll9kZXRlY3ROYXZiYXI9ZnVuY3Rpb24oKXtyZXR1cm4gMDxidCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFwiLm5hdmJhclwiKS5sZW5ndGh9LHQuX2dldFBvcHBlckNvbmZpZz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD17fTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0P3QuZm49ZnVuY3Rpb24odCl7cmV0dXJuIHQub2Zmc2V0cz1sKHt9LHQub2Zmc2V0cyxlLl9jb25maWcub2Zmc2V0KHQub2Zmc2V0cyl8fHt9KSx0fTp0Lm9mZnNldD10aGlzLl9jb25maWcub2Zmc2V0O3ZhciBuPXtwbGFjZW1lbnQ6dGhpcy5fZ2V0UGxhY2VtZW50KCksbW9kaWZpZXJzOntvZmZzZXQ6dCxmbGlwOntlbmFibGVkOnRoaXMuX2NvbmZpZy5mbGlwfSxwcmV2ZW50T3ZlcmZsb3c6e2JvdW5kYXJpZXNFbGVtZW50OnRoaXMuX2NvbmZpZy5ib3VuZGFyeX19fTtyZXR1cm5cInN0YXRpY1wiPT09dGhpcy5fY29uZmlnLmRpc3BsYXkmJihuLm1vZGlmaWVycy5hcHBseVN0eWxlPXtlbmFibGVkOiExfSksbn0sYy5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1idCh0aGlzKS5kYXRhKEl0KTtpZih0fHwodD1uZXcgYyh0aGlzLFwib2JqZWN0XCI9PXR5cGVvZiBlP2U6bnVsbCksYnQodGhpcykuZGF0YShJdCx0KSksXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0W2VdKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrZSsnXCInKTt0W2VdKCl9fSl9LGMuX2NsZWFyTWVudXM9ZnVuY3Rpb24odCl7aWYoIXR8fDMhPT10LndoaWNoJiYoXCJrZXl1cFwiIT09dC50eXBlfHw5PT09dC53aGljaCkpZm9yKHZhciBlPVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChXdCkpLG49MCxpPWUubGVuZ3RoO248aTtuKyspe3ZhciByPWMuX2dldFBhcmVudEZyb21FbGVtZW50KGVbbl0pLG89YnQoZVtuXSkuZGF0YShJdCkscz17cmVsYXRlZFRhcmdldDplW25dfTtpZih0JiZcImNsaWNrXCI9PT10LnR5cGUmJihzLmNsaWNrRXZlbnQ9dCksbyl7dmFyIGE9by5fbWVudTtpZihidChyKS5oYXNDbGFzcyhQdCkmJiEodCYmKFwiY2xpY2tcIj09PXQudHlwZSYmL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKXx8XCJrZXl1cFwiPT09dC50eXBlJiY5PT09dC53aGljaCkmJmJ0LmNvbnRhaW5zKHIsdC50YXJnZXQpKSl7dmFyIGw9YnQuRXZlbnQoT3QuSElERSxzKTtidChyKS50cmlnZ2VyKGwpLGwuaXNEZWZhdWx0UHJldmVudGVkKCl8fChcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZidChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZihcIm1vdXNlb3ZlclwiLG51bGwsYnQubm9vcCksZVtuXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSxidChhKS5yZW1vdmVDbGFzcyhQdCksYnQocikucmVtb3ZlQ2xhc3MoUHQpLnRyaWdnZXIoYnQuRXZlbnQoT3QuSElEREVOLHMpKSl9fX19LGMuX2dldFBhcmVudEZyb21FbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBlLG49Rm4uZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KTtyZXR1cm4gbiYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuKSksZXx8dC5wYXJlbnROb2RlfSxjLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXI9ZnVuY3Rpb24odCl7aWYoKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSk/ISgzMj09PXQud2hpY2h8fDI3IT09dC53aGljaCYmKDQwIT09dC53aGljaCYmMzghPT10LndoaWNofHxidCh0LnRhcmdldCkuY2xvc2VzdChxdCkubGVuZ3RoKSk6TnQudGVzdCh0LndoaWNoKSkmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSwhdGhpcy5kaXNhYmxlZCYmIWJ0KHRoaXMpLmhhc0NsYXNzKGt0KSkpe3ZhciBlPWMuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpLG49YnQoZSkuaGFzQ2xhc3MoUHQpO2lmKChufHwyNz09PXQud2hpY2gmJjMyPT09dC53aGljaCkmJighbnx8MjchPT10LndoaWNoJiYzMiE9PXQud2hpY2gpKXt2YXIgaT1bXS5zbGljZS5jYWxsKGUucXVlcnlTZWxlY3RvckFsbChLdCkpO2lmKDAhPT1pLmxlbmd0aCl7dmFyIHI9aS5pbmRleE9mKHQudGFyZ2V0KTszOD09PXQud2hpY2gmJjA8ciYmci0tLDQwPT09dC53aGljaCYmcjxpLmxlbmd0aC0xJiZyKysscjwwJiYocj0wKSxpW3JdLmZvY3VzKCl9fWVsc2V7aWYoMjc9PT10LndoaWNoKXt2YXIgbz1lLnF1ZXJ5U2VsZWN0b3IoV3QpO2J0KG8pLnRyaWdnZXIoXCJmb2N1c1wiKX1idCh0aGlzKS50cmlnZ2VyKFwiY2xpY2tcIil9fX0scyhjLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuM1wifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSnR9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWnR9fV0pLGN9KCksYnQoZG9jdW1lbnQpLm9uKE90LktFWURPV05fREFUQV9BUEksV3QsR3QuX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oT3QuS0VZRE9XTl9EQVRBX0FQSSxxdCxHdC5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihPdC5DTElDS19EQVRBX0FQSStcIiBcIitPdC5LRVlVUF9EQVRBX0FQSSxHdC5fY2xlYXJNZW51cykub24oT3QuQ0xJQ0tfREFUQV9BUEksV3QsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksR3QuX2pRdWVyeUludGVyZmFjZS5jYWxsKGJ0KHRoaXMpLFwidG9nZ2xlXCIpfSkub24oT3QuQ0xJQ0tfREFUQV9BUEksVXQsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKX0pLGJ0LmZuW1N0XT1HdC5falF1ZXJ5SW50ZXJmYWNlLGJ0LmZuW1N0XS5Db25zdHJ1Y3Rvcj1HdCxidC5mbltTdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBidC5mbltTdF09d3QsR3QuX2pRdWVyeUludGVyZmFjZX0sR3QpLFluPShYdD1cIm1vZGFsXCIsZWU9XCIuXCIrKHRlPVwiYnMubW9kYWxcIiksbmU9KCR0PWUpLmZuW1h0XSxpZT17YmFja2Ryb3A6ITAsa2V5Ym9hcmQ6ITAsZm9jdXM6ITAsc2hvdzohMH0scmU9e2JhY2tkcm9wOlwiKGJvb2xlYW58c3RyaW5nKVwiLGtleWJvYXJkOlwiYm9vbGVhblwiLGZvY3VzOlwiYm9vbGVhblwiLHNob3c6XCJib29sZWFuXCJ9LG9lPXtISURFOlwiaGlkZVwiK2VlLEhJRERFTjpcImhpZGRlblwiK2VlLFNIT1c6XCJzaG93XCIrZWUsU0hPV046XCJzaG93blwiK2VlLEZPQ1VTSU46XCJmb2N1c2luXCIrZWUsUkVTSVpFOlwicmVzaXplXCIrZWUsQ0xJQ0tfRElTTUlTUzpcImNsaWNrLmRpc21pc3NcIitlZSxLRVlET1dOX0RJU01JU1M6XCJrZXlkb3duLmRpc21pc3NcIitlZSxNT1VTRVVQX0RJU01JU1M6XCJtb3VzZXVwLmRpc21pc3NcIitlZSxNT1VTRURPV05fRElTTUlTUzpcIm1vdXNlZG93bi5kaXNtaXNzXCIrZWUsQ0xJQ0tfREFUQV9BUEk6XCJjbGlja1wiK2VlK1wiLmRhdGEtYXBpXCJ9LHNlPVwibW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmVcIixhZT1cIm1vZGFsLWJhY2tkcm9wXCIsbGU9XCJtb2RhbC1vcGVuXCIsY2U9XCJmYWRlXCIsaGU9XCJzaG93XCIsdWU9XCIubW9kYWwtZGlhbG9nXCIsZmU9J1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxkZT0nW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxnZT1cIi5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3BcIixfZT1cIi5zdGlja3ktdG9wXCIsbWU9ZnVuY3Rpb24oKXtmdW5jdGlvbiByKHQsZSl7dGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9lbGVtZW50PXQsdGhpcy5fZGlhbG9nPXQucXVlcnlTZWxlY3Rvcih1ZSksdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPSExLHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITEsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9MH12YXIgdD1yLnByb3RvdHlwZTtyZXR1cm4gdC50b2dnbGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2lzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KHQpfSx0LnNob3c9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiYhdGhpcy5faXNTaG93bil7JHQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoY2UpJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKTt2YXIgbj0kdC5FdmVudChvZS5TSE9XLHtyZWxhdGVkVGFyZ2V0OnR9KTskdCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKG4pLHRoaXMuX2lzU2hvd258fG4uaXNEZWZhdWx0UHJldmVudGVkKCl8fCh0aGlzLl9pc1Nob3duPSEwLHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCksdGhpcy5fc2V0U2Nyb2xsYmFyKCksdGhpcy5fYWRqdXN0RGlhbG9nKCksJHQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MobGUpLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSwkdCh0aGlzLl9lbGVtZW50KS5vbihvZS5DTElDS19ESVNNSVNTLGRlLGZ1bmN0aW9uKHQpe3JldHVybiBlLmhpZGUodCl9KSwkdCh0aGlzLl9kaWFsb2cpLm9uKG9lLk1PVVNFRE9XTl9ESVNNSVNTLGZ1bmN0aW9uKCl7JHQoZS5fZWxlbWVudCkub25lKG9lLk1PVVNFVVBfRElTTUlTUyxmdW5jdGlvbih0KXskdCh0LnRhcmdldCkuaXMoZS5fZWxlbWVudCkmJihlLl9pZ25vcmVCYWNrZHJvcENsaWNrPSEwKX0pfSksdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX3Nob3dFbGVtZW50KHQpfSkpfX0sdC5oaWRlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYodCYmdC5wcmV2ZW50RGVmYXVsdCgpLCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJnRoaXMuX2lzU2hvd24pe3ZhciBuPSR0LkV2ZW50KG9lLkhJREUpO2lmKCR0KHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIobiksdGhpcy5faXNTaG93biYmIW4uaXNEZWZhdWx0UHJldmVudGVkKCkpe3RoaXMuX2lzU2hvd249ITE7dmFyIGk9JHQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoY2UpO2lmKGkmJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSwkdChkb2N1bWVudCkub2ZmKG9lLkZPQ1VTSU4pLCR0KHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKGhlKSwkdCh0aGlzLl9lbGVtZW50KS5vZmYob2UuQ0xJQ0tfRElTTUlTUyksJHQodGhpcy5fZGlhbG9nKS5vZmYob2UuTU9VU0VET1dOX0RJU01JU1MpLGkpe3ZhciByPUZuLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpOyR0KHRoaXMuX2VsZW1lbnQpLm9uZShGbi5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbih0KXtyZXR1cm4gZS5faGlkZU1vZGFsKHQpfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQocil9ZWxzZSB0aGlzLl9oaWRlTW9kYWwoKX19fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXskdC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsdGUpLCR0KHdpbmRvdyxkb2N1bWVudCx0aGlzLl9lbGVtZW50LHRoaXMuX2JhY2tkcm9wKS5vZmYoZWUpLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl9kaWFsb2c9bnVsbCx0aGlzLl9iYWNrZHJvcD1udWxsLHRoaXMuX2lzU2hvd249bnVsbCx0aGlzLl9pc0JvZHlPdmVyZmxvd2luZz1udWxsLHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9bnVsbCx0aGlzLl9zY3JvbGxiYXJXaWR0aD1udWxsfSx0LmhhbmRsZVVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX2FkanVzdERpYWxvZygpfSx0Ll9nZXRDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9bCh7fSxpZSx0KSxGbi50eXBlQ2hlY2tDb25maWcoWHQsdCxyZSksdH0sdC5fc2hvd0VsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPSR0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGNlKTt0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFfHxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSx0aGlzLl9lbGVtZW50LnNjcm9sbFRvcD0wLG4mJkZuLnJlZmxvdyh0aGlzLl9lbGVtZW50KSwkdCh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhoZSksdGhpcy5fY29uZmlnLmZvY3VzJiZ0aGlzLl9lbmZvcmNlRm9jdXMoKTt2YXIgaT0kdC5FdmVudChvZS5TSE9XTix7cmVsYXRlZFRhcmdldDp0fSkscj1mdW5jdGlvbigpe2UuX2NvbmZpZy5mb2N1cyYmZS5fZWxlbWVudC5mb2N1cygpLGUuX2lzVHJhbnNpdGlvbmluZz0hMSwkdChlLl9lbGVtZW50KS50cmlnZ2VyKGkpfTtpZihuKXt2YXIgbz1Gbi5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTskdCh0aGlzLl9kaWFsb2cpLm9uZShGbi5UUkFOU0lUSU9OX0VORCxyKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChvKX1lbHNlIHIoKX0sdC5fZW5mb3JjZUZvY3VzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczskdChkb2N1bWVudCkub2ZmKG9lLkZPQ1VTSU4pLm9uKG9lLkZPQ1VTSU4sZnVuY3Rpb24odCl7ZG9jdW1lbnQhPT10LnRhcmdldCYmZS5fZWxlbWVudCE9PXQudGFyZ2V0JiYwPT09JHQoZS5fZWxlbWVudCkuaGFzKHQudGFyZ2V0KS5sZW5ndGgmJmUuX2VsZW1lbnQuZm9jdXMoKX0pfSx0Ll9zZXRFc2NhcGVFdmVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5faXNTaG93biYmdGhpcy5fY29uZmlnLmtleWJvYXJkPyR0KHRoaXMuX2VsZW1lbnQpLm9uKG9lLktFWURPV05fRElTTUlTUyxmdW5jdGlvbih0KXsyNz09PXQud2hpY2gmJih0LnByZXZlbnREZWZhdWx0KCksZS5oaWRlKCkpfSk6dGhpcy5faXNTaG93bnx8JHQodGhpcy5fZWxlbWVudCkub2ZmKG9lLktFWURPV05fRElTTUlTUyl9LHQuX3NldFJlc2l6ZUV2ZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9pc1Nob3duPyR0KHdpbmRvdykub24ob2UuUkVTSVpFLGZ1bmN0aW9uKHQpe3JldHVybiBlLmhhbmRsZVVwZGF0ZSh0KX0pOiR0KHdpbmRvdykub2ZmKG9lLlJFU0laRSl9LHQuX2hpZGVNb2RhbD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwhMCksdGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbigpeyR0KGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKGxlKSx0Ll9yZXNldEFkanVzdG1lbnRzKCksdC5fcmVzZXRTY3JvbGxiYXIoKSwkdCh0Ll9lbGVtZW50KS50cmlnZ2VyKG9lLkhJRERFTil9KX0sdC5fcmVtb3ZlQmFja2Ryb3A9ZnVuY3Rpb24oKXt0aGlzLl9iYWNrZHJvcCYmKCR0KHRoaXMuX2JhY2tkcm9wKS5yZW1vdmUoKSx0aGlzLl9iYWNrZHJvcD1udWxsKX0sdC5fc2hvd0JhY2tkcm9wPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj0kdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhjZSk/Y2U6XCJcIjtpZih0aGlzLl9pc1Nob3duJiZ0aGlzLl9jb25maWcuYmFja2Ryb3Ape2lmKHRoaXMuX2JhY2tkcm9wPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lPWFlLG4mJnRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQobiksJHQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpLCR0KHRoaXMuX2VsZW1lbnQpLm9uKG9lLkNMSUNLX0RJU01JU1MsZnVuY3Rpb24odCl7ZS5faWdub3JlQmFja2Ryb3BDbGljaz9lLl9pZ25vcmVCYWNrZHJvcENsaWNrPSExOnQudGFyZ2V0PT09dC5jdXJyZW50VGFyZ2V0JiYoXCJzdGF0aWNcIj09PWUuX2NvbmZpZy5iYWNrZHJvcD9lLl9lbGVtZW50LmZvY3VzKCk6ZS5oaWRlKCkpfSksbiYmRm4ucmVmbG93KHRoaXMuX2JhY2tkcm9wKSwkdCh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoaGUpLCF0KXJldHVybjtpZighbilyZXR1cm4gdm9pZCB0KCk7dmFyIGk9Rm4uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApOyR0KHRoaXMuX2JhY2tkcm9wKS5vbmUoRm4uVFJBTlNJVElPTl9FTkQsdCkuZW11bGF0ZVRyYW5zaXRpb25FbmQoaSl9ZWxzZSBpZighdGhpcy5faXNTaG93biYmdGhpcy5fYmFja2Ryb3ApeyR0KHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhoZSk7dmFyIHI9ZnVuY3Rpb24oKXtlLl9yZW1vdmVCYWNrZHJvcCgpLHQmJnQoKX07aWYoJHQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoY2UpKXt2YXIgbz1Gbi5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7JHQodGhpcy5fYmFja2Ryb3ApLm9uZShGbi5UUkFOU0lUSU9OX0VORCxyKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChvKX1lbHNlIHIoKX1lbHNlIHQmJnQoKX0sdC5fYWRqdXN0RGlhbG9nPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDshdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcmJnQmJih0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0PXRoaXMuX3Njcm9sbGJhcldpZHRoK1wicHhcIiksdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcmJiF0JiYodGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ9dGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX0sdC5fcmVzZXRBZGp1c3RtZW50cz1mdW5jdGlvbigpe3RoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9XCJcIix0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD1cIlwifSx0Ll9jaGVja1Njcm9sbGJhcj1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5faXNCb2R5T3ZlcmZsb3dpbmc9dC5sZWZ0K3QucmlnaHQ8d2luZG93LmlubmVyV2lkdGgsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9dGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKX0sdC5fc2V0U2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcztpZih0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyl7dmFyIHQ9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGdlKSksZT1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoX2UpKTskdCh0KS5lYWNoKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zdHlsZS5wYWRkaW5nUmlnaHQsaT0kdChlKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpOyR0KGUpLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIsbikuY3NzKFwicGFkZGluZy1yaWdodFwiLHBhcnNlRmxvYXQoaSkrci5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX0pLCR0KGUpLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgbj1lLnN0eWxlLm1hcmdpblJpZ2h0LGk9JHQoZSkuY3NzKFwibWFyZ2luLXJpZ2h0XCIpOyR0KGUpLmRhdGEoXCJtYXJnaW4tcmlnaHRcIixuKS5jc3MoXCJtYXJnaW4tcmlnaHRcIixwYXJzZUZsb2F0KGkpLXIuX3Njcm9sbGJhcldpZHRoK1wicHhcIil9KTt2YXIgbj1kb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCxpPSR0KGRvY3VtZW50LmJvZHkpLmNzcyhcInBhZGRpbmctcmlnaHRcIik7JHQoZG9jdW1lbnQuYm9keSkuZGF0YShcInBhZGRpbmctcmlnaHRcIixuKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIscGFyc2VGbG9hdChpKSt0aGlzLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfX0sdC5fcmVzZXRTY3JvbGxiYXI9ZnVuY3Rpb24oKXt2YXIgdD1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZ2UpKTskdCh0KS5lYWNoKGZ1bmN0aW9uKHQsZSl7dmFyIG49JHQoZSkuZGF0YShcInBhZGRpbmctcmlnaHRcIik7JHQoZSkucmVtb3ZlRGF0YShcInBhZGRpbmctcmlnaHRcIiksZS5zdHlsZS5wYWRkaW5nUmlnaHQ9bnx8XCJcIn0pO3ZhciBlPVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIlwiK19lKSk7JHQoZSkuZWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPSR0KGUpLmRhdGEoXCJtYXJnaW4tcmlnaHRcIik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4mJiR0KGUpLmNzcyhcIm1hcmdpbi1yaWdodFwiLG4pLnJlbW92ZURhdGEoXCJtYXJnaW4tcmlnaHRcIil9KTt2YXIgbj0kdChkb2N1bWVudC5ib2R5KS5kYXRhKFwicGFkZGluZy1yaWdodFwiKTskdChkb2N1bWVudC5ib2R5KS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKSxkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1ufHxcIlwifSx0Ll9nZXRTY3JvbGxiYXJXaWR0aD1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5jbGFzc05hbWU9c2UsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KTt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLXQuY2xpZW50V2lkdGg7cmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodCksZX0sci5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4saSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PSR0KHRoaXMpLmRhdGEodGUpLGU9bCh7fSxpZSwkdCh0aGlzKS5kYXRhKCksXCJvYmplY3RcIj09dHlwZW9mIG4mJm4/bjp7fSk7aWYodHx8KHQ9bmV3IHIodGhpcyxlKSwkdCh0aGlzKS5kYXRhKHRlLHQpKSxcInN0cmluZ1wiPT10eXBlb2Ygbil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oaSl9ZWxzZSBlLnNob3cmJnQuc2hvdyhpKX0pfSxzKHIsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMS4zXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBpZX19XSkscn0oKSwkdChkb2N1bWVudCkub24ob2UuQ0xJQ0tfREFUQV9BUEksZmUsZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLGk9Rm4uZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtpJiYoZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGkpKTt2YXIgcj0kdChlKS5kYXRhKHRlKT9cInRvZ2dsZVwiOmwoe30sJHQoZSkuZGF0YSgpLCR0KHRoaXMpLmRhdGEoKSk7XCJBXCIhPT10aGlzLnRhZ05hbWUmJlwiQVJFQVwiIT09dGhpcy50YWdOYW1lfHx0LnByZXZlbnREZWZhdWx0KCk7dmFyIG89JHQoZSkub25lKG9lLlNIT1csZnVuY3Rpb24odCl7dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8by5vbmUob2UuSElEREVOLGZ1bmN0aW9uKCl7JHQobikuaXMoXCI6dmlzaWJsZVwiKSYmbi5mb2N1cygpfSl9KTttZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHQoZSkscix0aGlzKX0pLCR0LmZuW1h0XT1tZS5falF1ZXJ5SW50ZXJmYWNlLCR0LmZuW1h0XS5Db25zdHJ1Y3Rvcj1tZSwkdC5mbltYdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiAkdC5mbltYdF09bmUsbWUuX2pRdWVyeUludGVyZmFjZX0sbWUpLHpuPSh2ZT1cInRvb2x0aXBcIixFZT1cIi5cIisoeWU9XCJicy50b29sdGlwXCIpLENlPShwZT1lKS5mblt2ZV0sVGU9XCJicy10b29sdGlwXCIsYmU9bmV3IFJlZ0V4cChcIihefFxcXFxzKVwiK1RlK1wiXFxcXFMrXCIsXCJnXCIpLEFlPXthbmltYXRpb246ITAsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsdHJpZ2dlcjpcImhvdmVyIGZvY3VzXCIsdGl0bGU6XCJcIixkZWxheTowLGh0bWw6IShJZT17QVVUTzpcImF1dG9cIixUT1A6XCJ0b3BcIixSSUdIVDpcInJpZ2h0XCIsQk9UVE9NOlwiYm90dG9tXCIsTEVGVDpcImxlZnRcIn0pLHNlbGVjdG9yOiEoU2U9e2FuaW1hdGlvbjpcImJvb2xlYW5cIix0ZW1wbGF0ZTpcInN0cmluZ1wiLHRpdGxlOlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwiLHRyaWdnZXI6XCJzdHJpbmdcIixkZWxheTpcIihudW1iZXJ8b2JqZWN0KVwiLGh0bWw6XCJib29sZWFuXCIsc2VsZWN0b3I6XCIoc3RyaW5nfGJvb2xlYW4pXCIscGxhY2VtZW50OlwiKHN0cmluZ3xmdW5jdGlvbilcIixvZmZzZXQ6XCIobnVtYmVyfHN0cmluZylcIixjb250YWluZXI6XCIoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbilcIixmYWxsYmFja1BsYWNlbWVudDpcIihzdHJpbmd8YXJyYXkpXCIsYm91bmRhcnk6XCIoc3RyaW5nfGVsZW1lbnQpXCJ9KSxwbGFjZW1lbnQ6XCJ0b3BcIixvZmZzZXQ6MCxjb250YWluZXI6ITEsZmFsbGJhY2tQbGFjZW1lbnQ6XCJmbGlwXCIsYm91bmRhcnk6XCJzY3JvbGxQYXJlbnRcIn0sd2U9XCJvdXRcIixOZT17SElERTpcImhpZGVcIitFZSxISURERU46XCJoaWRkZW5cIitFZSxTSE9XOihEZT1cInNob3dcIikrRWUsU0hPV046XCJzaG93blwiK0VlLElOU0VSVEVEOlwiaW5zZXJ0ZWRcIitFZSxDTElDSzpcImNsaWNrXCIrRWUsRk9DVVNJTjpcImZvY3VzaW5cIitFZSxGT0NVU09VVDpcImZvY3Vzb3V0XCIrRWUsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXJcIitFZSxNT1VTRUxFQVZFOlwibW91c2VsZWF2ZVwiK0VlfSxPZT1cImZhZGVcIixrZT1cInNob3dcIixQZT1cIi50b29sdGlwLWlubmVyXCIsamU9XCIuYXJyb3dcIixIZT1cImhvdmVyXCIsTGU9XCJmb2N1c1wiLFJlPVwiY2xpY2tcIix4ZT1cIm1hbnVhbFwiLFdlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0LGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBoKXRocm93IG5ldyBUeXBlRXJyb3IoXCJCb290c3RyYXAgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIik7dGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9dCx0aGlzLmNvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy50aXA9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKX12YXIgdD1pLnByb3RvdHlwZTtyZXR1cm4gdC5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLl9pc0VuYWJsZWQ9ITB9LHQuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuX2lzRW5hYmxlZD0hMX0sdC50b2dnbGVFbmFibGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9LHQudG9nZ2xlPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2lzRW5hYmxlZClpZih0KXt2YXIgZT10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLG49cGUodC5jdXJyZW50VGFyZ2V0KS5kYXRhKGUpO258fChuPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHQuY3VycmVudFRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKSxwZSh0LmN1cnJlbnRUYXJnZXQpLmRhdGEoZSxuKSksbi5fYWN0aXZlVHJpZ2dlci5jbGljaz0hbi5fYWN0aXZlVHJpZ2dlci5jbGljayxuLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCk/bi5fZW50ZXIobnVsbCxuKTpuLl9sZWF2ZShudWxsLG4pfWVsc2V7aWYocGUodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKGtlKSlyZXR1cm4gdm9pZCB0aGlzLl9sZWF2ZShudWxsLHRoaXMpO3RoaXMuX2VudGVyKG51bGwsdGhpcyl9fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCkscGUucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSkscGUodGhpcy5lbGVtZW50KS5vZmYodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpLHBlKHRoaXMuZWxlbWVudCkuY2xvc2VzdChcIi5tb2RhbFwiKS5vZmYoXCJoaWRlLmJzLm1vZGFsXCIpLHRoaXMudGlwJiZwZSh0aGlzLnRpcCkucmVtb3ZlKCksdGhpcy5faXNFbmFibGVkPW51bGwsdGhpcy5fdGltZW91dD1udWxsLHRoaXMuX2hvdmVyU3RhdGU9bnVsbCwodGhpcy5fYWN0aXZlVHJpZ2dlcj1udWxsKSE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9bnVsbCx0aGlzLmNvbmZpZz1udWxsLHRoaXMudGlwPW51bGx9LHQuc2hvdz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoXCJub25lXCI9PT1wZSh0aGlzLmVsZW1lbnQpLmNzcyhcImRpc3BsYXlcIikpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHNcIik7dmFyIHQ9cGUuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtpZih0aGlzLmlzV2l0aENvbnRlbnQoKSYmdGhpcy5faXNFbmFibGVkKXtwZSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodCk7dmFyIG49cGUuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHRoaXMuZWxlbWVudCk7aWYodC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8IW4pcmV0dXJuO3ZhciBpPXRoaXMuZ2V0VGlwRWxlbWVudCgpLHI9Rm4uZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7aS5zZXRBdHRyaWJ1dGUoXCJpZFwiLHIpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsciksdGhpcy5zZXRDb250ZW50KCksdGhpcy5jb25maWcuYW5pbWF0aW9uJiZwZShpKS5hZGRDbGFzcyhPZSk7dmFyIG89XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50P3RoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsaSx0aGlzLmVsZW1lbnQpOnRoaXMuY29uZmlnLnBsYWNlbWVudCxzPXRoaXMuX2dldEF0dGFjaG1lbnQobyk7dGhpcy5hZGRBdHRhY2htZW50Q2xhc3Mocyk7dmFyIGE9ITE9PT10aGlzLmNvbmZpZy5jb250YWluZXI/ZG9jdW1lbnQuYm9keTpwZShkb2N1bWVudCkuZmluZCh0aGlzLmNvbmZpZy5jb250YWluZXIpO3BlKGkpLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSx0aGlzKSxwZS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdGhpcy50aXApfHxwZShpKS5hcHBlbmRUbyhhKSxwZSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCksdGhpcy5fcG9wcGVyPW5ldyBoKHRoaXMuZWxlbWVudCxpLHtwbGFjZW1lbnQ6cyxtb2RpZmllcnM6e29mZnNldDp7b2Zmc2V0OnRoaXMuY29uZmlnLm9mZnNldH0sZmxpcDp7YmVoYXZpb3I6dGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnR9LGFycm93OntlbGVtZW50OmplfSxwcmV2ZW50T3ZlcmZsb3c6e2JvdW5kYXJpZXNFbGVtZW50OnRoaXMuY29uZmlnLmJvdW5kYXJ5fX0sb25DcmVhdGU6ZnVuY3Rpb24odCl7dC5vcmlnaW5hbFBsYWNlbWVudCE9PXQucGxhY2VtZW50JiZlLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UodCl9LG9uVXBkYXRlOmZ1bmN0aW9uKHQpe2UuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KX19KSxwZShpKS5hZGRDbGFzcyhrZSksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmcGUoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbihcIm1vdXNlb3ZlclwiLG51bGwscGUubm9vcCk7dmFyIGw9ZnVuY3Rpb24oKXtlLmNvbmZpZy5hbmltYXRpb24mJmUuX2ZpeFRyYW5zaXRpb24oKTt2YXIgdD1lLl9ob3ZlclN0YXRlO2UuX2hvdmVyU3RhdGU9bnVsbCxwZShlLmVsZW1lbnQpLnRyaWdnZXIoZS5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTiksdD09PXdlJiZlLl9sZWF2ZShudWxsLGUpfTtpZihwZSh0aGlzLnRpcCkuaGFzQ2xhc3MoT2UpKXt2YXIgYz1Gbi5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLnRpcCk7cGUodGhpcy50aXApLm9uZShGbi5UUkFOU0lUSU9OX0VORCxsKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjKX1lbHNlIGwoKX19LHQuaGlkZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy5nZXRUaXBFbGVtZW50KCksaT1wZS5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpLHI9ZnVuY3Rpb24oKXtlLl9ob3ZlclN0YXRlIT09RGUmJm4ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLGUuX2NsZWFuVGlwQ2xhc3MoKSxlLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiKSxwZShlLmVsZW1lbnQpLnRyaWdnZXIoZS5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pLG51bGwhPT1lLl9wb3BwZXImJmUuX3BvcHBlci5kZXN0cm95KCksdCYmdCgpfTtpZihwZSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaSksIWkuaXNEZWZhdWx0UHJldmVudGVkKCkpe2lmKHBlKG4pLnJlbW92ZUNsYXNzKGtlKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZwZShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZihcIm1vdXNlb3ZlclwiLG51bGwscGUubm9vcCksdGhpcy5fYWN0aXZlVHJpZ2dlcltSZV09ITEsdGhpcy5fYWN0aXZlVHJpZ2dlcltMZV09ITEsdGhpcy5fYWN0aXZlVHJpZ2dlcltIZV09ITEscGUodGhpcy50aXApLmhhc0NsYXNzKE9lKSl7dmFyIG89Rm4uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQobik7cGUobikub25lKEZuLlRSQU5TSVRJT05fRU5ELHIpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKG8pfWVsc2UgcigpO3RoaXMuX2hvdmVyU3RhdGU9XCJcIn19LHQudXBkYXRlPWZ1bmN0aW9uKCl7bnVsbCE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCl9LHQuaXNXaXRoQ29udGVudD1mdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSl9LHQuYWRkQXR0YWNobWVudENsYXNzPWZ1bmN0aW9uKHQpe3BlKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhUZStcIi1cIit0KX0sdC5nZXRUaXBFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGlwPXRoaXMudGlwfHxwZSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF0sdGhpcy50aXB9LHQuc2V0Q29udGVudD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0VGlwRWxlbWVudCgpO3RoaXMuc2V0RWxlbWVudENvbnRlbnQocGUodC5xdWVyeVNlbGVjdG9yQWxsKFBlKSksdGhpcy5nZXRUaXRsZSgpKSxwZSh0KS5yZW1vdmVDbGFzcyhPZStcIiBcIitrZSl9LHQuc2V0RWxlbWVudENvbnRlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNvbmZpZy5odG1sO1wib2JqZWN0XCI9PXR5cGVvZiBlJiYoZS5ub2RlVHlwZXx8ZS5qcXVlcnkpP24/cGUoZSkucGFyZW50KCkuaXModCl8fHQuZW1wdHkoKS5hcHBlbmQoZSk6dC50ZXh0KHBlKGUpLnRleHQoKSk6dFtuP1wiaHRtbFwiOlwidGV4dFwiXShlKX0sdC5nZXRUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpO3JldHVybiB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZT90aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcudGl0bGUpLHR9LHQuX2dldEF0dGFjaG1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIEllW3QudG9VcHBlckNhc2UoKV19LHQuX3NldExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7dGhpcy5jb25maWcudHJpZ2dlci5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbih0KXtpZihcImNsaWNrXCI9PT10KXBlKGkuZWxlbWVudCkub24oaS5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSyxpLmNvbmZpZy5zZWxlY3RvcixmdW5jdGlvbih0KXtyZXR1cm4gaS50b2dnbGUodCl9KTtlbHNlIGlmKHQhPT14ZSl7dmFyIGU9dD09PUhlP2kuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUjppLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU4sbj10PT09SGU/aS5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFOmkuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7cGUoaS5lbGVtZW50KS5vbihlLGkuY29uZmlnLnNlbGVjdG9yLGZ1bmN0aW9uKHQpe3JldHVybiBpLl9lbnRlcih0KX0pLm9uKG4saS5jb25maWcuc2VsZWN0b3IsZnVuY3Rpb24odCl7cmV0dXJuIGkuX2xlYXZlKHQpfSl9cGUoaS5lbGVtZW50KS5jbG9zZXN0KFwiLm1vZGFsXCIpLm9uKFwiaGlkZS5icy5tb2RhbFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuaGlkZSgpfSl9KSx0aGlzLmNvbmZpZy5zZWxlY3Rvcj90aGlzLmNvbmZpZz1sKHt9LHRoaXMuY29uZmlnLHt0cmlnZ2VyOlwibWFudWFsXCIsc2VsZWN0b3I6XCJcIn0pOnRoaXMuX2ZpeFRpdGxlKCl9LHQuX2ZpeFRpdGxlPWZ1bmN0aW9uKCl7dmFyIHQ9dHlwZW9mIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpOyh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIil8fFwic3RyaW5nXCIhPT10KSYmKHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpfHxcIlwiKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGl0bGVcIixcIlwiKSl9LHQuX2VudGVyPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTsoZT1lfHxwZSh0LmN1cnJlbnRUYXJnZXQpLmRhdGEobikpfHwoZT1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0LmN1cnJlbnRUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSkscGUodC5jdXJyZW50VGFyZ2V0KS5kYXRhKG4sZSkpLHQmJihlLl9hY3RpdmVUcmlnZ2VyW1wiZm9jdXNpblwiPT09dC50eXBlP0xlOkhlXT0hMCkscGUoZS5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKGtlKXx8ZS5faG92ZXJTdGF0ZT09PURlP2UuX2hvdmVyU3RhdGU9RGU6KGNsZWFyVGltZW91dChlLl90aW1lb3V0KSxlLl9ob3ZlclN0YXRlPURlLGUuY29uZmlnLmRlbGF5JiZlLmNvbmZpZy5kZWxheS5zaG93P2UuX3RpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2UuX2hvdmVyU3RhdGU9PT1EZSYmZS5zaG93KCl9LGUuY29uZmlnLmRlbGF5LnNob3cpOmUuc2hvdygpKX0sdC5fbGVhdmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZOyhlPWV8fHBlKHQuY3VycmVudFRhcmdldCkuZGF0YShuKSl8fChlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHQuY3VycmVudFRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKSxwZSh0LmN1cnJlbnRUYXJnZXQpLmRhdGEobixlKSksdCYmKGUuX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c291dFwiPT09dC50eXBlP0xlOkhlXT0hMSksZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpfHwoY2xlYXJUaW1lb3V0KGUuX3RpbWVvdXQpLGUuX2hvdmVyU3RhdGU9d2UsZS5jb25maWcuZGVsYXkmJmUuY29uZmlnLmRlbGF5LmhpZGU/ZS5fdGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5faG92ZXJTdGF0ZT09PXdlJiZlLmhpZGUoKX0sZS5jb25maWcuZGVsYXkuaGlkZSk6ZS5oaWRlKCkpfSx0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpaWYodGhpcy5fYWN0aXZlVHJpZ2dlclt0XSlyZXR1cm4hMDtyZXR1cm4hMX0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZih0PWwoe30sdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LHBlKHRoaXMuZWxlbWVudCkuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0P3Q6e30pKS5kZWxheSYmKHQuZGVsYXk9e3Nob3c6dC5kZWxheSxoaWRlOnQuZGVsYXl9KSxcIm51bWJlclwiPT10eXBlb2YgdC50aXRsZSYmKHQudGl0bGU9dC50aXRsZS50b1N0cmluZygpKSxcIm51bWJlclwiPT10eXBlb2YgdC5jb250ZW50JiYodC5jb250ZW50PXQuY29udGVudC50b1N0cmluZygpKSxGbi50eXBlQ2hlY2tDb25maWcodmUsdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSx0fSx0Ll9nZXREZWxlZ2F0ZUNvbmZpZz1mdW5jdGlvbigpe3ZhciB0PXt9O2lmKHRoaXMuY29uZmlnKWZvcih2YXIgZSBpbiB0aGlzLmNvbmZpZyl0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRbZV0hPT10aGlzLmNvbmZpZ1tlXSYmKHRbZV09dGhpcy5jb25maWdbZV0pO3JldHVybiB0fSx0Ll9jbGVhblRpcENsYXNzPWZ1bmN0aW9uKCl7dmFyIHQ9cGUodGhpcy5nZXRUaXBFbGVtZW50KCkpLGU9dC5hdHRyKFwiY2xhc3NcIikubWF0Y2goYmUpO251bGwhPT1lJiZlLmxlbmd0aCYmdC5yZW1vdmVDbGFzcyhlLmpvaW4oXCJcIikpfSx0Ll9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2U9ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnN0YW5jZTt0aGlzLnRpcD1lLnBvcHBlcix0aGlzLl9jbGVhblRpcENsYXNzKCksdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudCh0LnBsYWNlbWVudCkpfSx0Ll9maXhUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRUaXBFbGVtZW50KCksZT10aGlzLmNvbmZpZy5hbmltYXRpb247bnVsbD09PXQuZ2V0QXR0cmlidXRlKFwieC1wbGFjZW1lbnRcIikmJihwZSh0KS5yZW1vdmVDbGFzcyhPZSksdGhpcy5jb25maWcuYW5pbWF0aW9uPSExLHRoaXMuaGlkZSgpLHRoaXMuc2hvdygpLHRoaXMuY29uZmlnLmFuaW1hdGlvbj1lKX0saS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1wZSh0aGlzKS5kYXRhKHllKSxlPVwib2JqZWN0XCI9PXR5cGVvZiBuJiZuO2lmKCh0fHwhL2Rpc3Bvc2V8aGlkZS8udGVzdChuKSkmJih0fHwodD1uZXcgaSh0aGlzLGUpLHBlKHRoaXMpLmRhdGEoeWUsdCkpLFwic3RyaW5nXCI9PXR5cGVvZiBuKSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oKX19KX0scyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuM1wifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQWV9fSx7a2V5OlwiTkFNRVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB2ZX19LHtrZXk6XCJEQVRBX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB5ZX19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBOZX19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRWV9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gU2V9fV0pLGl9KCkscGUuZm5bdmVdPVdlLl9qUXVlcnlJbnRlcmZhY2UscGUuZm5bdmVdLkNvbnN0cnVjdG9yPVdlLHBlLmZuW3ZlXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHBlLmZuW3ZlXT1DZSxXZS5falF1ZXJ5SW50ZXJmYWNlfSxXZSksSm49KHFlPVwicG9wb3ZlclwiLEtlPVwiLlwiKyhGZT1cImJzLnBvcG92ZXJcIiksTWU9KFVlPWUpLmZuW3FlXSxRZT1cImJzLXBvcG92ZXJcIixCZT1uZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrUWUrXCJcXFxcUytcIixcImdcIiksVmU9bCh7fSx6bi5EZWZhdWx0LHtwbGFjZW1lbnQ6XCJyaWdodFwiLHRyaWdnZXI6XCJjbGlja1wiLGNvbnRlbnQ6XCJcIix0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J30pLFllPWwoe30sem4uRGVmYXVsdFR5cGUse2NvbnRlbnQ6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCJ9KSx6ZT1cImZhZGVcIixaZT1cIi5wb3BvdmVyLWhlYWRlclwiLEdlPVwiLnBvcG92ZXItYm9keVwiLCRlPXtISURFOlwiaGlkZVwiK0tlLEhJRERFTjpcImhpZGRlblwiK0tlLFNIT1c6KEplPVwic2hvd1wiKStLZSxTSE9XTjpcInNob3duXCIrS2UsSU5TRVJURUQ6XCJpbnNlcnRlZFwiK0tlLENMSUNLOlwiY2xpY2tcIitLZSxGT0NVU0lOOlwiZm9jdXNpblwiK0tlLEZPQ1VTT1VUOlwiZm9jdXNvdXRcIitLZSxNT1VTRUVOVEVSOlwibW91c2VlbnRlclwiK0tlLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrS2V9LFhlPWZ1bmN0aW9uKHQpe3ZhciBlLG47ZnVuY3Rpb24gaSgpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31uPXQsKGU9aSkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpLChlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lKS5fX3Byb3RvX189bjt2YXIgcj1pLnByb3RvdHlwZTtyZXR1cm4gci5pc1dpdGhDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VGl0bGUoKXx8dGhpcy5fZ2V0Q29udGVudCgpfSxyLmFkZEF0dGFjaG1lbnRDbGFzcz1mdW5jdGlvbih0KXtVZSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoUWUrXCItXCIrdCl9LHIuZ2V0VGlwRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRpcD10aGlzLnRpcHx8VWUodGhpcy5jb25maWcudGVtcGxhdGUpWzBdLHRoaXMudGlwfSxyLnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgdD1VZSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7dGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmQoWmUpLHRoaXMuZ2V0VGl0bGUoKSk7dmFyIGU9dGhpcy5fZ2V0Q29udGVudCgpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUuY2FsbCh0aGlzLmVsZW1lbnQpKSx0aGlzLnNldEVsZW1lbnRDb250ZW50KHQuZmluZChHZSksZSksdC5yZW1vdmVDbGFzcyh6ZStcIiBcIitKZSl9LHIuX2dldENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY29udGVudFwiKXx8dGhpcy5jb25maWcuY29udGVudH0sci5fY2xlYW5UaXBDbGFzcz1mdW5jdGlvbigpe3ZhciB0PVVlKHRoaXMuZ2V0VGlwRWxlbWVudCgpKSxlPXQuYXR0cihcImNsYXNzXCIpLm1hdGNoKEJlKTtudWxsIT09ZSYmMDxlLmxlbmd0aCYmdC5yZW1vdmVDbGFzcyhlLmpvaW4oXCJcIikpfSxpLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PVVlKHRoaXMpLmRhdGEoRmUpLGU9XCJvYmplY3RcIj09dHlwZW9mIG4/bjpudWxsO2lmKCh0fHwhL2Rlc3Ryb3l8aGlkZS8udGVzdChuKSkmJih0fHwodD1uZXcgaSh0aGlzLGUpLFVlKHRoaXMpLmRhdGEoRmUsdCkpLFwic3RyaW5nXCI9PXR5cGVvZiBuKSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oKX19KX0scyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuM1wifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVmV9fSx7a2V5OlwiTkFNRVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBxZX19LHtrZXk6XCJEQVRBX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBGZX19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiAkZX19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gS2V9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWWV9fV0pLGl9KHpuKSxVZS5mbltxZV09WGUuX2pRdWVyeUludGVyZmFjZSxVZS5mbltxZV0uQ29uc3RydWN0b3I9WGUsVWUuZm5bcWVdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gVWUuZm5bcWVdPU1lLFhlLl9qUXVlcnlJbnRlcmZhY2V9LFhlKSxabj0oZW49XCJzY3JvbGxzcHlcIixybj1cIi5cIisobm49XCJicy5zY3JvbGxzcHlcIiksb249KHRuPWUpLmZuW2VuXSxzbj17b2Zmc2V0OjEwLG1ldGhvZDpcImF1dG9cIix0YXJnZXQ6XCJcIn0sYW49e29mZnNldDpcIm51bWJlclwiLG1ldGhvZDpcInN0cmluZ1wiLHRhcmdldDpcIihzdHJpbmd8ZWxlbWVudClcIn0sbG49e0FDVElWQVRFOlwiYWN0aXZhdGVcIitybixTQ1JPTEw6XCJzY3JvbGxcIitybixMT0FEX0RBVEFfQVBJOlwibG9hZFwiK3JuK1wiLmRhdGEtYXBpXCJ9LGNuPVwiZHJvcGRvd24taXRlbVwiLGhuPVwiYWN0aXZlXCIsdW49J1tkYXRhLXNweT1cInNjcm9sbFwiXScsZm49XCIuYWN0aXZlXCIsZG49XCIubmF2LCAubGlzdC1ncm91cFwiLGduPVwiLm5hdi1saW5rXCIsX249XCIubmF2LWl0ZW1cIixtbj1cIi5saXN0LWdyb3VwLWl0ZW1cIixwbj1cIi5kcm9wZG93blwiLHZuPVwiLmRyb3Bkb3duLWl0ZW1cIix5bj1cIi5kcm9wZG93bi10b2dnbGVcIixFbj1cIm9mZnNldFwiLENuPVwicG9zaXRpb25cIixUbj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4odCxlKXt2YXIgbj10aGlzO3RoaXMuX2VsZW1lbnQ9dCx0aGlzLl9zY3JvbGxFbGVtZW50PVwiQk9EWVwiPT09dC50YWdOYW1lP3dpbmRvdzp0LHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fc2VsZWN0b3I9dGhpcy5fY29uZmlnLnRhcmdldCtcIiBcIitnbitcIixcIit0aGlzLl9jb25maWcudGFyZ2V0K1wiIFwiK21uK1wiLFwiK3RoaXMuX2NvbmZpZy50YXJnZXQrXCIgXCIrdm4sdGhpcy5fb2Zmc2V0cz1bXSx0aGlzLl90YXJnZXRzPVtdLHRoaXMuX2FjdGl2ZVRhcmdldD1udWxsLHRoaXMuX3Njcm9sbEhlaWdodD0wLHRuKHRoaXMuX3Njcm9sbEVsZW1lbnQpLm9uKGxuLlNDUk9MTCxmdW5jdGlvbih0KXtyZXR1cm4gbi5fcHJvY2Vzcyh0KX0pLHRoaXMucmVmcmVzaCgpLHRoaXMuX3Byb2Nlc3MoKX12YXIgdD1uLnByb3RvdHlwZTtyZXR1cm4gdC5yZWZyZXNoPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuX3Njcm9sbEVsZW1lbnQ9PT10aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdz9FbjpDbixyPVwiYXV0b1wiPT09dGhpcy5fY29uZmlnLm1ldGhvZD90OnRoaXMuX2NvbmZpZy5tZXRob2Qsbz1yPT09Q24/dGhpcy5fZ2V0U2Nyb2xsVG9wKCk6MDt0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fc2Nyb2xsSGVpZ2h0PXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZWxlY3RvcikpLm1hcChmdW5jdGlvbih0KXt2YXIgZSxuPUZuLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodCk7aWYobiYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuKSksZSl7dmFyIGk9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZihpLndpZHRofHxpLmhlaWdodClyZXR1cm5bdG4oZSlbcl0oKS50b3ArbyxuXX1yZXR1cm4gbnVsbH0pLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdH0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXS1lWzBdfSkuZm9yRWFjaChmdW5jdGlvbih0KXtlLl9vZmZzZXRzLnB1c2godFswXSksZS5fdGFyZ2V0cy5wdXNoKHRbMV0pfSl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RuLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxubiksdG4odGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKHJuKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fc2Nyb2xsRWxlbWVudD1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3NlbGVjdG9yPW51bGwsdGhpcy5fb2Zmc2V0cz1udWxsLHRoaXMuX3RhcmdldHM9bnVsbCx0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9zY3JvbGxIZWlnaHQ9bnVsbH0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZih0PWwoe30sc24sXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fSkpLnRhcmdldCl7dmFyIGU9dG4odC50YXJnZXQpLmF0dHIoXCJpZFwiKTtlfHwoZT1Gbi5nZXRVSUQoZW4pLHRuKHQudGFyZ2V0KS5hdHRyKFwiaWRcIixlKSksdC50YXJnZXQ9XCIjXCIrZX1yZXR1cm4gRm4udHlwZUNoZWNrQ29uZmlnKGVuLHQsYW4pLHR9LHQuX2dldFNjcm9sbFRvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50PT09d2luZG93P3RoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQ6dGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3B9LHQuX2dldFNjcm9sbEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodHx8TWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCl9LHQuX2dldE9mZnNldEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50PT09d2luZG93P3dpbmRvdy5pbm5lckhlaWdodDp0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodH0sdC5fcHJvY2Vzcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldFNjcm9sbFRvcCgpK3RoaXMuX2NvbmZpZy5vZmZzZXQsZT10aGlzLl9nZXRTY3JvbGxIZWlnaHQoKSxuPXRoaXMuX2NvbmZpZy5vZmZzZXQrZS10aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtpZih0aGlzLl9zY3JvbGxIZWlnaHQhPT1lJiZ0aGlzLnJlZnJlc2goKSxuPD10KXt2YXIgaT10aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoLTFdO3RoaXMuX2FjdGl2ZVRhcmdldCE9PWkmJnRoaXMuX2FjdGl2YXRlKGkpfWVsc2V7aWYodGhpcy5fYWN0aXZlVGFyZ2V0JiZ0PHRoaXMuX29mZnNldHNbMF0mJjA8dGhpcy5fb2Zmc2V0c1swXSlyZXR1cm4gdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdm9pZCB0aGlzLl9jbGVhcigpO2Zvcih2YXIgcj10aGlzLl9vZmZzZXRzLmxlbmd0aDtyLS07KXt0aGlzLl9hY3RpdmVUYXJnZXQhPT10aGlzLl90YXJnZXRzW3JdJiZ0Pj10aGlzLl9vZmZzZXRzW3JdJiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRoaXMuX29mZnNldHNbcisxXXx8dDx0aGlzLl9vZmZzZXRzW3IrMV0pJiZ0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW3JdKX19fSx0Ll9hY3RpdmF0ZT1mdW5jdGlvbihlKXt0aGlzLl9hY3RpdmVUYXJnZXQ9ZSx0aGlzLl9jbGVhcigpO3ZhciB0PXRoaXMuX3NlbGVjdG9yLnNwbGl0KFwiLFwiKTt0PXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0KydbZGF0YS10YXJnZXQ9XCInK2UrJ1wiXSwnK3QrJ1tocmVmPVwiJytlKydcIl0nfSk7dmFyIG49dG4oW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHQuam9pbihcIixcIikpKSk7bi5oYXNDbGFzcyhjbik/KG4uY2xvc2VzdChwbikuZmluZCh5bikuYWRkQ2xhc3MoaG4pLG4uYWRkQ2xhc3MoaG4pKToobi5hZGRDbGFzcyhobiksbi5wYXJlbnRzKGRuKS5wcmV2KGduK1wiLCBcIittbikuYWRkQ2xhc3MoaG4pLG4ucGFyZW50cyhkbikucHJldihfbikuY2hpbGRyZW4oZ24pLmFkZENsYXNzKGhuKSksdG4odGhpcy5fc2Nyb2xsRWxlbWVudCkudHJpZ2dlcihsbi5BQ1RJVkFURSx7cmVsYXRlZFRhcmdldDplfSl9LHQuX2NsZWFyPWZ1bmN0aW9uKCl7dmFyIHQ9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSk7dG4odCkuZmlsdGVyKGZuKS5yZW1vdmVDbGFzcyhobil9LG4uX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9dG4odGhpcykuZGF0YShubik7aWYodHx8KHQ9bmV3IG4odGhpcyxcIm9iamVjdFwiPT10eXBlb2YgZSYmZSksdG4odGhpcykuZGF0YShubix0KSksXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0W2VdKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrZSsnXCInKTt0W2VdKCl9fSl9LHMobixudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4xLjNcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHNufX1dKSxufSgpLHRuKHdpbmRvdykub24obG4uTE9BRF9EQVRBX0FQSSxmdW5jdGlvbigpe2Zvcih2YXIgdD1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodW4pKSxlPXQubGVuZ3RoO2UtLTspe3ZhciBuPXRuKHRbZV0pO1RuLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChuLG4uZGF0YSgpKX19KSx0bi5mbltlbl09VG4uX2pRdWVyeUludGVyZmFjZSx0bi5mbltlbl0uQ29uc3RydWN0b3I9VG4sdG4uZm5bZW5dLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdG4uZm5bZW5dPW9uLFRuLl9qUXVlcnlJbnRlcmZhY2V9LFRuKSxHbj0oSW49XCIuXCIrKFNuPVwiYnMudGFiXCIpLEFuPShibj1lKS5mbi50YWIsRG49e0hJREU6XCJoaWRlXCIrSW4sSElEREVOOlwiaGlkZGVuXCIrSW4sU0hPVzpcInNob3dcIitJbixTSE9XTjpcInNob3duXCIrSW4sQ0xJQ0tfREFUQV9BUEk6XCJjbGlja1wiK0luK1wiLmRhdGEtYXBpXCJ9LHduPVwiZHJvcGRvd24tbWVudVwiLE5uPVwiYWN0aXZlXCIsT249XCJkaXNhYmxlZFwiLGtuPVwiZmFkZVwiLFBuPVwic2hvd1wiLGpuPVwiLmRyb3Bkb3duXCIsSG49XCIubmF2LCAubGlzdC1ncm91cFwiLExuPVwiLmFjdGl2ZVwiLFJuPVwiPiBsaSA+IC5hY3RpdmVcIix4bj0nW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS10b2dnbGU9XCJsaXN0XCJdJyxXbj1cIi5kcm9wZG93bi10b2dnbGVcIixVbj1cIj4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZVwiLHFuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0KXt0aGlzLl9lbGVtZW50PXR9dmFyIHQ9aS5wcm90b3R5cGU7cmV0dXJuIHQuc2hvdz1mdW5jdGlvbigpe3ZhciBuPXRoaXM7aWYoISh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZibih0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhObil8fGJuKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKE9uKSkpe3ZhciB0LGksZT1ibih0aGlzLl9lbGVtZW50KS5jbG9zZXN0KEhuKVswXSxyPUZuLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7aWYoZSl7dmFyIG89XCJVTFwiPT09ZS5ub2RlTmFtZT9SbjpMbjtpPShpPWJuLm1ha2VBcnJheShibihlKS5maW5kKG8pKSlbaS5sZW5ndGgtMV19dmFyIHM9Ym4uRXZlbnQoRG4uSElERSx7cmVsYXRlZFRhcmdldDp0aGlzLl9lbGVtZW50fSksYT1ibi5FdmVudChEbi5TSE9XLHtyZWxhdGVkVGFyZ2V0Oml9KTtpZihpJiZibihpKS50cmlnZ2VyKHMpLGJuKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoYSksIWEuaXNEZWZhdWx0UHJldmVudGVkKCkmJiFzLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtyJiYodD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHIpKSx0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LGUpO3ZhciBsPWZ1bmN0aW9uKCl7dmFyIHQ9Ym4uRXZlbnQoRG4uSElEREVOLHtyZWxhdGVkVGFyZ2V0Om4uX2VsZW1lbnR9KSxlPWJuLkV2ZW50KERuLlNIT1dOLHtyZWxhdGVkVGFyZ2V0Oml9KTtibihpKS50cmlnZ2VyKHQpLGJuKG4uX2VsZW1lbnQpLnRyaWdnZXIoZSl9O3Q/dGhpcy5fYWN0aXZhdGUodCx0LnBhcmVudE5vZGUsbCk6bCgpfX19LHQuZGlzcG9zZT1mdW5jdGlvbigpe2JuLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxTbiksdGhpcy5fZWxlbWVudD1udWxsfSx0Ll9hY3RpdmF0ZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcyxyPShcIlVMXCI9PT1lLm5vZGVOYW1lP2JuKGUpLmZpbmQoUm4pOmJuKGUpLmNoaWxkcmVuKExuKSlbMF0sbz1uJiZyJiZibihyKS5oYXNDbGFzcyhrbikscz1mdW5jdGlvbigpe3JldHVybiBpLl90cmFuc2l0aW9uQ29tcGxldGUodCxyLG4pfTtpZihyJiZvKXt2YXIgYT1Gbi5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChyKTtibihyKS5vbmUoRm4uVFJBTlNJVElPTl9FTkQscykuZW11bGF0ZVRyYW5zaXRpb25FbmQoYSl9ZWxzZSBzKCl9LHQuX3RyYW5zaXRpb25Db21wbGV0ZT1mdW5jdGlvbih0LGUsbil7aWYoZSl7Ym4oZSkucmVtb3ZlQ2xhc3MoUG4rXCIgXCIrTm4pO3ZhciBpPWJuKGUucGFyZW50Tm9kZSkuZmluZChVbilbMF07aSYmYm4oaSkucmVtb3ZlQ2xhc3MoTm4pLFwidGFiXCI9PT1lLmdldEF0dHJpYnV0ZShcInJvbGVcIikmJmUuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCExKX1pZihibih0KS5hZGRDbGFzcyhObiksXCJ0YWJcIj09PXQuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSYmdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITApLEZuLnJlZmxvdyh0KSxibih0KS5hZGRDbGFzcyhQbiksdC5wYXJlbnROb2RlJiZibih0LnBhcmVudE5vZGUpLmhhc0NsYXNzKHduKSl7dmFyIHI9Ym4odCkuY2xvc2VzdChqbilbMF07aWYocil7dmFyIG89W10uc2xpY2UuY2FsbChyLnF1ZXJ5U2VsZWN0b3JBbGwoV24pKTtibihvKS5hZGRDbGFzcyhObil9dC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApfW4mJm4oKX0saS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1ibih0aGlzKSxlPXQuZGF0YShTbik7aWYoZXx8KGU9bmV3IGkodGhpcyksdC5kYXRhKFNuLGUpKSxcInN0cmluZ1wiPT10eXBlb2Ygbil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGVbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO2Vbbl0oKX19KX0scyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuM1wifX1dKSxpfSgpLGJuKGRvY3VtZW50KS5vbihEbi5DTElDS19EQVRBX0FQSSx4bixmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCkscW4uX2pRdWVyeUludGVyZmFjZS5jYWxsKGJuKHRoaXMpLFwic2hvd1wiKX0pLGJuLmZuLnRhYj1xbi5falF1ZXJ5SW50ZXJmYWNlLGJuLmZuLnRhYi5Db25zdHJ1Y3Rvcj1xbixibi5mbi50YWIubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBibi5mbi50YWI9QW4scW4uX2pRdWVyeUludGVyZmFjZX0scW4pOyFmdW5jdGlvbih0KXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXAncyBKYXZhU2NyaXB0LlwiKTt2YXIgZT10LmZuLmpxdWVyeS5zcGxpdChcIiBcIilbMF0uc3BsaXQoXCIuXCIpO2lmKGVbMF08MiYmZVsxXTw5fHwxPT09ZVswXSYmOT09PWVbMV0mJmVbMl08MXx8NDw9ZVswXSl0aHJvdyBuZXcgRXJyb3IoXCJCb290c3RyYXAncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjBcIil9KGUpLHQuVXRpbD1Gbix0LkFsZXJ0PUtuLHQuQnV0dG9uPU1uLHQuQ2Fyb3VzZWw9UW4sdC5Db2xsYXBzZT1Cbix0LkRyb3Bkb3duPVZuLHQuTW9kYWw9WW4sdC5Qb3BvdmVyPUpuLHQuU2Nyb2xsc3B5PVpuLHQuVGFiPUduLHQuVG9vbHRpcD16bixPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAubWluLmpzLm1hcCJdLCJuYW1lcyI6WyJ0IiwiZSIsImV4cG9ydHMiLCJfdHlwZW9mIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsImJvb3RzdHJhcCIsImpRdWVyeSIsIlBvcHBlciIsImgiLCJpIiwibiIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicyIsInByb3RvdHlwZSIsImwiLCJyIiwiYXJndW1lbnRzIiwibyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmb3JFYWNoIiwidmFsdWUiLCJoYXNPd25Qcm9wZXJ0eSIsImEiLCJjIiwidSIsImYiLCJkIiwiZyIsIl8iLCJtIiwicCIsInYiLCJ5IiwiRSIsIkMiLCJUIiwiYiIsIlMiLCJJIiwiQSIsIkQiLCJ3IiwiTiIsIk8iLCJrIiwiUCIsImoiLCJIIiwiTCIsIlIiLCJ4IiwiVyIsIlUiLCJxIiwiRiIsIksiLCJNIiwiUSIsIkIiLCJWIiwiWSIsInoiLCJKIiwiWiIsIkciLCIkIiwiWCIsInR0IiwiZXQiLCJudCIsIml0IiwicnQiLCJvdCIsInN0IiwiYXQiLCJsdCIsImN0IiwiaHQiLCJ1dCIsImZ0IiwiZHQiLCJndCIsIl90IiwibXQiLCJwdCIsInZ0IiwieXQiLCJFdCIsIkN0IiwiVHQiLCJidCIsIlN0IiwiSXQiLCJBdCIsIkR0Iiwid3QiLCJOdCIsIk90Iiwia3QiLCJQdCIsImp0IiwiSHQiLCJMdCIsIlJ0IiwieHQiLCJXdCIsIlV0IiwicXQiLCJGdCIsIkt0IiwiTXQiLCJRdCIsIkJ0IiwiVnQiLCJZdCIsInp0IiwiSnQiLCJadCIsIkd0IiwiJHQiLCJYdCIsInRlIiwiZWUiLCJuZSIsImllIiwicmUiLCJvZSIsInNlIiwiYWUiLCJsZSIsImNlIiwiaGUiLCJ1ZSIsImZlIiwiZGUiLCJnZSIsIl9lIiwibWUiLCJwZSIsInZlIiwieWUiLCJFZSIsIkNlIiwiVGUiLCJiZSIsIlNlIiwiSWUiLCJBZSIsIkRlIiwid2UiLCJOZSIsIk9lIiwia2UiLCJQZSIsImplIiwiSGUiLCJMZSIsIlJlIiwieGUiLCJXZSIsIlVlIiwicWUiLCJGZSIsIktlIiwiTWUiLCJRZSIsIkJlIiwiVmUiLCJZZSIsInplIiwiSmUiLCJaZSIsIkdlIiwiJGUiLCJYZSIsInRuIiwiZW4iLCJubiIsInJuIiwib24iLCJzbiIsImFuIiwibG4iLCJjbiIsImhuIiwidW4iLCJmbiIsImRuIiwiZ24iLCJfbiIsIm1uIiwicG4iLCJ2biIsInluIiwiRW4iLCJDbiIsIlRuIiwiYm4iLCJTbiIsIkluIiwiQW4iLCJEbiIsInduIiwiTm4iLCJPbiIsImtuIiwiUG4iLCJqbiIsIkhuIiwiTG4iLCJSbiIsInhuIiwiV24iLCJVbiIsInFuIiwiRm4iLCJvbmUiLCJUUkFOU0lUSU9OX0VORCIsInNldFRpbWVvdXQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsIk1hdGgiLCJyYW5kb20iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsImNzcyIsInBhcnNlRmxvYXQiLCJzcGxpdCIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsInRyaWdnZXIiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwiaXNFbGVtZW50Iiwibm9kZVR5cGUiLCJ0eXBlQ2hlY2tDb25maWciLCJjYWxsIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiUmVnRXhwIiwidGVzdCIsIkVycm9yIiwidG9VcHBlckNhc2UiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsImV2ZW50Iiwic3BlY2lhbCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwidGFyZ2V0IiwiaXMiLCJoYW5kbGVPYmoiLCJoYW5kbGVyIiwiYXBwbHkiLCJLbiIsIkNMT1NFIiwiQ0xPU0VEIiwiQ0xJQ0tfREFUQV9BUEkiLCJfZWxlbWVudCIsImNsb3NlIiwiX2dldFJvb3RFbGVtZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwicmVtb3ZlRGF0YSIsImNsb3Nlc3QiLCJFdmVudCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJfZGVzdHJveUVsZW1lbnQiLCJkZXRhY2giLCJyZW1vdmUiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsImRhdGEiLCJfaGFuZGxlRGlzbWlzcyIsInByZXZlbnREZWZhdWx0IiwiZ2V0IiwiQ29uc3RydWN0b3IiLCJub0NvbmZsaWN0IiwiTW4iLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidG9nZ2xlIiwidHlwZSIsImNoZWNrZWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImhhc0F0dHJpYnV0ZSIsImZvY3VzIiwic2V0QXR0cmlidXRlIiwidG9nZ2xlQ2xhc3MiLCJRbiIsImludGVydmFsIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwid3JhcCIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRPVUNIRU5EIiwiTE9BRF9EQVRBX0FQSSIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwibmV4dCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImJpbmQiLCJ0byIsIl9nZXRJdGVtSW5kZXgiLCJvZmYiLCJfa2V5ZG93biIsImRvY3VtZW50RWxlbWVudCIsImNsZWFyVGltZW91dCIsInRhZ05hbWUiLCJ3aGljaCIsInBhcmVudE5vZGUiLCJzbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbmRleE9mIiwiX2dldEl0ZW1CeURpcmVjdGlvbiIsIl90cmlnZ2VyU2xpZGVFdmVudCIsInJlbGF0ZWRUYXJnZXQiLCJkaXJlY3Rpb24iLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJjaGlsZHJlbiIsImFkZENsYXNzIiwiVHlwZUVycm9yIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJ3aW5kb3ciLCJCbiIsInBhcmVudCIsIlNIT1ciLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsIm1ha2VBcnJheSIsImlkIiwiX3NlbGVjdG9yIiwicHVzaCIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImhpZGUiLCJzaG93Iiwibm90IiwiX2dldERpbWVuc2lvbiIsInN0eWxlIiwiYXR0ciIsInNldFRyYW5zaXRpb25pbmciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJqcXVlcnkiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJjdXJyZW50VGFyZ2V0IiwiVm4iLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIm9mZnNldCIsImZsaXAiLCJib3VuZGFyeSIsInJlZmVyZW5jZSIsImRpc3BsYXkiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJfY2xlYXJNZW51cyIsIl9nZXRQb3BwZXJDb25maWciLCJib2R5Iiwibm9vcCIsImRlc3Ryb3kiLCJ1cGRhdGUiLCJzY2hlZHVsZVVwZGF0ZSIsInN0b3BQcm9wYWdhdGlvbiIsImNvbnN0cnVjdG9yIiwiRGVmYXVsdCIsIkRlZmF1bHRUeXBlIiwiX2dldFBsYWNlbWVudCIsIm9mZnNldHMiLCJwbGFjZW1lbnQiLCJtb2RpZmllcnMiLCJlbmFibGVkIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJhcHBseVN0eWxlIiwiY2xpY2tFdmVudCIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJZbiIsImJhY2tkcm9wIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUF0dHJpYnV0ZSIsInNjcm9sbFRvcCIsIl9lbmZvcmNlRm9jdXMiLCJoYXMiLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJhZGQiLCJhcHBlbmRUbyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibGVmdCIsInJpZ2h0IiwiaW5uZXJXaWR0aCIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsIm1hcmdpblJpZ2h0Iiwid2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiem4iLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsInNlbGVjdG9yIiwiY29udGFpbmVyIiwiZmFsbGJhY2tQbGFjZW1lbnQiLCJJTlNFUlRFRCIsIkZPQ1VTT1VUIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsImVsZW1lbnQiLCJjb25maWciLCJ0aXAiLCJfc2V0TGlzdGVuZXJzIiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJEQVRBX0tFWSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsImNsaWNrIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiRVZFTlRfS0VZIiwiaXNXaXRoQ29udGVudCIsIm93bmVyRG9jdW1lbnQiLCJOQU1FIiwic2V0Q29udGVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiZmluZCIsImJlaGF2aW9yIiwiYXJyb3ciLCJvbkNyZWF0ZSIsIm9yaWdpbmFsUGxhY2VtZW50IiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIm9uVXBkYXRlIiwiX2ZpeFRyYW5zaXRpb24iLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwic2V0RWxlbWVudENvbnRlbnQiLCJlbXB0eSIsImFwcGVuZCIsInRleHQiLCJfZml4VGl0bGUiLCJjb250ZW50Iiwiam9pbiIsImluc3RhbmNlIiwicG9wcGVyIiwiSm4iLCJjcmVhdGUiLCJfX3Byb3RvX18iLCJfZ2V0Q29udGVudCIsIlpuIiwibWV0aG9kIiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwibWFwIiwiaGVpZ2h0IiwidG9wIiwic29ydCIsInBhZ2VZT2Zmc2V0IiwibWF4IiwiX2dldE9mZnNldEhlaWdodCIsImlubmVySGVpZ2h0IiwiX2FjdGl2YXRlIiwiX2NsZWFyIiwicGFyZW50cyIsIkduIiwidGFiIiwibm9kZU5hbWUiLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiVXRpbCIsIkFsZXJ0IiwiQnV0dG9uIiwiQ2Fyb3VzZWwiLCJDb2xsYXBzZSIsIkRyb3Bkb3duIiwiTW9kYWwiLCJQb3BvdmVyIiwiU2Nyb2xsc3B5IiwiVGFiIiwiVG9vbHRpcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/landing-page/bootstrap.min.js\n");

/***/ }),

/***/ "./resources/js/landing-page/jquery-ui.js":
/*!************************************************!*\
  !*** ./resources/js/landing-page/jquery-ui.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery UI - v1.12.1 - 2018-01-21\r\n* http://jqueryui.com\r\n* Includes: widget.js, keycode.js, widgets/mouse.js, widgets/slider.js\r\n* Copyright jQuery Foundation and other contributors; Licensed MIT */\n\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($) {\n  $.ui = $.ui || {};\n  var version = $.ui.version = \"1.12.1\";\n\n  /*!\r\n   * jQuery UI Widget 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n\n  //>>label: Widget\n  //>>group: Core\n  //>>description: Provides a factory for creating stateful widgets with a common API.\n  //>>docs: http://api.jqueryui.com/jQuery.widget/\n  //>>demos: http://jqueryui.com/widget/\n\n  var widgetUuid = 0;\n  var widgetSlice = Array.prototype.slice;\n  $.cleanData = function (orig) {\n    return function (elems) {\n      var events, elem, i;\n      for (i = 0; (elem = elems[i]) != null; i++) {\n        try {\n          // Only trigger remove when necessary to save time\n          events = $._data(elem, \"events\");\n          if (events && events.remove) {\n            $(elem).triggerHandler(\"remove\");\n          }\n\n          // Http://bugs.jquery.com/ticket/8235\n        } catch (e) {}\n      }\n      orig(elems);\n    };\n  }($.cleanData);\n  $.widget = function (name, base, prototype) {\n    var existingConstructor, constructor, basePrototype;\n\n    // ProxiedPrototype allows the provided prototype to remain unmodified\n    // so that it can be used as a mixin for multiple widgets (#8876)\n    var proxiedPrototype = {};\n    var namespace = name.split(\".\")[0];\n    name = name.split(\".\")[1];\n    var fullName = namespace + \"-\" + name;\n    if (!prototype) {\n      prototype = base;\n      base = $.Widget;\n    }\n    if ($.isArray(prototype)) {\n      prototype = $.extend.apply(null, [{}].concat(prototype));\n    }\n\n    // Create selector for plugin\n    $.expr[\":\"][fullName.toLowerCase()] = function (elem) {\n      return !!$.data(elem, fullName);\n    };\n    $[namespace] = $[namespace] || {};\n    existingConstructor = $[namespace][name];\n    constructor = $[namespace][name] = function (options, element) {\n      // Allow instantiation without \"new\" keyword\n      if (!this._createWidget) {\n        return new constructor(options, element);\n      }\n\n      // Allow instantiation without initializing for simple inheritance\n      // must use \"new\" keyword (the code above always passes args)\n      if (arguments.length) {\n        this._createWidget(options, element);\n      }\n    };\n\n    // Extend with the existing constructor to carry over any static properties\n    $.extend(constructor, existingConstructor, {\n      version: prototype.version,\n      // Copy the object used to create the prototype in case we need to\n      // redefine the widget later\n      _proto: $.extend({}, prototype),\n      // Track widgets that inherit from this widget in case this widget is\n      // redefined after a widget inherits from it\n      _childConstructors: []\n    });\n    basePrototype = new base();\n\n    // We need to make the options hash a property directly on the new instance\n    // otherwise we'll modify the options hash on the prototype that we're\n    // inheriting from\n    basePrototype.options = $.widget.extend({}, basePrototype.options);\n    $.each(prototype, function (prop, value) {\n      if (!$.isFunction(value)) {\n        proxiedPrototype[prop] = value;\n        return;\n      }\n      proxiedPrototype[prop] = function () {\n        function _super() {\n          return base.prototype[prop].apply(this, arguments);\n        }\n        function _superApply(args) {\n          return base.prototype[prop].apply(this, args);\n        }\n        return function () {\n          var __super = this._super;\n          var __superApply = this._superApply;\n          var returnValue;\n          this._super = _super;\n          this._superApply = _superApply;\n          returnValue = value.apply(this, arguments);\n          this._super = __super;\n          this._superApply = __superApply;\n          return returnValue;\n        };\n      }();\n    });\n    constructor.prototype = $.widget.extend(basePrototype, {\n      // TODO: remove support for widgetEventPrefix\n      // always use the name + a colon as the prefix, e.g., draggable:start\n      // don't prefix for widgets that aren't DOM-based\n      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name\n    }, proxiedPrototype, {\n      constructor: constructor,\n      namespace: namespace,\n      widgetName: name,\n      widgetFullName: fullName\n    });\n\n    // If this widget is being redefined then we need to find all widgets that\n    // are inheriting from it and redefine all of them so that they inherit from\n    // the new version of this widget. We're essentially trying to replace one\n    // level in the prototype chain.\n    if (existingConstructor) {\n      $.each(existingConstructor._childConstructors, function (i, child) {\n        var childPrototype = child.prototype;\n\n        // Redefine the child widget using the same prototype that was\n        // originally used, but inherit from the new version of the base\n        $.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\n      });\n\n      // Remove the list of existing child constructors from the old constructor\n      // so the old child constructors can be garbage collected\n      delete existingConstructor._childConstructors;\n    } else {\n      base._childConstructors.push(constructor);\n    }\n    $.widget.bridge(name, constructor);\n    return constructor;\n  };\n  $.widget.extend = function (target) {\n    var input = widgetSlice.call(arguments, 1);\n    var inputIndex = 0;\n    var inputLength = input.length;\n    var key;\n    var value;\n    for (; inputIndex < inputLength; inputIndex++) {\n      for (key in input[inputIndex]) {\n        value = input[inputIndex][key];\n        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n          // Clone objects\n          if ($.isPlainObject(value)) {\n            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) :\n            // Don't extend strings, arrays, etc. with objects\n            $.widget.extend({}, value);\n\n            // Copy everything else by reference\n          } else {\n            target[key] = value;\n          }\n        }\n      }\n    }\n    return target;\n  };\n  $.widget.bridge = function (name, object) {\n    var fullName = object.prototype.widgetFullName || name;\n    $.fn[name] = function (options) {\n      var isMethodCall = typeof options === \"string\";\n      var args = widgetSlice.call(arguments, 1);\n      var returnValue = this;\n      if (isMethodCall) {\n        // If this is an empty collection, we need to have the instance method\n        // return undefined instead of the jQuery instance\n        if (!this.length && options === \"instance\") {\n          returnValue = undefined;\n        } else {\n          this.each(function () {\n            var methodValue;\n            var instance = $.data(this, fullName);\n            if (options === \"instance\") {\n              returnValue = instance;\n              return false;\n            }\n            if (!instance) {\n              return $.error(\"cannot call methods on \" + name + \" prior to initialization; \" + \"attempted to call method '\" + options + \"'\");\n            }\n            if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n              return $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\n            }\n            methodValue = instance[options].apply(instance, args);\n            if (methodValue !== instance && methodValue !== undefined) {\n              returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;\n              return false;\n            }\n          });\n        }\n      } else {\n        // Allow multiple hashes to be passed on init\n        if (args.length) {\n          options = $.widget.extend.apply(null, [options].concat(args));\n        }\n        this.each(function () {\n          var instance = $.data(this, fullName);\n          if (instance) {\n            instance.option(options || {});\n            if (instance._init) {\n              instance._init();\n            }\n          } else {\n            $.data(this, fullName, new object(options, this));\n          }\n        });\n      }\n      return returnValue;\n    };\n  };\n  $.Widget = function /* options, element */ () {};\n  $.Widget._childConstructors = [];\n  $.Widget.prototype = {\n    widgetName: \"widget\",\n    widgetEventPrefix: \"\",\n    defaultElement: \"<div>\",\n    options: {\n      classes: {},\n      disabled: false,\n      // Callbacks\n      create: null\n    },\n    _createWidget: function _createWidget(options, element) {\n      element = $(element || this.defaultElement || this)[0];\n      this.element = $(element);\n      this.uuid = widgetUuid++;\n      this.eventNamespace = \".\" + this.widgetName + this.uuid;\n      this.bindings = $();\n      this.hoverable = $();\n      this.focusable = $();\n      this.classesElementLookup = {};\n      if (element !== this) {\n        $.data(element, this.widgetFullName, this);\n        this._on(true, this.element, {\n          remove: function remove(event) {\n            if (event.target === element) {\n              this.destroy();\n            }\n          }\n        });\n        this.document = $(element.style ?\n        // Element within the document\n        element.ownerDocument :\n        // Element is window or document\n        element.document || element);\n        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);\n      }\n      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);\n      this._create();\n      if (this.options.disabled) {\n        this._setOptionDisabled(this.options.disabled);\n      }\n      this._trigger(\"create\", null, this._getCreateEventData());\n      this._init();\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      return {};\n    },\n    _getCreateEventData: $.noop,\n    _create: $.noop,\n    _init: $.noop,\n    destroy: function destroy() {\n      var that = this;\n      this._destroy();\n      $.each(this.classesElementLookup, function (key, value) {\n        that._removeClass(value, key);\n      });\n\n      // We can probably remove the unbind calls in 2.0\n      // all event bindings should go through this._on()\n      this.element.off(this.eventNamespace).removeData(this.widgetFullName);\n      this.widget().off(this.eventNamespace).removeAttr(\"aria-disabled\");\n\n      // Clean up events and states\n      this.bindings.off(this.eventNamespace);\n    },\n    _destroy: $.noop,\n    widget: function widget() {\n      return this.element;\n    },\n    option: function option(key, value) {\n      var options = key;\n      var parts;\n      var curOption;\n      var i;\n      if (arguments.length === 0) {\n        // Don't return a reference to the internal hash\n        return $.widget.extend({}, this.options);\n      }\n      if (typeof key === \"string\") {\n        // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n        options = {};\n        parts = key.split(\".\");\n        key = parts.shift();\n        if (parts.length) {\n          curOption = options[key] = $.widget.extend({}, this.options[key]);\n          for (i = 0; i < parts.length - 1; i++) {\n            curOption[parts[i]] = curOption[parts[i]] || {};\n            curOption = curOption[parts[i]];\n          }\n          key = parts.pop();\n          if (arguments.length === 1) {\n            return curOption[key] === undefined ? null : curOption[key];\n          }\n          curOption[key] = value;\n        } else {\n          if (arguments.length === 1) {\n            return this.options[key] === undefined ? null : this.options[key];\n          }\n          options[key] = value;\n        }\n      }\n      this._setOptions(options);\n      return this;\n    },\n    _setOptions: function _setOptions(options) {\n      var key;\n      for (key in options) {\n        this._setOption(key, options[key]);\n      }\n      return this;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"classes\") {\n        this._setOptionClasses(value);\n      }\n      this.options[key] = value;\n      if (key === \"disabled\") {\n        this._setOptionDisabled(value);\n      }\n      return this;\n    },\n    _setOptionClasses: function _setOptionClasses(value) {\n      var classKey, elements, currentElements;\n      for (classKey in value) {\n        currentElements = this.classesElementLookup[classKey];\n        if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {\n          continue;\n        }\n\n        // We are doing this to create a new jQuery object because the _removeClass() call\n        // on the next line is going to destroy the reference to the current elements being\n        // tracked. We need to save a copy of this collection so that we can add the new classes\n        // below.\n        elements = $(currentElements.get());\n        this._removeClass(currentElements, classKey);\n\n        // We don't use _addClass() here, because that uses this.options.classes\n        // for generating the string of classes. We want to use the value passed in from\n        // _setOption(), this is the new value of the classes option which was passed to\n        // _setOption(). We pass this value directly to _classes().\n        elements.addClass(this._classes({\n          element: elements,\n          keys: classKey,\n          classes: value,\n          add: true\n        }));\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._toggleClass(this.widget(), this.widgetFullName + \"-disabled\", null, !!value);\n\n      // If the widget is becoming disabled, then nothing is interactive\n      if (value) {\n        this._removeClass(this.hoverable, null, \"ui-state-hover\");\n        this._removeClass(this.focusable, null, \"ui-state-focus\");\n      }\n    },\n    enable: function enable() {\n      return this._setOptions({\n        disabled: false\n      });\n    },\n    disable: function disable() {\n      return this._setOptions({\n        disabled: true\n      });\n    },\n    _classes: function _classes(options) {\n      var full = [];\n      var that = this;\n      options = $.extend({\n        element: this.element,\n        classes: this.options.classes || {}\n      }, options);\n      function processClassString(classes, checkOption) {\n        var current, i;\n        for (i = 0; i < classes.length; i++) {\n          current = that.classesElementLookup[classes[i]] || $();\n          if (options.add) {\n            current = $($.unique(current.get().concat(options.element.get())));\n          } else {\n            current = $(current.not(options.element).get());\n          }\n          that.classesElementLookup[classes[i]] = current;\n          full.push(classes[i]);\n          if (checkOption && options.classes[classes[i]]) {\n            full.push(options.classes[classes[i]]);\n          }\n        }\n      }\n      this._on(options.element, {\n        \"remove\": \"_untrackClassesElement\"\n      });\n      if (options.keys) {\n        processClassString(options.keys.match(/\\S+/g) || [], true);\n      }\n      if (options.extra) {\n        processClassString(options.extra.match(/\\S+/g) || []);\n      }\n      return full.join(\" \");\n    },\n    _untrackClassesElement: function _untrackClassesElement(event) {\n      var that = this;\n      $.each(that.classesElementLookup, function (key, value) {\n        if ($.inArray(event.target, value) !== -1) {\n          that.classesElementLookup[key] = $(value.not(event.target).get());\n        }\n      });\n    },\n    _removeClass: function _removeClass(element, keys, extra) {\n      return this._toggleClass(element, keys, extra, false);\n    },\n    _addClass: function _addClass(element, keys, extra) {\n      return this._toggleClass(element, keys, extra, true);\n    },\n    _toggleClass: function _toggleClass(element, keys, extra, add) {\n      add = typeof add === \"boolean\" ? add : extra;\n      var shift = typeof element === \"string\" || element === null,\n        options = {\n          extra: shift ? keys : extra,\n          keys: shift ? element : keys,\n          element: shift ? this.element : element,\n          add: add\n        };\n      options.element.toggleClass(this._classes(options), add);\n      return this;\n    },\n    _on: function _on(suppressDisabledCheck, element, handlers) {\n      var delegateElement;\n      var instance = this;\n\n      // No suppressDisabledCheck flag, shuffle arguments\n      if (typeof suppressDisabledCheck !== \"boolean\") {\n        handlers = element;\n        element = suppressDisabledCheck;\n        suppressDisabledCheck = false;\n      }\n\n      // No element argument, shuffle and use this.element\n      if (!handlers) {\n        handlers = element;\n        element = this.element;\n        delegateElement = this.widget();\n      } else {\n        element = delegateElement = $(element);\n        this.bindings = this.bindings.add(element);\n      }\n      $.each(handlers, function (event, handler) {\n        function handlerProxy() {\n          // Allow widgets to customize the disabled handling\n          // - disabled as an array instead of boolean\n          // - disabled class as method for disabling individual parts\n          if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass(\"ui-state-disabled\"))) {\n            return;\n          }\n          return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n        }\n\n        // Copy the guid so direct unbinding works\n        if (typeof handler !== \"string\") {\n          handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;\n        }\n        var match = event.match(/^([\\w:-]*)\\s*(.*)$/);\n        var eventName = match[1] + instance.eventNamespace;\n        var selector = match[2];\n        if (selector) {\n          delegateElement.on(eventName, selector, handlerProxy);\n        } else {\n          element.on(eventName, handlerProxy);\n        }\n      });\n    },\n    _off: function _off(element, eventName) {\n      eventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\n      element.off(eventName).off(eventName);\n\n      // Clear the stack to avoid memory leaks (#10056)\n      this.bindings = $(this.bindings.not(element).get());\n      this.focusable = $(this.focusable.not(element).get());\n      this.hoverable = $(this.hoverable.not(element).get());\n    },\n    _delay: function _delay(handler, delay) {\n      function handlerProxy() {\n        return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n      }\n      var instance = this;\n      return setTimeout(handlerProxy, delay || 0);\n    },\n    _hoverable: function _hoverable(element) {\n      this.hoverable = this.hoverable.add(element);\n      this._on(element, {\n        mouseenter: function mouseenter(event) {\n          this._addClass($(event.currentTarget), null, \"ui-state-hover\");\n        },\n        mouseleave: function mouseleave(event) {\n          this._removeClass($(event.currentTarget), null, \"ui-state-hover\");\n        }\n      });\n    },\n    _focusable: function _focusable(element) {\n      this.focusable = this.focusable.add(element);\n      this._on(element, {\n        focusin: function focusin(event) {\n          this._addClass($(event.currentTarget), null, \"ui-state-focus\");\n        },\n        focusout: function focusout(event) {\n          this._removeClass($(event.currentTarget), null, \"ui-state-focus\");\n        }\n      });\n    },\n    _trigger: function _trigger(type, event, data) {\n      var prop, orig;\n      var callback = this.options[type];\n      data = data || {};\n      event = $.Event(event);\n      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();\n\n      // The original event may come from any element\n      // so we need to reset the target on the new event\n      event.target = this.element[0];\n\n      // Copy original event properties over to the new event\n      orig = event.originalEvent;\n      if (orig) {\n        for (prop in orig) {\n          if (!(prop in event)) {\n            event[prop] = orig[prop];\n          }\n        }\n      }\n      this.element.trigger(event, data);\n      return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());\n    }\n  };\n  $.each({\n    show: \"fadeIn\",\n    hide: \"fadeOut\"\n  }, function (method, defaultEffect) {\n    $.Widget.prototype[\"_\" + method] = function (element, options, callback) {\n      if (typeof options === \"string\") {\n        options = {\n          effect: options\n        };\n      }\n      var hasOptions;\n      var effectName = !options ? method : options === true || typeof options === \"number\" ? defaultEffect : options.effect || defaultEffect;\n      options = options || {};\n      if (typeof options === \"number\") {\n        options = {\n          duration: options\n        };\n      }\n      hasOptions = !$.isEmptyObject(options);\n      options.complete = callback;\n      if (options.delay) {\n        element.delay(options.delay);\n      }\n      if (hasOptions && $.effects && $.effects.effect[effectName]) {\n        element[method](options);\n      } else if (effectName !== method && element[effectName]) {\n        element[effectName](options.duration, options.easing, callback);\n      } else {\n        element.queue(function (next) {\n          $(this)[method]();\n          if (callback) {\n            callback.call(element[0]);\n          }\n          next();\n        });\n      }\n    };\n  });\n  var widget = $.widget;\n\n  /*!\r\n   * jQuery UI Keycode 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n\n  //>>label: Keycode\n  //>>group: Core\n  //>>description: Provide keycodes as keynames\n  //>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/\n\n  var keycode = $.ui.keyCode = {\n    BACKSPACE: 8,\n    COMMA: 188,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    PERIOD: 190,\n    RIGHT: 39,\n    SPACE: 32,\n    TAB: 9,\n    UP: 38\n  };\n\n  // This file is deprecated\n  var ie = $.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n\n  /*!\r\n   * jQuery UI Mouse 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n\n  //>>label: Mouse\n  //>>group: Widgets\n  //>>description: Abstracts mouse-based interactions to assist in creating certain widgets.\n  //>>docs: http://api.jqueryui.com/mouse/\n\n  var mouseHandled = false;\n  $(document).on(\"mouseup\", function () {\n    mouseHandled = false;\n  });\n  var widgetsMouse = $.widget(\"ui.mouse\", {\n    version: \"1.12.1\",\n    options: {\n      cancel: \"input, textarea, button, select, option\",\n      distance: 1,\n      delay: 0\n    },\n    _mouseInit: function _mouseInit() {\n      var that = this;\n      this.element.on(\"mousedown.\" + this.widgetName, function (event) {\n        return that._mouseDown(event);\n      }).on(\"click.\" + this.widgetName, function (event) {\n        if (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\n          $.removeData(event.target, that.widgetName + \".preventClickEvent\");\n          event.stopImmediatePropagation();\n          return false;\n        }\n      });\n      this.started = false;\n    },\n    // TODO: make sure destroying one instance of mouse doesn't mess with\n    // other instances of mouse\n    _mouseDestroy: function _mouseDestroy() {\n      this.element.off(\".\" + this.widgetName);\n      if (this._mouseMoveDelegate) {\n        this.document.off(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).off(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      }\n    },\n    _mouseDown: function _mouseDown(event) {\n      // don't let more than one widget handle mouseStart\n      if (mouseHandled) {\n        return;\n      }\n      this._mouseMoved = false;\n\n      // We may have missed mouseup (out of window)\n      this._mouseStarted && this._mouseUp(event);\n      this._mouseDownEvent = event;\n      var that = this,\n        btnIsLeft = event.which === 1,\n        // event.target.nodeName works around a bug in IE 8 with\n        // disabled inputs (#7620)\n        elIsCancel = typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;\n      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\n        return true;\n      }\n      this.mouseDelayMet = !this.options.delay;\n      if (!this.mouseDelayMet) {\n        this._mouseDelayTimer = setTimeout(function () {\n          that.mouseDelayMet = true;\n        }, this.options.delay);\n      }\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(event) !== false;\n        if (!this._mouseStarted) {\n          event.preventDefault();\n          return true;\n        }\n      }\n\n      // Click event may never have fired (Gecko & Opera)\n      if (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\n        $.removeData(event.target, this.widgetName + \".preventClickEvent\");\n      }\n\n      // These delegates are required to keep context\n      this._mouseMoveDelegate = function (event) {\n        return that._mouseMove(event);\n      };\n      this._mouseUpDelegate = function (event) {\n        return that._mouseUp(event);\n      };\n      this.document.on(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).on(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      event.preventDefault();\n      mouseHandled = true;\n      return true;\n    },\n    _mouseMove: function _mouseMove(event) {\n      // Only check for mouseups outside the document if you've moved inside the document\n      // at least once. This prevents the firing of mouseup in the case of IE<9, which will\n      // fire a mousemove event if content is placed under the cursor. See #7778\n      // Support: IE <9\n      if (this._mouseMoved) {\n        // IE mouseup check - mouseup happened when mouse was out of window\n        if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\n          return this._mouseUp(event);\n\n          // Iframe mouseup check - mouseup occurred in another document\n        } else if (!event.which) {\n          // Support: Safari <=8 - 9\n          // Safari sets which to 0 if you press any of the following keys\n          // during a drag (#14461)\n          if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {\n            this.ignoreMissingWhich = true;\n          } else if (!this.ignoreMissingWhich) {\n            return this._mouseUp(event);\n          }\n        }\n      }\n      if (event.which || event.button) {\n        this._mouseMoved = true;\n      }\n      if (this._mouseStarted) {\n        this._mouseDrag(event);\n        return event.preventDefault();\n      }\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;\n        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);\n      }\n      return !this._mouseStarted;\n    },\n    _mouseUp: function _mouseUp(event) {\n      this.document.off(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).off(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      if (this._mouseStarted) {\n        this._mouseStarted = false;\n        if (event.target === this._mouseDownEvent.target) {\n          $.data(event.target, this.widgetName + \".preventClickEvent\", true);\n        }\n        this._mouseStop(event);\n      }\n      if (this._mouseDelayTimer) {\n        clearTimeout(this._mouseDelayTimer);\n        delete this._mouseDelayTimer;\n      }\n      this.ignoreMissingWhich = false;\n      mouseHandled = false;\n      event.preventDefault();\n    },\n    _mouseDistanceMet: function _mouseDistanceMet(event) {\n      return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;\n    },\n    _mouseDelayMet: function _mouseDelayMet( /* event */\n    ) {\n      return this.mouseDelayMet;\n    },\n    // These are placeholder methods, to be overriden by extending plugin\n    _mouseStart: function _mouseStart( /* event */) {},\n    _mouseDrag: function _mouseDrag( /* event */) {},\n    _mouseStop: function _mouseStop( /* event */) {},\n    _mouseCapture: function _mouseCapture( /* event */) {\n      return true;\n    }\n  });\n\n  /*!\r\n   * jQuery UI Slider 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n\n  //>>label: Slider\n  //>>group: Widgets\n  //>>description: Displays a flexible slider with ranges and accessibility via keyboard.\n  //>>docs: http://api.jqueryui.com/slider/\n  //>>demos: http://jqueryui.com/slider/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/slider.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var widgetsSlider = $.widget(\"ui.slider\", $.ui.mouse, {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"slide\",\n    options: {\n      animate: false,\n      classes: {\n        \"ui-slider\": \"ui-corner-all\",\n        \"ui-slider-handle\": \"ui-corner-all\",\n        // Note: ui-widget-header isn't the most fittingly semantic framework class for this\n        // element, but worked best visually with a variety of themes\n        \"ui-slider-range\": \"ui-corner-all ui-widget-header\"\n      },\n      distance: 0,\n      max: 100,\n      min: 0,\n      orientation: \"horizontal\",\n      range: false,\n      step: 1,\n      value: 0,\n      values: null,\n      // Callbacks\n      change: null,\n      slide: null,\n      start: null,\n      stop: null\n    },\n    // Number of pages in a slider\n    // (how many times can you page up/down to go through the whole range)\n    numPages: 5,\n    _create: function _create() {\n      this._keySliding = false;\n      this._mouseSliding = false;\n      this._animateOff = true;\n      this._handleIndex = null;\n      this._detectOrientation();\n      this._mouseInit();\n      this._calculateNewMax();\n      this._addClass(\"ui-slider ui-slider-\" + this.orientation, \"ui-widget ui-widget-content\");\n      this._refresh();\n      this._animateOff = false;\n    },\n    _refresh: function _refresh() {\n      this._createRange();\n      this._createHandles();\n      this._setupEvents();\n      this._refreshValue();\n    },\n    _createHandles: function _createHandles() {\n      var i,\n        handleCount,\n        options = this.options,\n        existingHandles = this.element.find(\".ui-slider-handle\"),\n        handle = \"<span tabindex='0'></span>\",\n        handles = [];\n      handleCount = options.values && options.values.length || 1;\n      if (existingHandles.length > handleCount) {\n        existingHandles.slice(handleCount).remove();\n        existingHandles = existingHandles.slice(0, handleCount);\n      }\n      for (i = existingHandles.length; i < handleCount; i++) {\n        handles.push(handle);\n      }\n      this.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\n      this._addClass(this.handles, \"ui-slider-handle\", \"ui-state-default\");\n      this.handle = this.handles.eq(0);\n      this.handles.each(function (i) {\n        $(this).data(\"ui-slider-handle-index\", i).attr(\"tabIndex\", 0);\n      });\n    },\n    _createRange: function _createRange() {\n      var options = this.options;\n      if (options.range) {\n        if (options.range === true) {\n          if (!options.values) {\n            options.values = [this._valueMin(), this._valueMin()];\n          } else if (options.values.length && options.values.length !== 2) {\n            options.values = [options.values[0], options.values[0]];\n          } else if ($.isArray(options.values)) {\n            options.values = options.values.slice(0);\n          }\n        }\n        if (!this.range || !this.range.length) {\n          this.range = $(\"<div>\").appendTo(this.element);\n          this._addClass(this.range, \"ui-slider-range\");\n        } else {\n          this._removeClass(this.range, \"ui-slider-range-min ui-slider-range-max\");\n\n          // Handle range switching from true to min/max\n          this.range.css({\n            \"left\": \"\",\n            \"bottom\": \"\"\n          });\n        }\n        if (options.range === \"min\" || options.range === \"max\") {\n          this._addClass(this.range, \"ui-slider-range-\" + options.range);\n        }\n      } else {\n        if (this.range) {\n          this.range.remove();\n        }\n        this.range = null;\n      }\n    },\n    _setupEvents: function _setupEvents() {\n      this._off(this.handles);\n      this._on(this.handles, this._handleEvents);\n      this._hoverable(this.handles);\n      this._focusable(this.handles);\n    },\n    _destroy: function _destroy() {\n      this.handles.remove();\n      if (this.range) {\n        this.range.remove();\n      }\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var position,\n        normValue,\n        distance,\n        closestHandle,\n        index,\n        allowed,\n        offset,\n        mouseOverHandle,\n        that = this,\n        o = this.options;\n      if (o.disabled) {\n        return false;\n      }\n      this.elementSize = {\n        width: this.element.outerWidth(),\n        height: this.element.outerHeight()\n      };\n      this.elementOffset = this.element.offset();\n      position = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      normValue = this._normValueFromMouse(position);\n      distance = this._valueMax() - this._valueMin() + 1;\n      this.handles.each(function (i) {\n        var thisDistance = Math.abs(normValue - that.values(i));\n        if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {\n          distance = thisDistance;\n          closestHandle = $(this);\n          index = i;\n        }\n      });\n      allowed = this._start(event, index);\n      if (allowed === false) {\n        return false;\n      }\n      this._mouseSliding = true;\n      this._handleIndex = index;\n      this._addClass(closestHandle, null, \"ui-state-active\");\n      closestHandle.trigger(\"focus\");\n      offset = closestHandle.offset();\n      mouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\n      this._clickOffset = mouseOverHandle ? {\n        left: 0,\n        top: 0\n      } : {\n        left: event.pageX - offset.left - closestHandle.width() / 2,\n        top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) - (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) + (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\n      };\n      if (!this.handles.hasClass(\"ui-state-hover\")) {\n        this._slide(event, index, normValue);\n      }\n      this._animateOff = true;\n      return true;\n    },\n    _mouseStart: function _mouseStart() {\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var position = {\n          x: event.pageX,\n          y: event.pageY\n        },\n        normValue = this._normValueFromMouse(position);\n      this._slide(event, this._handleIndex, normValue);\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this._removeClass(this.handles, null, \"ui-state-active\");\n      this._mouseSliding = false;\n      this._stop(event, this._handleIndex);\n      this._change(event, this._handleIndex);\n      this._handleIndex = null;\n      this._clickOffset = null;\n      this._animateOff = false;\n      return false;\n    },\n    _detectOrientation: function _detectOrientation() {\n      this.orientation = this.options.orientation === \"vertical\" ? \"vertical\" : \"horizontal\";\n    },\n    _normValueFromMouse: function _normValueFromMouse(position) {\n      var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;\n      if (this.orientation === \"horizontal\") {\n        pixelTotal = this.elementSize.width;\n        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n      } else {\n        pixelTotal = this.elementSize.height;\n        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n      }\n      percentMouse = pixelMouse / pixelTotal;\n      if (percentMouse > 1) {\n        percentMouse = 1;\n      }\n      if (percentMouse < 0) {\n        percentMouse = 0;\n      }\n      if (this.orientation === \"vertical\") {\n        percentMouse = 1 - percentMouse;\n      }\n      valueTotal = this._valueMax() - this._valueMin();\n      valueMouse = this._valueMin() + percentMouse * valueTotal;\n      return this._trimAlignValue(valueMouse);\n    },\n    _uiHash: function _uiHash(index, value, values) {\n      var uiHash = {\n        handle: this.handles[index],\n        handleIndex: index,\n        value: value !== undefined ? value : this.value()\n      };\n      if (this._hasMultipleValues()) {\n        uiHash.value = value !== undefined ? value : this.values(index);\n        uiHash.values = values || this.values();\n      }\n      return uiHash;\n    },\n    _hasMultipleValues: function _hasMultipleValues() {\n      return this.options.values && this.options.values.length;\n    },\n    _start: function _start(event, index) {\n      return this._trigger(\"start\", event, this._uiHash(index));\n    },\n    _slide: function _slide(event, index, newVal) {\n      var allowed,\n        otherVal,\n        currentValue = this.value(),\n        newValues = this.values();\n      if (this._hasMultipleValues()) {\n        otherVal = this.values(index ? 0 : 1);\n        currentValue = this.values(index);\n        if (this.options.values.length === 2 && this.options.range === true) {\n          newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal);\n        }\n        newValues[index] = newVal;\n      }\n      if (newVal === currentValue) {\n        return;\n      }\n      allowed = this._trigger(\"slide\", event, this._uiHash(index, newVal, newValues));\n\n      // A slide can be canceled by returning false from the slide callback\n      if (allowed === false) {\n        return;\n      }\n      if (this._hasMultipleValues()) {\n        this.values(index, newVal);\n      } else {\n        this.value(newVal);\n      }\n    },\n    _stop: function _stop(event, index) {\n      this._trigger(\"stop\", event, this._uiHash(index));\n    },\n    _change: function _change(event, index) {\n      if (!this._keySliding && !this._mouseSliding) {\n        //store the last changed value index for reference when handles overlap\n        this._lastChangedValue = index;\n        this._trigger(\"change\", event, this._uiHash(index));\n      }\n    },\n    value: function value(newValue) {\n      if (arguments.length) {\n        this.options.value = this._trimAlignValue(newValue);\n        this._refreshValue();\n        this._change(null, 0);\n        return;\n      }\n      return this._value();\n    },\n    values: function values(index, newValue) {\n      var vals, newValues, i;\n      if (arguments.length > 1) {\n        this.options.values[index] = this._trimAlignValue(newValue);\n        this._refreshValue();\n        this._change(null, index);\n        return;\n      }\n      if (arguments.length) {\n        if ($.isArray(arguments[0])) {\n          vals = this.options.values;\n          newValues = arguments[0];\n          for (i = 0; i < vals.length; i += 1) {\n            vals[i] = this._trimAlignValue(newValues[i]);\n            this._change(null, i);\n          }\n          this._refreshValue();\n        } else {\n          if (this._hasMultipleValues()) {\n            return this._values(index);\n          } else {\n            return this.value();\n          }\n        }\n      } else {\n        return this._values();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var i,\n        valsLength = 0;\n      if (key === \"range\" && this.options.range === true) {\n        if (value === \"min\") {\n          this.options.value = this._values(0);\n          this.options.values = null;\n        } else if (value === \"max\") {\n          this.options.value = this._values(this.options.values.length - 1);\n          this.options.values = null;\n        }\n      }\n      if ($.isArray(this.options.values)) {\n        valsLength = this.options.values.length;\n      }\n      this._super(key, value);\n      switch (key) {\n        case \"orientation\":\n          this._detectOrientation();\n          this._removeClass(\"ui-slider-horizontal ui-slider-vertical\")._addClass(\"ui-slider-\" + this.orientation);\n          this._refreshValue();\n          if (this.options.range) {\n            this._refreshRange(value);\n          }\n\n          // Reset positioning from previous orientation\n          this.handles.css(value === \"horizontal\" ? \"bottom\" : \"left\", \"\");\n          break;\n        case \"value\":\n          this._animateOff = true;\n          this._refreshValue();\n          this._change(null, 0);\n          this._animateOff = false;\n          break;\n        case \"values\":\n          this._animateOff = true;\n          this._refreshValue();\n\n          // Start from the last handle to prevent unreachable handles (#9046)\n          for (i = valsLength - 1; i >= 0; i--) {\n            this._change(null, i);\n          }\n          this._animateOff = false;\n          break;\n        case \"step\":\n        case \"min\":\n        case \"max\":\n          this._animateOff = true;\n          this._calculateNewMax();\n          this._refreshValue();\n          this._animateOff = false;\n          break;\n        case \"range\":\n          this._animateOff = true;\n          this._refresh();\n          this._animateOff = false;\n          break;\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n    },\n    //internal value getter\n    // _value() returns value trimmed by min and max, aligned by step\n    _value: function _value() {\n      var val = this.options.value;\n      val = this._trimAlignValue(val);\n      return val;\n    },\n    //internal values getter\n    // _values() returns array of values trimmed by min and max, aligned by step\n    // _values( index ) returns single value trimmed by min and max, aligned by step\n    _values: function _values(index) {\n      var val, vals, i;\n      if (arguments.length) {\n        val = this.options.values[index];\n        val = this._trimAlignValue(val);\n        return val;\n      } else if (this._hasMultipleValues()) {\n        // .slice() creates a copy of the array\n        // this copy gets trimmed by min and max and then returned\n        vals = this.options.values.slice();\n        for (i = 0; i < vals.length; i += 1) {\n          vals[i] = this._trimAlignValue(vals[i]);\n        }\n        return vals;\n      } else {\n        return [];\n      }\n    },\n    // Returns the step-aligned value that val is closest to, between (inclusive) min and max\n    _trimAlignValue: function _trimAlignValue(val) {\n      if (val <= this._valueMin()) {\n        return this._valueMin();\n      }\n      if (val >= this._valueMax()) {\n        return this._valueMax();\n      }\n      var step = this.options.step > 0 ? this.options.step : 1,\n        valModStep = (val - this._valueMin()) % step,\n        alignValue = val - valModStep;\n      if (Math.abs(valModStep) * 2 >= step) {\n        alignValue += valModStep > 0 ? step : -step;\n      }\n\n      // Since JavaScript has problems with large floats, round\n      // the final value to 5 digits after the decimal point (see #4124)\n      return parseFloat(alignValue.toFixed(5));\n    },\n    _calculateNewMax: function _calculateNewMax() {\n      var max = this.options.max,\n        min = this._valueMin(),\n        step = this.options.step,\n        aboveMin = Math.round((max - min) / step) * step;\n      max = aboveMin + min;\n      if (max > this.options.max) {\n        //If max is not divisible by step, rounding off may increase its value\n        max -= step;\n      }\n      this.max = parseFloat(max.toFixed(this._precision()));\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n        decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _valueMin: function _valueMin() {\n      return this.options.min;\n    },\n    _valueMax: function _valueMax() {\n      return this.max;\n    },\n    _refreshRange: function _refreshRange(orientation) {\n      if (orientation === \"vertical\") {\n        this.range.css({\n          \"width\": \"\",\n          \"left\": \"\"\n        });\n      }\n      if (orientation === \"horizontal\") {\n        this.range.css({\n          \"height\": \"\",\n          \"bottom\": \"\"\n        });\n      }\n    },\n    _refreshValue: function _refreshValue() {\n      var lastValPercent,\n        valPercent,\n        value,\n        valueMin,\n        valueMax,\n        oRange = this.options.range,\n        o = this.options,\n        that = this,\n        animate = !this._animateOff ? o.animate : false,\n        _set = {};\n      if (this._hasMultipleValues()) {\n        this.handles.each(function (i) {\n          valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\n          _set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n          $(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n          if (that.options.range === true) {\n            if (that.orientation === \"horizontal\") {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  left: valPercent + \"%\"\n                }, o.animate);\n              }\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  width: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            } else {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  bottom: valPercent + \"%\"\n                }, o.animate);\n              }\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  height: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            }\n          }\n          lastValPercent = valPercent;\n        });\n      } else {\n        value = this.value();\n        valueMin = this._valueMin();\n        valueMax = this._valueMax();\n        valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;\n        _set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n        this.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n        if (oRange === \"min\" && this.orientation === \"horizontal\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            width: valPercent + \"%\"\n          }, o.animate);\n        }\n        if (oRange === \"max\" && this.orientation === \"horizontal\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            width: 100 - valPercent + \"%\"\n          }, o.animate);\n        }\n        if (oRange === \"min\" && this.orientation === \"vertical\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            height: valPercent + \"%\"\n          }, o.animate);\n        }\n        if (oRange === \"max\" && this.orientation === \"vertical\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            height: 100 - valPercent + \"%\"\n          }, o.animate);\n        }\n      }\n    },\n    _handleEvents: {\n      keydown: function keydown(event) {\n        var allowed,\n          curVal,\n          newVal,\n          step,\n          index = $(event.target).data(\"ui-slider-handle-index\");\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_UP:\n          case $.ui.keyCode.PAGE_DOWN:\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            event.preventDefault();\n            if (!this._keySliding) {\n              this._keySliding = true;\n              this._addClass($(event.target), null, \"ui-state-active\");\n              allowed = this._start(event, index);\n              if (allowed === false) {\n                return;\n              }\n            }\n            break;\n        }\n        step = this.options.step;\n        if (this._hasMultipleValues()) {\n          curVal = newVal = this.values(index);\n        } else {\n          curVal = newVal = this.value();\n        }\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n            newVal = this._valueMin();\n            break;\n          case $.ui.keyCode.END:\n            newVal = this._valueMax();\n            break;\n          case $.ui.keyCode.PAGE_UP:\n            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);\n            break;\n          case $.ui.keyCode.PAGE_DOWN:\n            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);\n            break;\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n            if (curVal === this._valueMax()) {\n              return;\n            }\n            newVal = this._trimAlignValue(curVal + step);\n            break;\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            if (curVal === this._valueMin()) {\n              return;\n            }\n            newVal = this._trimAlignValue(curVal - step);\n            break;\n        }\n        this._slide(event, index, newVal);\n      },\n      keyup: function keyup(event) {\n        var index = $(event.target).data(\"ui-slider-handle-index\");\n        if (this._keySliding) {\n          this._keySliding = false;\n          this._stop(event, index);\n          this._change(event, index);\n          this._removeClass($(event.target), null, \"ui-state-active\");\n        }\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/jquery-ui.js\n");

/***/ }),

/***/ "./resources/js/landing-page/jquery.easing.1.3.js":
/*!********************************************************!*\
  !*** ./resources/js/landing-page/jquery.easing.1.3.js ***!
  \********************************************************/
/***/ (() => {

eval("/*\r\n * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/\r\n *\r\n * Uses the built in easing capabilities added In jQuery 1.1\r\n * to offer multiple easing options\r\n *\r\n * TERMS OF USE - jQuery Easing\r\n * \r\n * Open source under the BSD License. \r\n * \r\n * Copyright Ã‚Â© 2008 George McGinley Smith\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without modification, \r\n * are permitted provided that the following conditions are met:\r\n * \r\n * Redistributions of source code must retain the above copyright notice, this list of \r\n * conditions and the following disclaimer.\r\n * Redistributions in binary form must reproduce the above copyright notice, this list \r\n * of conditions and the following disclaimer in the documentation and/or other materials \r\n * provided with the distribution.\r\n * \r\n * Neither the name of the author nor the names of contributors may be used to endorse \r\n * or promote products derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\r\n *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \r\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \r\n * OF THE POSSIBILITY OF SUCH DAMAGE. \r\n *\r\n*/\n\n// t: current time, b: begInnIng value, c: change In value, d: duration\njQuery.easing['jswing'] = jQuery.easing['swing'];\njQuery.extend(jQuery.easing, {\n  def: 'easeOutQuad',\n  swing: function swing(x, t, b, c, d) {\n    //alert(jQuery.easing.default);\n    return jQuery.easing[jQuery.easing.def](x, t, b, c, d);\n  },\n  easeInQuad: function easeInQuad(x, t, b, c, d) {\n    return c * (t /= d) * t + b;\n  },\n  easeOutQuad: function easeOutQuad(x, t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  easeInOutQuad: function easeInOutQuad(x, t, b, c, d) {\n    if ((t /= d / 2) < 1) return c / 2 * t * t + b;\n    return -c / 2 * (--t * (t - 2) - 1) + b;\n  },\n  easeInCubic: function easeInCubic(x, t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n  },\n  easeOutCubic: function easeOutCubic(x, t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  },\n  easeInOutCubic: function easeInOutCubic(x, t, b, c, d) {\n    if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n  },\n  easeInQuart: function easeInQuart(x, t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n  },\n  easeOutQuart: function easeOutQuart(x, t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  },\n  easeInOutQuart: function easeInOutQuart(x, t, b, c, d) {\n    if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n  },\n  easeInQuint: function easeInQuint(x, t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n  },\n  easeOutQuint: function easeOutQuint(x, t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  },\n  easeInOutQuint: function easeInOutQuint(x, t, b, c, d) {\n    if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n  },\n  easeInSine: function easeInSine(x, t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  },\n  easeOutSine: function easeOutSine(x, t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  },\n  easeInOutSine: function easeInOutSine(x, t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  },\n  easeInExpo: function easeInExpo(x, t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n  },\n  easeOutExpo: function easeOutExpo(x, t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  },\n  easeInOutExpo: function easeInOutExpo(x, t, b, c, d) {\n    if (t == 0) return b;\n    if (t == d) return b + c;\n    if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n  },\n  easeInCirc: function easeInCirc(x, t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  },\n  easeOutCirc: function easeOutCirc(x, t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  },\n  easeInOutCirc: function easeInOutCirc(x, t, b, c, d) {\n    if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n  },\n  easeInElastic: function easeInElastic(x, t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t == 0) return b;\n    if ((t /= d) == 1) return b + c;\n    if (!p) p = d * .3;\n    if (a < Math.abs(c)) {\n      a = c;\n      var s = p / 4;\n    } else var s = p / (2 * Math.PI) * Math.asin(c / a);\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n  },\n  easeOutElastic: function easeOutElastic(x, t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t == 0) return b;\n    if ((t /= d) == 1) return b + c;\n    if (!p) p = d * .3;\n    if (a < Math.abs(c)) {\n      a = c;\n      var s = p / 4;\n    } else var s = p / (2 * Math.PI) * Math.asin(c / a);\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n  },\n  easeInOutElastic: function easeInOutElastic(x, t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t == 0) return b;\n    if ((t /= d / 2) == 2) return b + c;\n    if (!p) p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n      a = c;\n      var s = p / 4;\n    } else var s = p / (2 * Math.PI) * Math.asin(c / a);\n    if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n  },\n  easeInBack: function easeInBack(x, t, b, c, d, s) {\n    if (s == undefined) s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  },\n  easeOutBack: function easeOutBack(x, t, b, c, d, s) {\n    if (s == undefined) s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  },\n  easeInOutBack: function easeInOutBack(x, t, b, c, d, s) {\n    if (s == undefined) s = 1.70158;\n    if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n  },\n  easeInBounce: function easeInBounce(x, t, b, c, d) {\n    return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;\n  },\n  easeOutBounce: function easeOutBounce(x, t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n      return c * (7.5625 * t * t) + b;\n    } else if (t < 2 / 2.75) {\n      return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;\n    } else if (t < 2.5 / 2.75) {\n      return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;\n    } else {\n      return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;\n    }\n  },\n  easeInOutBounce: function easeInOutBounce(x, t, b, c, d) {\n    if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;\n    return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n  }\n});\n\n/*\r\n *\r\n * TERMS OF USE - EASING EQUATIONS\r\n * \r\n * Open source under the BSD License. \r\n * \r\n * Copyright Ã‚Â© 2001 Robert Penner\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without modification, \r\n * are permitted provided that the following conditions are met:\r\n * \r\n * Redistributions of source code must retain the above copyright notice, this list of \r\n * conditions and the following disclaimer.\r\n * Redistributions in binary form must reproduce the above copyright notice, this list \r\n * of conditions and the following disclaimer in the documentation and/or other materials \r\n * provided with the distribution.\r\n * \r\n * Neither the name of the author nor the names of contributors may be used to endorse \r\n * or promote products derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\r\n *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \r\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \r\n * OF THE POSSIBILITY OF SUCH DAMAGE. \r\n *\r\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/jquery.easing.1.3.js\n");

/***/ }),

/***/ "./resources/js/landing-page/jquery.fancybox.min.js":
/*!**********************************************************!*\
  !*** ./resources/js/landing-page/jquery.fancybox.min.js ***!
  \**********************************************************/
/***/ (() => {

eval("// ==================================================\n// fancyBox v3.5.6\n//\n// Licensed GPLv3 for open source use\n// or fancyBox Commercial License for commercial use\n//\n// http://fancyapps.com/fancybox/\n// Copyright 2018 fancyApps\n//\n// ==================================================\n!function (t, e, n, o) {\n  \"use strict\";\n\n  function i(t, e) {\n    var o,\n      i,\n      a,\n      s = [],\n      r = 0;\n    t && t.isDefaultPrevented() || (t.preventDefault(), e = e || {}, t && t.data && (e = h(t.data.options, e)), o = e.$target || n(t.currentTarget).trigger(\"blur\"), (a = n.fancybox.getInstance()) && a.$trigger && a.$trigger.is(o) || (e.selector ? s = n(e.selector) : (i = o.attr(\"data-fancybox\") || \"\", i ? (s = t.data ? t.data.items : [], s = s.length ? s.filter('[data-fancybox=\"' + i + '\"]') : n('[data-fancybox=\"' + i + '\"]')) : s = [o]), r = n(s).index(o), r < 0 && (r = 0), a = n.fancybox.open(s, e, r), a.$trigger = o));\n  }\n  if (t.console = t.console || {\n    info: function info(t) {}\n  }, n) {\n    if (n.fn.fancybox) return void console.info(\"fancyBox already initialized\");\n    var a = {\n        closeExisting: !1,\n        loop: !1,\n        gutter: 50,\n        keyboard: !0,\n        preventCaptionOverlap: !0,\n        arrows: !0,\n        infobar: !0,\n        smallBtn: \"auto\",\n        toolbar: \"auto\",\n        buttons: [\"zoom\", \"slideShow\", \"thumbs\", \"close\"],\n        idleTime: 3,\n        protect: !1,\n        modal: !1,\n        image: {\n          preload: !1\n        },\n        ajax: {\n          settings: {\n            data: {\n              fancybox: !0\n            }\n          }\n        },\n        iframe: {\n          tpl: '<iframe id=\"fancybox-frame{rnd}\" name=\"fancybox-frame{rnd}\" class=\"fancybox-iframe\" allowfullscreen=\"allowfullscreen\" allow=\"autoplay; fullscreen\" src=\"\"></iframe>',\n          preload: !0,\n          css: {},\n          attr: {\n            scrolling: \"auto\"\n          }\n        },\n        video: {\n          tpl: '<video class=\"fancybox-video\" controls controlsList=\"nodownload\" poster=\"{{poster}}\"><source src=\"{{src}}\" type=\"{{format}}\" />Sorry, your browser doesn\\'t support embedded videos, <a href=\"{{src}}\">download</a> and watch with your favorite video player!</video>',\n          format: \"\",\n          autoStart: !0\n        },\n        defaultType: \"image\",\n        animationEffect: \"zoom\",\n        animationDuration: 366,\n        zoomOpacity: \"auto\",\n        transitionEffect: \"fade\",\n        transitionDuration: 366,\n        slideClass: \"\",\n        baseClass: \"\",\n        baseTpl: '<div class=\"fancybox-container\" role=\"dialog\" tabindex=\"-1\"><div class=\"fancybox-bg\"></div><div class=\"fancybox-inner\"><div class=\"fancybox-infobar\"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class=\"fancybox-toolbar\">{{buttons}}</div><div class=\"fancybox-navigation\">{{arrows}}</div><div class=\"fancybox-stage\"></div><div class=\"fancybox-caption\"><div class=\"fancybox-caption__body\"></div></div></div></div>',\n        spinnerTpl: '<div class=\"fancybox-loading\"></div>',\n        errorTpl: '<div class=\"fancybox-error\"><p>{{ERROR}}</p></div>',\n        btnTpl: {\n          download: '<a download data-fancybox-download class=\"fancybox-button fancybox-button--download\" title=\"{{DOWNLOAD}}\" href=\"javascript:;\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z\"/></svg></a>',\n          zoom: '<button data-fancybox-zoom class=\"fancybox-button fancybox-button--zoom\" title=\"{{ZOOM}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z\"/></svg></button>',\n          close: '<button data-fancybox-close class=\"fancybox-button fancybox-button--close\" title=\"{{CLOSE}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z\"/></svg></button>',\n          arrowLeft: '<button data-fancybox-prev class=\"fancybox-button fancybox-button--arrow_left\" title=\"{{PREV}}\"><div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z\"/></svg></div></button>',\n          arrowRight: '<button data-fancybox-next class=\"fancybox-button fancybox-button--arrow_right\" title=\"{{NEXT}}\"><div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z\"/></svg></div></button>',\n          smallBtn: '<button type=\"button\" data-fancybox-close class=\"fancybox-button fancybox-close-small\" title=\"{{CLOSE}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1\" viewBox=\"0 0 24 24\"><path d=\"M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z\"/></svg></button>'\n        },\n        parentEl: \"body\",\n        hideScrollbar: !0,\n        autoFocus: !0,\n        backFocus: !0,\n        trapFocus: !0,\n        fullScreen: {\n          autoStart: !1\n        },\n        touch: {\n          vertical: !0,\n          momentum: !0\n        },\n        hash: null,\n        media: {},\n        slideShow: {\n          autoStart: !1,\n          speed: 3e3\n        },\n        thumbs: {\n          autoStart: !1,\n          hideOnClose: !0,\n          parentEl: \".fancybox-container\",\n          axis: \"y\"\n        },\n        wheel: \"auto\",\n        onInit: n.noop,\n        beforeLoad: n.noop,\n        afterLoad: n.noop,\n        beforeShow: n.noop,\n        afterShow: n.noop,\n        beforeClose: n.noop,\n        afterClose: n.noop,\n        onActivate: n.noop,\n        onDeactivate: n.noop,\n        clickContent: function clickContent(t, e) {\n          return \"image\" === t.type && \"zoom\";\n        },\n        clickSlide: \"close\",\n        clickOutside: \"close\",\n        dblclickContent: !1,\n        dblclickSlide: !1,\n        dblclickOutside: !1,\n        mobile: {\n          preventCaptionOverlap: !1,\n          idleTime: !1,\n          clickContent: function clickContent(t, e) {\n            return \"image\" === t.type && \"toggleControls\";\n          },\n          clickSlide: function clickSlide(t, e) {\n            return \"image\" === t.type ? \"toggleControls\" : \"close\";\n          },\n          dblclickContent: function dblclickContent(t, e) {\n            return \"image\" === t.type && \"zoom\";\n          },\n          dblclickSlide: function dblclickSlide(t, e) {\n            return \"image\" === t.type && \"zoom\";\n          }\n        },\n        lang: \"en\",\n        i18n: {\n          en: {\n            CLOSE: \"Close\",\n            NEXT: \"Next\",\n            PREV: \"Previous\",\n            ERROR: \"The requested content cannot be loaded. <br/> Please try again later.\",\n            PLAY_START: \"Start slideshow\",\n            PLAY_STOP: \"Pause slideshow\",\n            FULL_SCREEN: \"Full screen\",\n            THUMBS: \"Thumbnails\",\n            DOWNLOAD: \"Download\",\n            SHARE: \"Share\",\n            ZOOM: \"Zoom\"\n          },\n          de: {\n            CLOSE: \"Schlie&szlig;en\",\n            NEXT: \"Weiter\",\n            PREV: \"Zur&uuml;ck\",\n            ERROR: \"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.\",\n            PLAY_START: \"Diaschau starten\",\n            PLAY_STOP: \"Diaschau beenden\",\n            FULL_SCREEN: \"Vollbild\",\n            THUMBS: \"Vorschaubilder\",\n            DOWNLOAD: \"Herunterladen\",\n            SHARE: \"Teilen\",\n            ZOOM: \"Vergr&ouml;&szlig;ern\"\n          }\n        }\n      },\n      s = n(t),\n      r = n(e),\n      c = 0,\n      l = function l(t) {\n        return t && t.hasOwnProperty && t instanceof n;\n      },\n      d = function () {\n        return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || function (e) {\n          return t.setTimeout(e, 1e3 / 60);\n        };\n      }(),\n      u = function () {\n        return t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || function (e) {\n          t.clearTimeout(e);\n        };\n      }(),\n      f = function () {\n        var t,\n          n = e.createElement(\"fakeelement\"),\n          o = {\n            transition: \"transitionend\",\n            OTransition: \"oTransitionEnd\",\n            MozTransition: \"transitionend\",\n            WebkitTransition: \"webkitTransitionEnd\"\n          };\n        for (t in o) if (void 0 !== n.style[t]) return o[t];\n        return \"transitionend\";\n      }(),\n      p = function p(t) {\n        return t && t.length && t[0].offsetHeight;\n      },\n      h = function h(t, e) {\n        var o = n.extend(!0, {}, t, e);\n        return n.each(e, function (t, e) {\n          n.isArray(e) && (o[t] = e);\n        }), o;\n      },\n      g = function g(t) {\n        var o, i;\n        return !(!t || t.ownerDocument !== e) && (n(\".fancybox-container\").css(\"pointer-events\", \"none\"), o = {\n          x: t.getBoundingClientRect().left + t.offsetWidth / 2,\n          y: t.getBoundingClientRect().top + t.offsetHeight / 2\n        }, i = e.elementFromPoint(o.x, o.y) === t, n(\".fancybox-container\").css(\"pointer-events\", \"\"), i);\n      },\n      b = function b(t, e, o) {\n        var i = this;\n        i.opts = h({\n          index: o\n        }, n.fancybox.defaults), n.isPlainObject(e) && (i.opts = h(i.opts, e)), n.fancybox.isMobile && (i.opts = h(i.opts, i.opts.mobile)), i.id = i.opts.id || ++c, i.currIndex = parseInt(i.opts.index, 10) || 0, i.prevIndex = null, i.prevPos = null, i.currPos = 0, i.firstRun = !0, i.group = [], i.slides = {}, i.addContent(t), i.group.length && i.init();\n      };\n    n.extend(b.prototype, {\n      init: function init() {\n        var o,\n          i,\n          a = this,\n          s = a.group[a.currIndex],\n          r = s.opts;\n        r.closeExisting && n.fancybox.close(!0), n(\"body\").addClass(\"fancybox-active\"), !n.fancybox.getInstance() && !1 !== r.hideScrollbar && !n.fancybox.isMobile && e.body.scrollHeight > t.innerHeight && (n(\"head\").append('<style id=\"fancybox-style-noscroll\" type=\"text/css\">.compensate-for-scrollbar{margin-right:' + (t.innerWidth - e.documentElement.clientWidth) + \"px;}</style>\"), n(\"body\").addClass(\"compensate-for-scrollbar\")), i = \"\", n.each(r.buttons, function (t, e) {\n          i += r.btnTpl[e] || \"\";\n        }), o = n(a.translate(a, r.baseTpl.replace(\"{{buttons}}\", i).replace(\"{{arrows}}\", r.btnTpl.arrowLeft + r.btnTpl.arrowRight))).attr(\"id\", \"fancybox-container-\" + a.id).addClass(r.baseClass).data(\"FancyBox\", a).appendTo(r.parentEl), a.$refs = {\n          container: o\n        }, [\"bg\", \"inner\", \"infobar\", \"toolbar\", \"stage\", \"caption\", \"navigation\"].forEach(function (t) {\n          a.$refs[t] = o.find(\".fancybox-\" + t);\n        }), a.trigger(\"onInit\"), a.activate(), a.jumpTo(a.currIndex);\n      },\n      translate: function translate(t, e) {\n        var n = t.opts.i18n[t.opts.lang] || t.opts.i18n.en;\n        return e.replace(/\\{\\{(\\w+)\\}\\}/g, function (t, e) {\n          return void 0 === n[e] ? t : n[e];\n        });\n      },\n      addContent: function addContent(t) {\n        var e,\n          o = this,\n          i = n.makeArray(t);\n        n.each(i, function (t, e) {\n          var i,\n            a,\n            s,\n            r,\n            c,\n            l = {},\n            d = {};\n          n.isPlainObject(e) ? (l = e, d = e.opts || e) : \"object\" === n.type(e) && n(e).length ? (i = n(e), d = i.data() || {}, d = n.extend(!0, {}, d, d.options), d.$orig = i, l.src = o.opts.src || d.src || i.attr(\"href\"), l.type || l.src || (l.type = \"inline\", l.src = e)) : l = {\n            type: \"html\",\n            src: e + \"\"\n          }, l.opts = n.extend(!0, {}, o.opts, d), n.isArray(d.buttons) && (l.opts.buttons = d.buttons), n.fancybox.isMobile && l.opts.mobile && (l.opts = h(l.opts, l.opts.mobile)), a = l.type || l.opts.type, r = l.src || \"\", !a && r && ((s = r.match(/\\.(mp4|mov|ogv|webm)((\\?|#).*)?$/i)) ? (a = \"video\", l.opts.video.format || (l.opts.video.format = \"video/\" + (\"ogv\" === s[1] ? \"ogg\" : s[1]))) : r.match(/(^data:image\\/[a-z0-9+\\/=]*,)|(\\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\\?|#).*)?$)/i) ? a = \"image\" : r.match(/\\.(pdf)((\\?|#).*)?$/i) ? (a = \"iframe\", l = n.extend(!0, l, {\n            contentType: \"pdf\",\n            opts: {\n              iframe: {\n                preload: !1\n              }\n            }\n          })) : \"#\" === r.charAt(0) && (a = \"inline\")), a ? l.type = a : o.trigger(\"objectNeedsType\", l), l.contentType || (l.contentType = n.inArray(l.type, [\"html\", \"inline\", \"ajax\"]) > -1 ? \"html\" : l.type), l.index = o.group.length, \"auto\" == l.opts.smallBtn && (l.opts.smallBtn = n.inArray(l.type, [\"html\", \"inline\", \"ajax\"]) > -1), \"auto\" === l.opts.toolbar && (l.opts.toolbar = !l.opts.smallBtn), l.$thumb = l.opts.$thumb || null, l.opts.$trigger && l.index === o.opts.index && (l.$thumb = l.opts.$trigger.find(\"img:first\"), l.$thumb.length && (l.opts.$orig = l.opts.$trigger)), l.$thumb && l.$thumb.length || !l.opts.$orig || (l.$thumb = l.opts.$orig.find(\"img:first\")), l.$thumb && !l.$thumb.length && (l.$thumb = null), l.thumb = l.opts.thumb || (l.$thumb ? l.$thumb[0].src : null), \"function\" === n.type(l.opts.caption) && (l.opts.caption = l.opts.caption.apply(e, [o, l])), \"function\" === n.type(o.opts.caption) && (l.opts.caption = o.opts.caption.apply(e, [o, l])), l.opts.caption instanceof n || (l.opts.caption = void 0 === l.opts.caption ? \"\" : l.opts.caption + \"\"), \"ajax\" === l.type && (c = r.split(/\\s+/, 2), c.length > 1 && (l.src = c.shift(), l.opts.filter = c.shift())), l.opts.modal && (l.opts = n.extend(!0, l.opts, {\n            trapFocus: !0,\n            infobar: 0,\n            toolbar: 0,\n            smallBtn: 0,\n            keyboard: 0,\n            slideShow: 0,\n            fullScreen: 0,\n            thumbs: 0,\n            touch: 0,\n            clickContent: !1,\n            clickSlide: !1,\n            clickOutside: !1,\n            dblclickContent: !1,\n            dblclickSlide: !1,\n            dblclickOutside: !1\n          })), o.group.push(l);\n        }), Object.keys(o.slides).length && (o.updateControls(), (e = o.Thumbs) && e.isActive && (e.create(), e.focus()));\n      },\n      addEvents: function addEvents() {\n        var e = this;\n        e.removeEvents(), e.$refs.container.on(\"click.fb-close\", \"[data-fancybox-close]\", function (t) {\n          t.stopPropagation(), t.preventDefault(), e.close(t);\n        }).on(\"touchstart.fb-prev click.fb-prev\", \"[data-fancybox-prev]\", function (t) {\n          t.stopPropagation(), t.preventDefault(), e.previous();\n        }).on(\"touchstart.fb-next click.fb-next\", \"[data-fancybox-next]\", function (t) {\n          t.stopPropagation(), t.preventDefault(), e.next();\n        }).on(\"click.fb\", \"[data-fancybox-zoom]\", function (t) {\n          e[e.isScaledDown() ? \"scaleToActual\" : \"scaleToFit\"]();\n        }), s.on(\"orientationchange.fb resize.fb\", function (t) {\n          t && t.originalEvent && \"resize\" === t.originalEvent.type ? (e.requestId && u(e.requestId), e.requestId = d(function () {\n            e.update(t);\n          })) : (e.current && \"iframe\" === e.current.type && e.$refs.stage.hide(), setTimeout(function () {\n            e.$refs.stage.show(), e.update(t);\n          }, n.fancybox.isMobile ? 600 : 250));\n        }), r.on(\"keydown.fb\", function (t) {\n          var o = n.fancybox ? n.fancybox.getInstance() : null,\n            i = o.current,\n            a = t.keyCode || t.which;\n          if (9 == a) return void (i.opts.trapFocus && e.focus(t));\n          if (!(!i.opts.keyboard || t.ctrlKey || t.altKey || t.shiftKey || n(t.target).is(\"input,textarea,video,audio\"))) return 8 === a || 27 === a ? (t.preventDefault(), void e.close(t)) : 37 === a || 38 === a ? (t.preventDefault(), void e.previous()) : 39 === a || 40 === a ? (t.preventDefault(), void e.next()) : void e.trigger(\"afterKeydown\", t, a);\n        }), e.group[e.currIndex].opts.idleTime && (e.idleSecondsCounter = 0, r.on(\"mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle\", function (t) {\n          e.idleSecondsCounter = 0, e.isIdle && e.showControls(), e.isIdle = !1;\n        }), e.idleInterval = t.setInterval(function () {\n          ++e.idleSecondsCounter >= e.group[e.currIndex].opts.idleTime && !e.isDragging && (e.isIdle = !0, e.idleSecondsCounter = 0, e.hideControls());\n        }, 1e3));\n      },\n      removeEvents: function removeEvents() {\n        var e = this;\n        s.off(\"orientationchange.fb resize.fb\"), r.off(\"keydown.fb .fb-idle\"), this.$refs.container.off(\".fb-close .fb-prev .fb-next\"), e.idleInterval && (t.clearInterval(e.idleInterval), e.idleInterval = null);\n      },\n      previous: function previous(t) {\n        return this.jumpTo(this.currPos - 1, t);\n      },\n      next: function next(t) {\n        return this.jumpTo(this.currPos + 1, t);\n      },\n      jumpTo: function jumpTo(t, e) {\n        var o,\n          i,\n          a,\n          s,\n          r,\n          c,\n          l,\n          d,\n          u,\n          f = this,\n          h = f.group.length;\n        if (!(f.isDragging || f.isClosing || f.isAnimating && f.firstRun)) {\n          if (t = parseInt(t, 10), !(a = f.current ? f.current.opts.loop : f.opts.loop) && (t < 0 || t >= h)) return !1;\n          if (o = f.firstRun = !Object.keys(f.slides).length, r = f.current, f.prevIndex = f.currIndex, f.prevPos = f.currPos, s = f.createSlide(t), h > 1 && ((a || s.index < h - 1) && f.createSlide(t + 1), (a || s.index > 0) && f.createSlide(t - 1)), f.current = s, f.currIndex = s.index, f.currPos = s.pos, f.trigger(\"beforeShow\", o), f.updateControls(), s.forcedDuration = void 0, n.isNumeric(e) ? s.forcedDuration = e : e = s.opts[o ? \"animationDuration\" : \"transitionDuration\"], e = parseInt(e, 10), i = f.isMoved(s), s.$slide.addClass(\"fancybox-slide--current\"), o) return s.opts.animationEffect && e && f.$refs.container.css(\"transition-duration\", e + \"ms\"), f.$refs.container.addClass(\"fancybox-is-open\").trigger(\"focus\"), f.loadSlide(s), void f.preload(\"image\");\n          c = n.fancybox.getTranslate(r.$slide), l = n.fancybox.getTranslate(f.$refs.stage), n.each(f.slides, function (t, e) {\n            n.fancybox.stop(e.$slide, !0);\n          }), r.pos !== s.pos && (r.isComplete = !1), r.$slide.removeClass(\"fancybox-slide--complete fancybox-slide--current\"), i ? (u = c.left - (r.pos * c.width + r.pos * r.opts.gutter), n.each(f.slides, function (t, o) {\n            o.$slide.removeClass(\"fancybox-animated\").removeClass(function (t, e) {\n              return (e.match(/(^|\\s)fancybox-fx-\\S+/g) || []).join(\" \");\n            });\n            var i = o.pos * c.width + o.pos * o.opts.gutter;\n            n.fancybox.setTranslate(o.$slide, {\n              top: 0,\n              left: i - l.left + u\n            }), o.pos !== s.pos && o.$slide.addClass(\"fancybox-slide--\" + (o.pos > s.pos ? \"next\" : \"previous\")), p(o.$slide), n.fancybox.animate(o.$slide, {\n              top: 0,\n              left: (o.pos - s.pos) * c.width + (o.pos - s.pos) * o.opts.gutter\n            }, e, function () {\n              o.$slide.css({\n                transform: \"\",\n                opacity: \"\"\n              }).removeClass(\"fancybox-slide--next fancybox-slide--previous\"), o.pos === f.currPos && f.complete();\n            });\n          })) : e && s.opts.transitionEffect && (d = \"fancybox-animated fancybox-fx-\" + s.opts.transitionEffect, r.$slide.addClass(\"fancybox-slide--\" + (r.pos > s.pos ? \"next\" : \"previous\")), n.fancybox.animate(r.$slide, d, e, function () {\n            r.$slide.removeClass(d).removeClass(\"fancybox-slide--next fancybox-slide--previous\");\n          }, !1)), s.isLoaded ? f.revealContent(s) : f.loadSlide(s), f.preload(\"image\");\n        }\n      },\n      createSlide: function createSlide(t) {\n        var e,\n          o,\n          i = this;\n        return o = t % i.group.length, o = o < 0 ? i.group.length + o : o, !i.slides[t] && i.group[o] && (e = n('<div class=\"fancybox-slide\"></div>').appendTo(i.$refs.stage), i.slides[t] = n.extend(!0, {}, i.group[o], {\n          pos: t,\n          $slide: e,\n          isLoaded: !1\n        }), i.updateSlide(i.slides[t])), i.slides[t];\n      },\n      scaleToActual: function scaleToActual(t, e, o) {\n        var i,\n          a,\n          s,\n          r,\n          c,\n          l = this,\n          d = l.current,\n          u = d.$content,\n          f = n.fancybox.getTranslate(d.$slide).width,\n          p = n.fancybox.getTranslate(d.$slide).height,\n          h = d.width,\n          g = d.height;\n        l.isAnimating || l.isMoved() || !u || \"image\" != d.type || !d.isLoaded || d.hasError || (l.isAnimating = !0, n.fancybox.stop(u), t = void 0 === t ? .5 * f : t, e = void 0 === e ? .5 * p : e, i = n.fancybox.getTranslate(u), i.top -= n.fancybox.getTranslate(d.$slide).top, i.left -= n.fancybox.getTranslate(d.$slide).left, r = h / i.width, c = g / i.height, a = .5 * f - .5 * h, s = .5 * p - .5 * g, h > f && (a = i.left * r - (t * r - t), a > 0 && (a = 0), a < f - h && (a = f - h)), g > p && (s = i.top * c - (e * c - e), s > 0 && (s = 0), s < p - g && (s = p - g)), l.updateCursor(h, g), n.fancybox.animate(u, {\n          top: s,\n          left: a,\n          scaleX: r,\n          scaleY: c\n        }, o || 366, function () {\n          l.isAnimating = !1;\n        }), l.SlideShow && l.SlideShow.isActive && l.SlideShow.stop());\n      },\n      scaleToFit: function scaleToFit(t) {\n        var e,\n          o = this,\n          i = o.current,\n          a = i.$content;\n        o.isAnimating || o.isMoved() || !a || \"image\" != i.type || !i.isLoaded || i.hasError || (o.isAnimating = !0, n.fancybox.stop(a), e = o.getFitPos(i), o.updateCursor(e.width, e.height), n.fancybox.animate(a, {\n          top: e.top,\n          left: e.left,\n          scaleX: e.width / a.width(),\n          scaleY: e.height / a.height()\n        }, t || 366, function () {\n          o.isAnimating = !1;\n        }));\n      },\n      getFitPos: function getFitPos(t) {\n        var e,\n          o,\n          i,\n          a,\n          s = this,\n          r = t.$content,\n          c = t.$slide,\n          l = t.width || t.opts.width,\n          d = t.height || t.opts.height,\n          u = {};\n        return !!(t.isLoaded && r && r.length) && (e = n.fancybox.getTranslate(s.$refs.stage).width, o = n.fancybox.getTranslate(s.$refs.stage).height, e -= parseFloat(c.css(\"paddingLeft\")) + parseFloat(c.css(\"paddingRight\")) + parseFloat(r.css(\"marginLeft\")) + parseFloat(r.css(\"marginRight\")), o -= parseFloat(c.css(\"paddingTop\")) + parseFloat(c.css(\"paddingBottom\")) + parseFloat(r.css(\"marginTop\")) + parseFloat(r.css(\"marginBottom\")), l && d || (l = e, d = o), i = Math.min(1, e / l, o / d), l *= i, d *= i, l > e - .5 && (l = e), d > o - .5 && (d = o), \"image\" === t.type ? (u.top = Math.floor(.5 * (o - d)) + parseFloat(c.css(\"paddingTop\")), u.left = Math.floor(.5 * (e - l)) + parseFloat(c.css(\"paddingLeft\"))) : \"video\" === t.contentType && (a = t.opts.width && t.opts.height ? l / d : t.opts.ratio || 16 / 9, d > l / a ? d = l / a : l > d * a && (l = d * a)), u.width = l, u.height = d, u);\n      },\n      update: function update(t) {\n        var e = this;\n        n.each(e.slides, function (n, o) {\n          e.updateSlide(o, t);\n        });\n      },\n      updateSlide: function updateSlide(t, e) {\n        var o = this,\n          i = t && t.$content,\n          a = t.width || t.opts.width,\n          s = t.height || t.opts.height,\n          r = t.$slide;\n        o.adjustCaption(t), i && (a || s || \"video\" === t.contentType) && !t.hasError && (n.fancybox.stop(i), n.fancybox.setTranslate(i, o.getFitPos(t)), t.pos === o.currPos && (o.isAnimating = !1, o.updateCursor())), o.adjustLayout(t), r.length && (r.trigger(\"refresh\"), t.pos === o.currPos && o.$refs.toolbar.add(o.$refs.navigation.find(\".fancybox-button--arrow_right\")).toggleClass(\"compensate-for-scrollbar\", r.get(0).scrollHeight > r.get(0).clientHeight)), o.trigger(\"onUpdate\", t, e);\n      },\n      centerSlide: function centerSlide(t) {\n        var e = this,\n          o = e.current,\n          i = o.$slide;\n        !e.isClosing && o && (i.siblings().css({\n          transform: \"\",\n          opacity: \"\"\n        }), i.parent().children().removeClass(\"fancybox-slide--previous fancybox-slide--next\"), n.fancybox.animate(i, {\n          top: 0,\n          left: 0,\n          opacity: 1\n        }, void 0 === t ? 0 : t, function () {\n          i.css({\n            transform: \"\",\n            opacity: \"\"\n          }), o.isComplete || e.complete();\n        }, !1));\n      },\n      isMoved: function isMoved(t) {\n        var e,\n          o,\n          i = t || this.current;\n        return !!i && (o = n.fancybox.getTranslate(this.$refs.stage), e = n.fancybox.getTranslate(i.$slide), !i.$slide.hasClass(\"fancybox-animated\") && (Math.abs(e.top - o.top) > .5 || Math.abs(e.left - o.left) > .5));\n      },\n      updateCursor: function updateCursor(t, e) {\n        var o,\n          i,\n          a = this,\n          s = a.current,\n          r = a.$refs.container;\n        s && !a.isClosing && a.Guestures && (r.removeClass(\"fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan\"), o = a.canPan(t, e), i = !!o || a.isZoomable(), r.toggleClass(\"fancybox-is-zoomable\", i), n(\"[data-fancybox-zoom]\").prop(\"disabled\", !i), o ? r.addClass(\"fancybox-can-pan\") : i && (\"zoom\" === s.opts.clickContent || n.isFunction(s.opts.clickContent) && \"zoom\" == s.opts.clickContent(s)) ? r.addClass(\"fancybox-can-zoomIn\") : s.opts.touch && (s.opts.touch.vertical || a.group.length > 1) && \"video\" !== s.contentType && r.addClass(\"fancybox-can-swipe\"));\n      },\n      isZoomable: function isZoomable() {\n        var t,\n          e = this,\n          n = e.current;\n        if (n && !e.isClosing && \"image\" === n.type && !n.hasError) {\n          if (!n.isLoaded) return !0;\n          if ((t = e.getFitPos(n)) && (n.width > t.width || n.height > t.height)) return !0;\n        }\n        return !1;\n      },\n      isScaledDown: function isScaledDown(t, e) {\n        var o = this,\n          i = !1,\n          a = o.current,\n          s = a.$content;\n        return void 0 !== t && void 0 !== e ? i = t < a.width && e < a.height : s && (i = n.fancybox.getTranslate(s), i = i.width < a.width && i.height < a.height), i;\n      },\n      canPan: function canPan(t, e) {\n        var o = this,\n          i = o.current,\n          a = null,\n          s = !1;\n        return \"image\" === i.type && (i.isComplete || t && e) && !i.hasError && (s = o.getFitPos(i), void 0 !== t && void 0 !== e ? a = {\n          width: t,\n          height: e\n        } : i.isComplete && (a = n.fancybox.getTranslate(i.$content)), a && s && (s = Math.abs(a.width - s.width) > 1.5 || Math.abs(a.height - s.height) > 1.5)), s;\n      },\n      loadSlide: function loadSlide(t) {\n        var e,\n          o,\n          i,\n          a = this;\n        if (!t.isLoading && !t.isLoaded) {\n          if (t.isLoading = !0, !1 === a.trigger(\"beforeLoad\", t)) return t.isLoading = !1, !1;\n          switch (e = t.type, o = t.$slide, o.off(\"refresh\").trigger(\"onReset\").addClass(t.opts.slideClass), e) {\n            case \"image\":\n              a.setImage(t);\n              break;\n            case \"iframe\":\n              a.setIframe(t);\n              break;\n            case \"html\":\n              a.setContent(t, t.src || t.content);\n              break;\n            case \"video\":\n              a.setContent(t, t.opts.video.tpl.replace(/\\{\\{src\\}\\}/gi, t.src).replace(\"{{format}}\", t.opts.videoFormat || t.opts.video.format || \"\").replace(\"{{poster}}\", t.thumb || \"\"));\n              break;\n            case \"inline\":\n              n(t.src).length ? a.setContent(t, n(t.src)) : a.setError(t);\n              break;\n            case \"ajax\":\n              a.showLoading(t), i = n.ajax(n.extend({}, t.opts.ajax.settings, {\n                url: t.src,\n                success: function success(e, n) {\n                  \"success\" === n && a.setContent(t, e);\n                },\n                error: function error(e, n) {\n                  e && \"abort\" !== n && a.setError(t);\n                }\n              })), o.one(\"onReset\", function () {\n                i.abort();\n              });\n              break;\n            default:\n              a.setError(t);\n          }\n          return !0;\n        }\n      },\n      setImage: function setImage(t) {\n        var o,\n          i = this;\n        setTimeout(function () {\n          var e = t.$image;\n          i.isClosing || !t.isLoading || e && e.length && e[0].complete || t.hasError || i.showLoading(t);\n        }, 50), i.checkSrcset(t), t.$content = n('<div class=\"fancybox-content\"></div>').addClass(\"fancybox-is-hidden\").appendTo(t.$slide.addClass(\"fancybox-slide--image\")), !1 !== t.opts.preload && t.opts.width && t.opts.height && t.thumb && (t.width = t.opts.width, t.height = t.opts.height, o = e.createElement(\"img\"), o.onerror = function () {\n          n(this).remove(), t.$ghost = null;\n        }, o.onload = function () {\n          i.afterLoad(t);\n        }, t.$ghost = n(o).addClass(\"fancybox-image\").appendTo(t.$content).attr(\"src\", t.thumb)), i.setBigImage(t);\n      },\n      checkSrcset: function checkSrcset(e) {\n        var n,\n          o,\n          i,\n          a,\n          s = e.opts.srcset || e.opts.image.srcset;\n        if (s) {\n          i = t.devicePixelRatio || 1, a = t.innerWidth * i, o = s.split(\",\").map(function (t) {\n            var e = {};\n            return t.trim().split(/\\s+/).forEach(function (t, n) {\n              var o = parseInt(t.substring(0, t.length - 1), 10);\n              if (0 === n) return e.url = t;\n              o && (e.value = o, e.postfix = t[t.length - 1]);\n            }), e;\n          }), o.sort(function (t, e) {\n            return t.value - e.value;\n          });\n          for (var r = 0; r < o.length; r++) {\n            var c = o[r];\n            if (\"w\" === c.postfix && c.value >= a || \"x\" === c.postfix && c.value >= i) {\n              n = c;\n              break;\n            }\n          }\n          !n && o.length && (n = o[o.length - 1]), n && (e.src = n.url, e.width && e.height && \"w\" == n.postfix && (e.height = e.width / e.height * n.value, e.width = n.value), e.opts.srcset = s);\n        }\n      },\n      setBigImage: function setBigImage(t) {\n        var o = this,\n          i = e.createElement(\"img\"),\n          a = n(i);\n        t.$image = a.one(\"error\", function () {\n          o.setError(t);\n        }).one(\"load\", function () {\n          var e;\n          t.$ghost || (o.resolveImageSlideSize(t, this.naturalWidth, this.naturalHeight), o.afterLoad(t)), o.isClosing || (t.opts.srcset && (e = t.opts.sizes, e && \"auto\" !== e || (e = (t.width / t.height > 1 && s.width() / s.height() > 1 ? \"100\" : Math.round(t.width / t.height * 100)) + \"vw\"), a.attr(\"sizes\", e).attr(\"srcset\", t.opts.srcset)), t.$ghost && setTimeout(function () {\n            t.$ghost && !o.isClosing && t.$ghost.hide();\n          }, Math.min(300, Math.max(1e3, t.height / 1600))), o.hideLoading(t));\n        }).addClass(\"fancybox-image\").attr(\"src\", t.src).appendTo(t.$content), (i.complete || \"complete\" == i.readyState) && a.naturalWidth && a.naturalHeight ? a.trigger(\"load\") : i.error && a.trigger(\"error\");\n      },\n      resolveImageSlideSize: function resolveImageSlideSize(t, e, n) {\n        var o = parseInt(t.opts.width, 10),\n          i = parseInt(t.opts.height, 10);\n        t.width = e, t.height = n, o > 0 && (t.width = o, t.height = Math.floor(o * n / e)), i > 0 && (t.width = Math.floor(i * e / n), t.height = i);\n      },\n      setIframe: function setIframe(t) {\n        var e,\n          o = this,\n          i = t.opts.iframe,\n          a = t.$slide;\n        t.$content = n('<div class=\"fancybox-content' + (i.preload ? \" fancybox-is-hidden\" : \"\") + '\"></div>').css(i.css).appendTo(a), a.addClass(\"fancybox-slide--\" + t.contentType), t.$iframe = e = n(i.tpl.replace(/\\{rnd\\}/g, new Date().getTime())).attr(i.attr).appendTo(t.$content), i.preload ? (o.showLoading(t), e.on(\"load.fb error.fb\", function (e) {\n          this.isReady = 1, t.$slide.trigger(\"refresh\"), o.afterLoad(t);\n        }), a.on(\"refresh.fb\", function () {\n          var n,\n            o,\n            s = t.$content,\n            r = i.css.width,\n            c = i.css.height;\n          if (1 === e[0].isReady) {\n            try {\n              n = e.contents(), o = n.find(\"body\");\n            } catch (t) {}\n            o && o.length && o.children().length && (a.css(\"overflow\", \"visible\"), s.css({\n              width: \"100%\",\n              \"max-width\": \"100%\",\n              height: \"9999px\"\n            }), void 0 === r && (r = Math.ceil(Math.max(o[0].clientWidth, o.outerWidth(!0)))), s.css(\"width\", r || \"\").css(\"max-width\", \"\"), void 0 === c && (c = Math.ceil(Math.max(o[0].clientHeight, o.outerHeight(!0)))), s.css(\"height\", c || \"\"), a.css(\"overflow\", \"auto\")), s.removeClass(\"fancybox-is-hidden\");\n          }\n        })) : o.afterLoad(t), e.attr(\"src\", t.src), a.one(\"onReset\", function () {\n          try {\n            n(this).find(\"iframe\").hide().unbind().attr(\"src\", \"//about:blank\");\n          } catch (t) {}\n          n(this).off(\"refresh.fb\").empty(), t.isLoaded = !1, t.isRevealed = !1;\n        });\n      },\n      setContent: function setContent(t, e) {\n        var o = this;\n        o.isClosing || (o.hideLoading(t), t.$content && n.fancybox.stop(t.$content), t.$slide.empty(), l(e) && e.parent().length ? ((e.hasClass(\"fancybox-content\") || e.parent().hasClass(\"fancybox-content\")) && e.parents(\".fancybox-slide\").trigger(\"onReset\"), t.$placeholder = n(\"<div>\").hide().insertAfter(e), e.css(\"display\", \"inline-block\")) : t.hasError || (\"string\" === n.type(e) && (e = n(\"<div>\").append(n.trim(e)).contents()), t.opts.filter && (e = n(\"<div>\").html(e).find(t.opts.filter))), t.$slide.one(\"onReset\", function () {\n          n(this).find(\"video,audio\").trigger(\"pause\"), t.$placeholder && (t.$placeholder.after(e.removeClass(\"fancybox-content\").hide()).remove(), t.$placeholder = null), t.$smallBtn && (t.$smallBtn.remove(), t.$smallBtn = null), t.hasError || (n(this).empty(), t.isLoaded = !1, t.isRevealed = !1);\n        }), n(e).appendTo(t.$slide), n(e).is(\"video,audio\") && (n(e).addClass(\"fancybox-video\"), n(e).wrap(\"<div></div>\"), t.contentType = \"video\", t.opts.width = t.opts.width || n(e).attr(\"width\"), t.opts.height = t.opts.height || n(e).attr(\"height\")), t.$content = t.$slide.children().filter(\"div,form,main,video,audio,article,.fancybox-content\").first(), t.$content.siblings().hide(), t.$content.length || (t.$content = t.$slide.wrapInner(\"<div></div>\").children().first()), t.$content.addClass(\"fancybox-content\"), t.$slide.addClass(\"fancybox-slide--\" + t.contentType), o.afterLoad(t));\n      },\n      setError: function setError(t) {\n        t.hasError = !0, t.$slide.trigger(\"onReset\").removeClass(\"fancybox-slide--\" + t.contentType).addClass(\"fancybox-slide--error\"), t.contentType = \"html\", this.setContent(t, this.translate(t, t.opts.errorTpl)), t.pos === this.currPos && (this.isAnimating = !1);\n      },\n      showLoading: function showLoading(t) {\n        var e = this;\n        (t = t || e.current) && !t.$spinner && (t.$spinner = n(e.translate(e, e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn(\"fast\"));\n      },\n      hideLoading: function hideLoading(t) {\n        var e = this;\n        (t = t || e.current) && t.$spinner && (t.$spinner.stop().remove(), delete t.$spinner);\n      },\n      afterLoad: function afterLoad(t) {\n        var e = this;\n        e.isClosing || (t.isLoading = !1, t.isLoaded = !0, e.trigger(\"afterLoad\", t), e.hideLoading(t), !t.opts.smallBtn || t.$smallBtn && t.$smallBtn.length || (t.$smallBtn = n(e.translate(t, t.opts.btnTpl.smallBtn)).appendTo(t.$content)), t.opts.protect && t.$content && !t.hasError && (t.$content.on(\"contextmenu.fb\", function (t) {\n          return 2 == t.button && t.preventDefault(), !0;\n        }), \"image\" === t.type && n('<div class=\"fancybox-spaceball\"></div>').appendTo(t.$content)), e.adjustCaption(t), e.adjustLayout(t), t.pos === e.currPos && e.updateCursor(), e.revealContent(t));\n      },\n      adjustCaption: function adjustCaption(t) {\n        var e,\n          n = this,\n          o = t || n.current,\n          i = o.opts.caption,\n          a = o.opts.preventCaptionOverlap,\n          s = n.$refs.caption,\n          r = !1;\n        s.toggleClass(\"fancybox-caption--separate\", a), a && i && i.length && (o.pos !== n.currPos ? (e = s.clone().appendTo(s.parent()), e.children().eq(0).empty().html(i), r = e.outerHeight(!0), e.empty().remove()) : n.$caption && (r = n.$caption.outerHeight(!0)), o.$slide.css(\"padding-bottom\", r || \"\"));\n      },\n      adjustLayout: function adjustLayout(t) {\n        var e,\n          n,\n          o,\n          i,\n          a = this,\n          s = t || a.current;\n        s.isLoaded && !0 !== s.opts.disableLayoutFix && (s.$content.css(\"margin-bottom\", \"\"), s.$content.outerHeight() > s.$slide.height() + .5 && (o = s.$slide[0].style[\"padding-bottom\"], i = s.$slide.css(\"padding-bottom\"), parseFloat(i) > 0 && (e = s.$slide[0].scrollHeight, s.$slide.css(\"padding-bottom\", 0), Math.abs(e - s.$slide[0].scrollHeight) < 1 && (n = i), s.$slide.css(\"padding-bottom\", o))), s.$content.css(\"margin-bottom\", n));\n      },\n      revealContent: function revealContent(t) {\n        var e,\n          o,\n          i,\n          a,\n          s = this,\n          r = t.$slide,\n          c = !1,\n          l = !1,\n          d = s.isMoved(t),\n          u = t.isRevealed;\n        return t.isRevealed = !0, e = t.opts[s.firstRun ? \"animationEffect\" : \"transitionEffect\"], i = t.opts[s.firstRun ? \"animationDuration\" : \"transitionDuration\"], i = parseInt(void 0 === t.forcedDuration ? i : t.forcedDuration, 10), !d && t.pos === s.currPos && i || (e = !1), \"zoom\" === e && (t.pos === s.currPos && i && \"image\" === t.type && !t.hasError && (l = s.getThumbPos(t)) ? c = s.getFitPos(t) : e = \"fade\"), \"zoom\" === e ? (s.isAnimating = !0, c.scaleX = c.width / l.width, c.scaleY = c.height / l.height, a = t.opts.zoomOpacity, \"auto\" == a && (a = Math.abs(t.width / t.height - l.width / l.height) > .1), a && (l.opacity = .1, c.opacity = 1), n.fancybox.setTranslate(t.$content.removeClass(\"fancybox-is-hidden\"), l), p(t.$content), void n.fancybox.animate(t.$content, c, i, function () {\n          s.isAnimating = !1, s.complete();\n        })) : (s.updateSlide(t), e ? (n.fancybox.stop(r), o = \"fancybox-slide--\" + (t.pos >= s.prevPos ? \"next\" : \"previous\") + \" fancybox-animated fancybox-fx-\" + e, r.addClass(o).removeClass(\"fancybox-slide--current\"), t.$content.removeClass(\"fancybox-is-hidden\"), p(r), \"image\" !== t.type && t.$content.hide().show(0), void n.fancybox.animate(r, \"fancybox-slide--current\", i, function () {\n          r.removeClass(o).css({\n            transform: \"\",\n            opacity: \"\"\n          }), t.pos === s.currPos && s.complete();\n        }, !0)) : (t.$content.removeClass(\"fancybox-is-hidden\"), u || !d || \"image\" !== t.type || t.hasError || t.$content.hide().fadeIn(\"fast\"), void (t.pos === s.currPos && s.complete())));\n      },\n      getThumbPos: function getThumbPos(t) {\n        var e,\n          o,\n          i,\n          a,\n          s,\n          r = !1,\n          c = t.$thumb;\n        return !(!c || !g(c[0])) && (e = n.fancybox.getTranslate(c), o = parseFloat(c.css(\"border-top-width\") || 0), i = parseFloat(c.css(\"border-right-width\") || 0), a = parseFloat(c.css(\"border-bottom-width\") || 0), s = parseFloat(c.css(\"border-left-width\") || 0), r = {\n          top: e.top + o,\n          left: e.left + s,\n          width: e.width - i - s,\n          height: e.height - o - a,\n          scaleX: 1,\n          scaleY: 1\n        }, e.width > 0 && e.height > 0 && r);\n      },\n      complete: function complete() {\n        var t,\n          e = this,\n          o = e.current,\n          i = {};\n        !e.isMoved() && o.isLoaded && (o.isComplete || (o.isComplete = !0, o.$slide.siblings().trigger(\"onReset\"), e.preload(\"inline\"), p(o.$slide), o.$slide.addClass(\"fancybox-slide--complete\"), n.each(e.slides, function (t, o) {\n          o.pos >= e.currPos - 1 && o.pos <= e.currPos + 1 ? i[o.pos] = o : o && (n.fancybox.stop(o.$slide), o.$slide.off().remove());\n        }), e.slides = i), e.isAnimating = !1, e.updateCursor(), e.trigger(\"afterShow\"), o.opts.video.autoStart && o.$slide.find(\"video,audio\").filter(\":visible:first\").trigger(\"play\").one(\"ended\", function () {\n          this.webkitExitFullscreen && this.webkitExitFullscreen(), e.next();\n        }), o.opts.autoFocus && \"html\" === o.contentType && (t = o.$content.find(\"input[autofocus]:enabled:visible:first\"), t.length ? t.trigger(\"focus\") : e.focus(null, !0)), o.$slide.scrollTop(0).scrollLeft(0));\n      },\n      preload: function preload(t) {\n        var e,\n          n,\n          o = this;\n        o.group.length < 2 || (n = o.slides[o.currPos + 1], e = o.slides[o.currPos - 1], e && e.type === t && o.loadSlide(e), n && n.type === t && o.loadSlide(n));\n      },\n      focus: function focus(t, o) {\n        var i,\n          a,\n          s = this,\n          r = [\"a[href]\", \"area[href]\", 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', \"select:not([disabled]):not([aria-hidden])\", \"textarea:not([disabled]):not([aria-hidden])\", \"button:not([disabled]):not([aria-hidden])\", \"iframe\", \"object\", \"embed\", \"video\", \"audio\", \"[contenteditable]\", '[tabindex]:not([tabindex^=\"-\"])'].join(\",\");\n        s.isClosing || (i = !t && s.current && s.current.isComplete ? s.current.$slide.find(\"*:visible\" + (o ? \":not(.fancybox-close-small)\" : \"\")) : s.$refs.container.find(\"*:visible\"), i = i.filter(r).filter(function () {\n          return \"hidden\" !== n(this).css(\"visibility\") && !n(this).hasClass(\"disabled\");\n        }), i.length ? (a = i.index(e.activeElement), t && t.shiftKey ? (a < 0 || 0 == a) && (t.preventDefault(), i.eq(i.length - 1).trigger(\"focus\")) : (a < 0 || a == i.length - 1) && (t && t.preventDefault(), i.eq(0).trigger(\"focus\"))) : s.$refs.container.trigger(\"focus\"));\n      },\n      activate: function activate() {\n        var t = this;\n        n(\".fancybox-container\").each(function () {\n          var e = n(this).data(\"FancyBox\");\n          e && e.id !== t.id && !e.isClosing && (e.trigger(\"onDeactivate\"), e.removeEvents(), e.isVisible = !1);\n        }), t.isVisible = !0, (t.current || t.isIdle) && (t.update(), t.updateControls()), t.trigger(\"onActivate\"), t.addEvents();\n      },\n      close: function close(t, e) {\n        var o,\n          i,\n          a,\n          s,\n          r,\n          c,\n          l,\n          u = this,\n          f = u.current,\n          h = function h() {\n            u.cleanUp(t);\n          };\n        return !u.isClosing && (u.isClosing = !0, !1 === u.trigger(\"beforeClose\", t) ? (u.isClosing = !1, d(function () {\n          u.update();\n        }), !1) : (u.removeEvents(), a = f.$content, o = f.opts.animationEffect, i = n.isNumeric(e) ? e : o ? f.opts.animationDuration : 0, f.$slide.removeClass(\"fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated\"), !0 !== t ? n.fancybox.stop(f.$slide) : o = !1, f.$slide.siblings().trigger(\"onReset\").remove(), i && u.$refs.container.removeClass(\"fancybox-is-open\").addClass(\"fancybox-is-closing\").css(\"transition-duration\", i + \"ms\"), u.hideLoading(f), u.hideControls(!0), u.updateCursor(), \"zoom\" !== o || a && i && \"image\" === f.type && !u.isMoved() && !f.hasError && (l = u.getThumbPos(f)) || (o = \"fade\"), \"zoom\" === o ? (n.fancybox.stop(a), s = n.fancybox.getTranslate(a), c = {\n          top: s.top,\n          left: s.left,\n          scaleX: s.width / l.width,\n          scaleY: s.height / l.height,\n          width: l.width,\n          height: l.height\n        }, r = f.opts.zoomOpacity, \"auto\" == r && (r = Math.abs(f.width / f.height - l.width / l.height) > .1), r && (l.opacity = 0), n.fancybox.setTranslate(a, c), p(a), n.fancybox.animate(a, l, i, h), !0) : (o && i ? n.fancybox.animate(f.$slide.addClass(\"fancybox-slide--previous\").removeClass(\"fancybox-slide--current\"), \"fancybox-animated fancybox-fx-\" + o, i, h) : !0 === t ? setTimeout(h, i) : h(), !0)));\n      },\n      cleanUp: function cleanUp(e) {\n        var o,\n          i,\n          a,\n          s = this,\n          r = s.current.opts.$orig;\n        s.current.$slide.trigger(\"onReset\"), s.$refs.container.empty().remove(), s.trigger(\"afterClose\", e), s.current.opts.backFocus && (r && r.length && r.is(\":visible\") || (r = s.$trigger), r && r.length && (i = t.scrollX, a = t.scrollY, r.trigger(\"focus\"), n(\"html, body\").scrollTop(a).scrollLeft(i))), s.current = null, o = n.fancybox.getInstance(), o ? o.activate() : (n(\"body\").removeClass(\"fancybox-active compensate-for-scrollbar\"), n(\"#fancybox-style-noscroll\").remove());\n      },\n      trigger: function trigger(t, e) {\n        var o,\n          i = Array.prototype.slice.call(arguments, 1),\n          a = this,\n          s = e && e.opts ? e : a.current;\n        if (s ? i.unshift(s) : s = a, i.unshift(a), n.isFunction(s.opts[t]) && (o = s.opts[t].apply(s, i)), !1 === o) return o;\n        \"afterClose\" !== t && a.$refs ? a.$refs.container.trigger(t + \".fb\", i) : r.trigger(t + \".fb\", i);\n      },\n      updateControls: function updateControls() {\n        var t = this,\n          o = t.current,\n          i = o.index,\n          a = t.$refs.container,\n          s = t.$refs.caption,\n          r = o.opts.caption;\n        o.$slide.trigger(\"refresh\"), r && r.length ? (t.$caption = s, s.children().eq(0).html(r)) : t.$caption = null, t.hasHiddenControls || t.isIdle || t.showControls(), a.find(\"[data-fancybox-count]\").html(t.group.length), a.find(\"[data-fancybox-index]\").html(i + 1), a.find(\"[data-fancybox-prev]\").prop(\"disabled\", !o.opts.loop && i <= 0), a.find(\"[data-fancybox-next]\").prop(\"disabled\", !o.opts.loop && i >= t.group.length - 1), \"image\" === o.type ? a.find(\"[data-fancybox-zoom]\").show().end().find(\"[data-fancybox-download]\").attr(\"href\", o.opts.image.src || o.src).show() : o.opts.toolbar && a.find(\"[data-fancybox-download],[data-fancybox-zoom]\").hide(), n(e.activeElement).is(\":hidden,[disabled]\") && t.$refs.container.trigger(\"focus\");\n      },\n      hideControls: function hideControls(t) {\n        var e = this,\n          n = [\"infobar\", \"toolbar\", \"nav\"];\n        !t && e.current.opts.preventCaptionOverlap || n.push(\"caption\"), this.$refs.container.removeClass(n.map(function (t) {\n          return \"fancybox-show-\" + t;\n        }).join(\" \")), this.hasHiddenControls = !0;\n      },\n      showControls: function showControls() {\n        var t = this,\n          e = t.current ? t.current.opts : t.opts,\n          n = t.$refs.container;\n        t.hasHiddenControls = !1, t.idleSecondsCounter = 0, n.toggleClass(\"fancybox-show-toolbar\", !(!e.toolbar || !e.buttons)).toggleClass(\"fancybox-show-infobar\", !!(e.infobar && t.group.length > 1)).toggleClass(\"fancybox-show-caption\", !!t.$caption).toggleClass(\"fancybox-show-nav\", !!(e.arrows && t.group.length > 1)).toggleClass(\"fancybox-is-modal\", !!e.modal);\n      },\n      toggleControls: function toggleControls() {\n        this.hasHiddenControls ? this.showControls() : this.hideControls();\n      }\n    }), n.fancybox = {\n      version: \"3.5.6\",\n      defaults: a,\n      getInstance: function getInstance(t) {\n        var e = n('.fancybox-container:not(\".fancybox-is-closing\"):last').data(\"FancyBox\"),\n          o = Array.prototype.slice.call(arguments, 1);\n        return e instanceof b && (\"string\" === n.type(t) ? e[t].apply(e, o) : \"function\" === n.type(t) && t.apply(e, o), e);\n      },\n      open: function open(t, e, n) {\n        return new b(t, e, n);\n      },\n      close: function close(t) {\n        var e = this.getInstance();\n        e && (e.close(), !0 === t && this.close(t));\n      },\n      destroy: function destroy() {\n        this.close(!0), r.add(\"body\").off(\"click.fb-start\", \"**\");\n      },\n      isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n      use3d: function () {\n        var n = e.createElement(\"div\");\n        return t.getComputedStyle && t.getComputedStyle(n) && t.getComputedStyle(n).getPropertyValue(\"transform\") && !(e.documentMode && e.documentMode < 11);\n      }(),\n      getTranslate: function getTranslate(t) {\n        var e;\n        return !(!t || !t.length) && (e = t[0].getBoundingClientRect(), {\n          top: e.top || 0,\n          left: e.left || 0,\n          width: e.width,\n          height: e.height,\n          opacity: parseFloat(t.css(\"opacity\"))\n        });\n      },\n      setTranslate: function setTranslate(t, e) {\n        var n = \"\",\n          o = {};\n        if (t && e) return void 0 === e.left && void 0 === e.top || (n = (void 0 === e.left ? t.position().left : e.left) + \"px, \" + (void 0 === e.top ? t.position().top : e.top) + \"px\", n = this.use3d ? \"translate3d(\" + n + \", 0px)\" : \"translate(\" + n + \")\"), void 0 !== e.scaleX && void 0 !== e.scaleY ? n += \" scale(\" + e.scaleX + \", \" + e.scaleY + \")\" : void 0 !== e.scaleX && (n += \" scaleX(\" + e.scaleX + \")\"), n.length && (o.transform = n), void 0 !== e.opacity && (o.opacity = e.opacity), void 0 !== e.width && (o.width = e.width), void 0 !== e.height && (o.height = e.height), t.css(o);\n      },\n      animate: function animate(t, e, o, i, a) {\n        var s,\n          r = this;\n        n.isFunction(o) && (i = o, o = null), r.stop(t), s = r.getTranslate(t), t.on(f, function (c) {\n          (!c || !c.originalEvent || t.is(c.originalEvent.target) && \"z-index\" != c.originalEvent.propertyName) && (r.stop(t), n.isNumeric(o) && t.css(\"transition-duration\", \"\"), n.isPlainObject(e) ? void 0 !== e.scaleX && void 0 !== e.scaleY && r.setTranslate(t, {\n            top: e.top,\n            left: e.left,\n            width: s.width * e.scaleX,\n            height: s.height * e.scaleY,\n            scaleX: 1,\n            scaleY: 1\n          }) : !0 !== a && t.removeClass(e), n.isFunction(i) && i(c));\n        }), n.isNumeric(o) && t.css(\"transition-duration\", o + \"ms\"), n.isPlainObject(e) ? (void 0 !== e.scaleX && void 0 !== e.scaleY && (delete e.width, delete e.height, t.parent().hasClass(\"fancybox-slide--image\") && t.parent().addClass(\"fancybox-is-scaling\")), n.fancybox.setTranslate(t, e)) : t.addClass(e), t.data(\"timer\", setTimeout(function () {\n          t.trigger(f);\n        }, o + 33));\n      },\n      stop: function stop(t, e) {\n        t && t.length && (clearTimeout(t.data(\"timer\")), e && t.trigger(f), t.off(f).css(\"transition-duration\", \"\"), t.parent().removeClass(\"fancybox-is-scaling\"));\n      }\n    }, n.fn.fancybox = function (t) {\n      var e;\n      return t = t || {}, e = t.selector || !1, e ? n(\"body\").off(\"click.fb-start\", e).on(\"click.fb-start\", e, {\n        options: t\n      }, i) : this.off(\"click.fb-start\").on(\"click.fb-start\", {\n        items: this,\n        options: t\n      }, i), this;\n    }, r.on(\"click.fb-start\", \"[data-fancybox]\", i), r.on(\"click.fb-start\", \"[data-fancybox-trigger]\", function (t) {\n      n('[data-fancybox=\"' + n(this).attr(\"data-fancybox-trigger\") + '\"]').eq(n(this).attr(\"data-fancybox-index\") || 0).trigger(\"click.fb-start\", {\n        $trigger: n(this)\n      });\n    }), function () {\n      var t = null;\n      r.on(\"mousedown mouseup focus blur\", \".fancybox-button\", function (e) {\n        switch (e.type) {\n          case \"mousedown\":\n            t = n(this);\n            break;\n          case \"mouseup\":\n            t = null;\n            break;\n          case \"focusin\":\n            n(\".fancybox-button\").removeClass(\"fancybox-focus\"), n(this).is(t) || n(this).is(\"[disabled]\") || n(this).addClass(\"fancybox-focus\");\n            break;\n          case \"focusout\":\n            n(\".fancybox-button\").removeClass(\"fancybox-focus\");\n        }\n      });\n    }();\n  }\n}(window, document, jQuery), function (t) {\n  \"use strict\";\n\n  var e = {\n      youtube: {\n        matcher: /(youtube\\.com|youtu\\.be|youtube\\-nocookie\\.com)\\/(watch\\?(.*&)?v=|v\\/|u\\/|embed\\/?)?(videoseries\\?list=(.*)|[\\w-]{11}|\\?listType=(.*)&list=(.*))(.*)/i,\n        params: {\n          autoplay: 1,\n          autohide: 1,\n          fs: 1,\n          rel: 0,\n          hd: 1,\n          wmode: \"transparent\",\n          enablejsapi: 1,\n          html5: 1\n        },\n        paramPlace: 8,\n        type: \"iframe\",\n        url: \"https://www.youtube-nocookie.com/embed/$4\",\n        thumb: \"https://img.youtube.com/vi/$4/hqdefault.jpg\"\n      },\n      vimeo: {\n        matcher: /^.+vimeo.com\\/(.*\\/)?([\\d]+)(.*)?/,\n        params: {\n          autoplay: 1,\n          hd: 1,\n          show_title: 1,\n          show_byline: 1,\n          show_portrait: 0,\n          fullscreen: 1\n        },\n        paramPlace: 3,\n        type: \"iframe\",\n        url: \"//player.vimeo.com/video/$2\"\n      },\n      instagram: {\n        matcher: /(instagr\\.am|instagram\\.com)\\/p\\/([a-zA-Z0-9_\\-]+)\\/?/i,\n        type: \"image\",\n        url: \"//$1/p/$2/media/?size=l\"\n      },\n      gmap_place: {\n        matcher: /(maps\\.)?google\\.([a-z]{2,3}(\\.[a-z]{2})?)\\/(((maps\\/(place\\/(.*)\\/)?\\@(.*),(\\d+.?\\d+?)z))|(\\?ll=))(.*)?/i,\n        type: \"iframe\",\n        url: function url(t) {\n          return \"//maps.google.\" + t[2] + \"/?ll=\" + (t[9] ? t[9] + \"&z=\" + Math.floor(t[10]) + (t[12] ? t[12].replace(/^\\//, \"&\") : \"\") : t[12] + \"\").replace(/\\?/, \"&\") + \"&output=\" + (t[12] && t[12].indexOf(\"layer=c\") > 0 ? \"svembed\" : \"embed\");\n        }\n      },\n      gmap_search: {\n        matcher: /(maps\\.)?google\\.([a-z]{2,3}(\\.[a-z]{2})?)\\/(maps\\/search\\/)(.*)/i,\n        type: \"iframe\",\n        url: function url(t) {\n          return \"//maps.google.\" + t[2] + \"/maps?q=\" + t[5].replace(\"query=\", \"q=\").replace(\"api=1\", \"\") + \"&output=embed\";\n        }\n      }\n    },\n    n = function n(e, _n, o) {\n      if (e) return o = o || \"\", \"object\" === t.type(o) && (o = t.param(o, !0)), t.each(_n, function (t, n) {\n        e = e.replace(\"$\" + t, n || \"\");\n      }), o.length && (e += (e.indexOf(\"?\") > 0 ? \"&\" : \"?\") + o), e;\n    };\n  t(document).on(\"objectNeedsType.fb\", function (o, i, a) {\n    var s,\n      r,\n      c,\n      l,\n      d,\n      u,\n      f,\n      p = a.src || \"\",\n      h = !1;\n    s = t.extend(!0, {}, e, a.opts.media), t.each(s, function (e, o) {\n      if (c = p.match(o.matcher)) {\n        if (h = o.type, f = e, u = {}, o.paramPlace && c[o.paramPlace]) {\n          d = c[o.paramPlace], \"?\" == d[0] && (d = d.substring(1)), d = d.split(\"&\");\n          for (var i = 0; i < d.length; ++i) {\n            var s = d[i].split(\"=\", 2);\n            2 == s.length && (u[s[0]] = decodeURIComponent(s[1].replace(/\\+/g, \" \")));\n          }\n        }\n        return l = t.extend(!0, {}, o.params, a.opts[e], u), p = \"function\" === t.type(o.url) ? o.url.call(this, c, l, a) : n(o.url, c, l), r = \"function\" === t.type(o.thumb) ? o.thumb.call(this, c, l, a) : n(o.thumb, c), \"youtube\" === e ? p = p.replace(/&t=((\\d+)m)?(\\d+)s/, function (t, e, n, o) {\n          return \"&start=\" + ((n ? 60 * parseInt(n, 10) : 0) + parseInt(o, 10));\n        }) : \"vimeo\" === e && (p = p.replace(\"&%23\", \"#\")), !1;\n      }\n    }), h ? (a.opts.thumb || a.opts.$thumb && a.opts.$thumb.length || (a.opts.thumb = r), \"iframe\" === h && (a.opts = t.extend(!0, a.opts, {\n      iframe: {\n        preload: !1,\n        attr: {\n          scrolling: \"no\"\n        }\n      }\n    })), t.extend(a, {\n      type: h,\n      src: p,\n      origSrc: a.src,\n      contentSource: f,\n      contentType: \"image\" === h ? \"image\" : \"gmap_place\" == f || \"gmap_search\" == f ? \"map\" : \"video\"\n    })) : p && (a.type = a.opts.defaultType);\n  });\n  var o = {\n    youtube: {\n      src: \"https://www.youtube.com/iframe_api\",\n      \"class\": \"YT\",\n      loading: !1,\n      loaded: !1\n    },\n    vimeo: {\n      src: \"https://player.vimeo.com/api/player.js\",\n      \"class\": \"Vimeo\",\n      loading: !1,\n      loaded: !1\n    },\n    load: function load(t) {\n      var e,\n        n = this;\n      if (this[t].loaded) return void setTimeout(function () {\n        n.done(t);\n      });\n      this[t].loading || (this[t].loading = !0, e = document.createElement(\"script\"), e.type = \"text/javascript\", e.src = this[t].src, \"youtube\" === t ? window.onYouTubeIframeAPIReady = function () {\n        n[t].loaded = !0, n.done(t);\n      } : e.onload = function () {\n        n[t].loaded = !0, n.done(t);\n      }, document.body.appendChild(e));\n    },\n    done: function done(e) {\n      var n, o, i;\n      \"youtube\" === e && delete window.onYouTubeIframeAPIReady, (n = t.fancybox.getInstance()) && (o = n.current.$content.find(\"iframe\"), \"youtube\" === e && void 0 !== YT && YT ? i = new YT.Player(o.attr(\"id\"), {\n        events: {\n          onStateChange: function onStateChange(t) {\n            0 == t.data && n.next();\n          }\n        }\n      }) : \"vimeo\" === e && void 0 !== Vimeo && Vimeo && (i = new Vimeo.Player(o), i.on(\"ended\", function () {\n        n.next();\n      })));\n    }\n  };\n  t(document).on({\n    \"afterShow.fb\": function afterShowFb(t, e, n) {\n      e.group.length > 1 && (\"youtube\" === n.contentSource || \"vimeo\" === n.contentSource) && o.load(n.contentSource);\n    }\n  });\n}(jQuery), function (t, e, n) {\n  \"use strict\";\n\n  var o = function () {\n      return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || function (e) {\n        return t.setTimeout(e, 1e3 / 60);\n      };\n    }(),\n    i = function () {\n      return t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || function (e) {\n        t.clearTimeout(e);\n      };\n    }(),\n    a = function a(e) {\n      var n = [];\n      e = e.originalEvent || e || t.e, e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];\n      for (var o in e) e[o].pageX ? n.push({\n        x: e[o].pageX,\n        y: e[o].pageY\n      }) : e[o].clientX && n.push({\n        x: e[o].clientX,\n        y: e[o].clientY\n      });\n      return n;\n    },\n    s = function s(t, e, n) {\n      return e && t ? \"x\" === n ? t.x - e.x : \"y\" === n ? t.y - e.y : Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2)) : 0;\n    },\n    r = function r(t) {\n      if (t.is('a,area,button,[role=\"button\"],input,label,select,summary,textarea,video,audio,iframe') || n.isFunction(t.get(0).onclick) || t.data(\"selectable\")) return !0;\n      for (var e = 0, o = t[0].attributes, i = o.length; e < i; e++) if (\"data-fancybox-\" === o[e].nodeName.substr(0, 14)) return !0;\n      return !1;\n    },\n    c = function c(e) {\n      var n = t.getComputedStyle(e)[\"overflow-y\"],\n        o = t.getComputedStyle(e)[\"overflow-x\"],\n        i = (\"scroll\" === n || \"auto\" === n) && e.scrollHeight > e.clientHeight,\n        a = (\"scroll\" === o || \"auto\" === o) && e.scrollWidth > e.clientWidth;\n      return i || a;\n    },\n    l = function l(t) {\n      for (var e = !1;;) {\n        if (e = c(t.get(0))) break;\n        if (t = t.parent(), !t.length || t.hasClass(\"fancybox-stage\") || t.is(\"body\")) break;\n      }\n      return e;\n    },\n    d = function d(t) {\n      var e = this;\n      e.instance = t, e.$bg = t.$refs.bg, e.$stage = t.$refs.stage, e.$container = t.$refs.container, e.destroy(), e.$container.on(\"touchstart.fb.touch mousedown.fb.touch\", n.proxy(e, \"ontouchstart\"));\n    };\n  d.prototype.destroy = function () {\n    var t = this;\n    t.$container.off(\".fb.touch\"), n(e).off(\".fb.touch\"), t.requestId && (i(t.requestId), t.requestId = null), t.tapped && (clearTimeout(t.tapped), t.tapped = null);\n  }, d.prototype.ontouchstart = function (o) {\n    var i = this,\n      c = n(o.target),\n      d = i.instance,\n      u = d.current,\n      f = u.$slide,\n      p = u.$content,\n      h = \"touchstart\" == o.type;\n    if (h && i.$container.off(\"mousedown.fb.touch\"), (!o.originalEvent || 2 != o.originalEvent.button) && f.length && c.length && !r(c) && !r(c.parent()) && (c.is(\"img\") || !(o.originalEvent.clientX > c[0].clientWidth + c.offset().left))) {\n      if (!u || d.isAnimating || u.$slide.hasClass(\"fancybox-animated\")) return o.stopPropagation(), void o.preventDefault();\n      i.realPoints = i.startPoints = a(o), i.startPoints.length && (u.touch && o.stopPropagation(), i.startEvent = o, i.canTap = !0, i.$target = c, i.$content = p, i.opts = u.opts.touch, i.isPanning = !1, i.isSwiping = !1, i.isZooming = !1, i.isScrolling = !1, i.canPan = d.canPan(), i.startTime = new Date().getTime(), i.distanceX = i.distanceY = i.distance = 0, i.canvasWidth = Math.round(f[0].clientWidth), i.canvasHeight = Math.round(f[0].clientHeight), i.contentLastPos = null, i.contentStartPos = n.fancybox.getTranslate(i.$content) || {\n        top: 0,\n        left: 0\n      }, i.sliderStartPos = n.fancybox.getTranslate(f), i.stagePos = n.fancybox.getTranslate(d.$refs.stage), i.sliderStartPos.top -= i.stagePos.top, i.sliderStartPos.left -= i.stagePos.left, i.contentStartPos.top -= i.stagePos.top, i.contentStartPos.left -= i.stagePos.left, n(e).off(\".fb.touch\").on(h ? \"touchend.fb.touch touchcancel.fb.touch\" : \"mouseup.fb.touch mouseleave.fb.touch\", n.proxy(i, \"ontouchend\")).on(h ? \"touchmove.fb.touch\" : \"mousemove.fb.touch\", n.proxy(i, \"ontouchmove\")), n.fancybox.isMobile && e.addEventListener(\"scroll\", i.onscroll, !0), ((i.opts || i.canPan) && (c.is(i.$stage) || i.$stage.find(c).length) || (c.is(\".fancybox-image\") && o.preventDefault(), n.fancybox.isMobile && c.parents(\".fancybox-caption\").length)) && (i.isScrollable = l(c) || l(c.parent()), n.fancybox.isMobile && i.isScrollable || o.preventDefault(), (1 === i.startPoints.length || u.hasError) && (i.canPan ? (n.fancybox.stop(i.$content), i.isPanning = !0) : i.isSwiping = !0, i.$container.addClass(\"fancybox-is-grabbing\")), 2 === i.startPoints.length && \"image\" === u.type && (u.isLoaded || u.$ghost) && (i.canTap = !1, i.isSwiping = !1, i.isPanning = !1, i.isZooming = !0, n.fancybox.stop(i.$content), i.centerPointStartX = .5 * (i.startPoints[0].x + i.startPoints[1].x) - n(t).scrollLeft(), i.centerPointStartY = .5 * (i.startPoints[0].y + i.startPoints[1].y) - n(t).scrollTop(), i.percentageOfImageAtPinchPointX = (i.centerPointStartX - i.contentStartPos.left) / i.contentStartPos.width, i.percentageOfImageAtPinchPointY = (i.centerPointStartY - i.contentStartPos.top) / i.contentStartPos.height, i.startDistanceBetweenFingers = s(i.startPoints[0], i.startPoints[1]))));\n    }\n  }, d.prototype.onscroll = function (t) {\n    var n = this;\n    n.isScrolling = !0, e.removeEventListener(\"scroll\", n.onscroll, !0);\n  }, d.prototype.ontouchmove = function (t) {\n    var e = this;\n    return void 0 !== t.originalEvent.buttons && 0 === t.originalEvent.buttons ? void e.ontouchend(t) : e.isScrolling ? void (e.canTap = !1) : (e.newPoints = a(t), void ((e.opts || e.canPan) && e.newPoints.length && e.newPoints.length && (e.isSwiping && !0 === e.isSwiping || t.preventDefault(), e.distanceX = s(e.newPoints[0], e.startPoints[0], \"x\"), e.distanceY = s(e.newPoints[0], e.startPoints[0], \"y\"), e.distance = s(e.newPoints[0], e.startPoints[0]), e.distance > 0 && (e.isSwiping ? e.onSwipe(t) : e.isPanning ? e.onPan() : e.isZooming && e.onZoom()))));\n  }, d.prototype.onSwipe = function (e) {\n    var a,\n      s = this,\n      r = s.instance,\n      c = s.isSwiping,\n      l = s.sliderStartPos.left || 0;\n    if (!0 !== c) \"x\" == c && (s.distanceX > 0 && (s.instance.group.length < 2 || 0 === s.instance.current.index && !s.instance.current.opts.loop) ? l += Math.pow(s.distanceX, .8) : s.distanceX < 0 && (s.instance.group.length < 2 || s.instance.current.index === s.instance.group.length - 1 && !s.instance.current.opts.loop) ? l -= Math.pow(-s.distanceX, .8) : l += s.distanceX), s.sliderLastPos = {\n      top: \"x\" == c ? 0 : s.sliderStartPos.top + s.distanceY,\n      left: l\n    }, s.requestId && (i(s.requestId), s.requestId = null), s.requestId = o(function () {\n      s.sliderLastPos && (n.each(s.instance.slides, function (t, e) {\n        var o = e.pos - s.instance.currPos;\n        n.fancybox.setTranslate(e.$slide, {\n          top: s.sliderLastPos.top,\n          left: s.sliderLastPos.left + o * s.canvasWidth + o * e.opts.gutter\n        });\n      }), s.$container.addClass(\"fancybox-is-sliding\"));\n    });else if (Math.abs(s.distance) > 10) {\n      if (s.canTap = !1, r.group.length < 2 && s.opts.vertical ? s.isSwiping = \"y\" : r.isDragging || !1 === s.opts.vertical || \"auto\" === s.opts.vertical && n(t).width() > 800 ? s.isSwiping = \"x\" : (a = Math.abs(180 * Math.atan2(s.distanceY, s.distanceX) / Math.PI), s.isSwiping = a > 45 && a < 135 ? \"y\" : \"x\"), \"y\" === s.isSwiping && n.fancybox.isMobile && s.isScrollable) return void (s.isScrolling = !0);\n      r.isDragging = s.isSwiping, s.startPoints = s.newPoints, n.each(r.slides, function (t, e) {\n        var o, i;\n        n.fancybox.stop(e.$slide), o = n.fancybox.getTranslate(e.$slide), i = n.fancybox.getTranslate(r.$refs.stage), e.$slide.css({\n          transform: \"\",\n          opacity: \"\",\n          \"transition-duration\": \"\"\n        }).removeClass(\"fancybox-animated\").removeClass(function (t, e) {\n          return (e.match(/(^|\\s)fancybox-fx-\\S+/g) || []).join(\" \");\n        }), e.pos === r.current.pos && (s.sliderStartPos.top = o.top - i.top, s.sliderStartPos.left = o.left - i.left), n.fancybox.setTranslate(e.$slide, {\n          top: o.top - i.top,\n          left: o.left - i.left\n        });\n      }), r.SlideShow && r.SlideShow.isActive && r.SlideShow.stop();\n    }\n  }, d.prototype.onPan = function () {\n    var t = this;\n    if (s(t.newPoints[0], t.realPoints[0]) < (n.fancybox.isMobile ? 10 : 5)) return void (t.startPoints = t.newPoints);\n    t.canTap = !1, t.contentLastPos = t.limitMovement(), t.requestId && i(t.requestId), t.requestId = o(function () {\n      n.fancybox.setTranslate(t.$content, t.contentLastPos);\n    });\n  }, d.prototype.limitMovement = function () {\n    var t,\n      e,\n      n,\n      o,\n      i,\n      a,\n      s = this,\n      r = s.canvasWidth,\n      c = s.canvasHeight,\n      l = s.distanceX,\n      d = s.distanceY,\n      u = s.contentStartPos,\n      f = u.left,\n      p = u.top,\n      h = u.width,\n      g = u.height;\n    return i = h > r ? f + l : f, a = p + d, t = Math.max(0, .5 * r - .5 * h), e = Math.max(0, .5 * c - .5 * g), n = Math.min(r - h, .5 * r - .5 * h), o = Math.min(c - g, .5 * c - .5 * g), l > 0 && i > t && (i = t - 1 + Math.pow(-t + f + l, .8) || 0), l < 0 && i < n && (i = n + 1 - Math.pow(n - f - l, .8) || 0), d > 0 && a > e && (a = e - 1 + Math.pow(-e + p + d, .8) || 0), d < 0 && a < o && (a = o + 1 - Math.pow(o - p - d, .8) || 0), {\n      top: a,\n      left: i\n    };\n  }, d.prototype.limitPosition = function (t, e, n, o) {\n    var i = this,\n      a = i.canvasWidth,\n      s = i.canvasHeight;\n    return n > a ? (t = t > 0 ? 0 : t, t = t < a - n ? a - n : t) : t = Math.max(0, a / 2 - n / 2), o > s ? (e = e > 0 ? 0 : e, e = e < s - o ? s - o : e) : e = Math.max(0, s / 2 - o / 2), {\n      top: e,\n      left: t\n    };\n  }, d.prototype.onZoom = function () {\n    var e = this,\n      a = e.contentStartPos,\n      r = a.width,\n      c = a.height,\n      l = a.left,\n      d = a.top,\n      u = s(e.newPoints[0], e.newPoints[1]),\n      f = u / e.startDistanceBetweenFingers,\n      p = Math.floor(r * f),\n      h = Math.floor(c * f),\n      g = (r - p) * e.percentageOfImageAtPinchPointX,\n      b = (c - h) * e.percentageOfImageAtPinchPointY,\n      m = (e.newPoints[0].x + e.newPoints[1].x) / 2 - n(t).scrollLeft(),\n      v = (e.newPoints[0].y + e.newPoints[1].y) / 2 - n(t).scrollTop(),\n      y = m - e.centerPointStartX,\n      x = v - e.centerPointStartY,\n      w = l + (g + y),\n      $ = d + (b + x),\n      S = {\n        top: $,\n        left: w,\n        scaleX: f,\n        scaleY: f\n      };\n    e.canTap = !1, e.newWidth = p, e.newHeight = h, e.contentLastPos = S, e.requestId && i(e.requestId), e.requestId = o(function () {\n      n.fancybox.setTranslate(e.$content, e.contentLastPos);\n    });\n  }, d.prototype.ontouchend = function (t) {\n    var o = this,\n      s = o.isSwiping,\n      r = o.isPanning,\n      c = o.isZooming,\n      l = o.isScrolling;\n    if (o.endPoints = a(t), o.dMs = Math.max(new Date().getTime() - o.startTime, 1), o.$container.removeClass(\"fancybox-is-grabbing\"), n(e).off(\".fb.touch\"), e.removeEventListener(\"scroll\", o.onscroll, !0), o.requestId && (i(o.requestId), o.requestId = null), o.isSwiping = !1, o.isPanning = !1, o.isZooming = !1, o.isScrolling = !1, o.instance.isDragging = !1, o.canTap) return o.onTap(t);\n    o.speed = 100, o.velocityX = o.distanceX / o.dMs * .5, o.velocityY = o.distanceY / o.dMs * .5, r ? o.endPanning() : c ? o.endZooming() : o.endSwiping(s, l);\n  }, d.prototype.endSwiping = function (t, e) {\n    var o = this,\n      i = !1,\n      a = o.instance.group.length,\n      s = Math.abs(o.distanceX),\n      r = \"x\" == t && a > 1 && (o.dMs > 130 && s > 10 || s > 50);\n    o.sliderLastPos = null, \"y\" == t && !e && Math.abs(o.distanceY) > 50 ? (n.fancybox.animate(o.instance.current.$slide, {\n      top: o.sliderStartPos.top + o.distanceY + 150 * o.velocityY,\n      opacity: 0\n    }, 200), i = o.instance.close(!0, 250)) : r && o.distanceX > 0 ? i = o.instance.previous(300) : r && o.distanceX < 0 && (i = o.instance.next(300)), !1 !== i || \"x\" != t && \"y\" != t || o.instance.centerSlide(200), o.$container.removeClass(\"fancybox-is-sliding\");\n  }, d.prototype.endPanning = function () {\n    var t,\n      e,\n      o,\n      i = this;\n    i.contentLastPos && (!1 === i.opts.momentum || i.dMs > 350 ? (t = i.contentLastPos.left, e = i.contentLastPos.top) : (t = i.contentLastPos.left + 500 * i.velocityX, e = i.contentLastPos.top + 500 * i.velocityY), o = i.limitPosition(t, e, i.contentStartPos.width, i.contentStartPos.height), o.width = i.contentStartPos.width, o.height = i.contentStartPos.height, n.fancybox.animate(i.$content, o, 366));\n  }, d.prototype.endZooming = function () {\n    var t,\n      e,\n      o,\n      i,\n      a = this,\n      s = a.instance.current,\n      r = a.newWidth,\n      c = a.newHeight;\n    a.contentLastPos && (t = a.contentLastPos.left, e = a.contentLastPos.top, i = {\n      top: e,\n      left: t,\n      width: r,\n      height: c,\n      scaleX: 1,\n      scaleY: 1\n    }, n.fancybox.setTranslate(a.$content, i), r < a.canvasWidth && c < a.canvasHeight ? a.instance.scaleToFit(150) : r > s.width || c > s.height ? a.instance.scaleToActual(a.centerPointStartX, a.centerPointStartY, 150) : (o = a.limitPosition(t, e, r, c), n.fancybox.animate(a.$content, o, 150)));\n  }, d.prototype.onTap = function (e) {\n    var o,\n      i = this,\n      s = n(e.target),\n      r = i.instance,\n      c = r.current,\n      l = e && a(e) || i.startPoints,\n      d = l[0] ? l[0].x - n(t).scrollLeft() - i.stagePos.left : 0,\n      u = l[0] ? l[0].y - n(t).scrollTop() - i.stagePos.top : 0,\n      f = function f(t) {\n        var o = c.opts[t];\n        if (n.isFunction(o) && (o = o.apply(r, [c, e])), o) switch (o) {\n          case \"close\":\n            r.close(i.startEvent);\n            break;\n          case \"toggleControls\":\n            r.toggleControls();\n            break;\n          case \"next\":\n            r.next();\n            break;\n          case \"nextOrClose\":\n            r.group.length > 1 ? r.next() : r.close(i.startEvent);\n            break;\n          case \"zoom\":\n            \"image\" == c.type && (c.isLoaded || c.$ghost) && (r.canPan() ? r.scaleToFit() : r.isScaledDown() ? r.scaleToActual(d, u) : r.group.length < 2 && r.close(i.startEvent));\n        }\n      };\n    if ((!e.originalEvent || 2 != e.originalEvent.button) && (s.is(\"img\") || !(d > s[0].clientWidth + s.offset().left))) {\n      if (s.is(\".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container\")) o = \"Outside\";else if (s.is(\".fancybox-slide\")) o = \"Slide\";else {\n        if (!r.current.$content || !r.current.$content.find(s).addBack().filter(s).length) return;\n        o = \"Content\";\n      }\n      if (i.tapped) {\n        if (clearTimeout(i.tapped), i.tapped = null, Math.abs(d - i.tapX) > 50 || Math.abs(u - i.tapY) > 50) return this;\n        f(\"dblclick\" + o);\n      } else i.tapX = d, i.tapY = u, c.opts[\"dblclick\" + o] && c.opts[\"dblclick\" + o] !== c.opts[\"click\" + o] ? i.tapped = setTimeout(function () {\n        i.tapped = null, r.isAnimating || f(\"click\" + o);\n      }, 500) : f(\"click\" + o);\n      return this;\n    }\n  }, n(e).on(\"onActivate.fb\", function (t, e) {\n    e && !e.Guestures && (e.Guestures = new d(e));\n  }).on(\"beforeClose.fb\", function (t, e) {\n    e && e.Guestures && e.Guestures.destroy();\n  });\n}(window, document, jQuery), function (t, e) {\n  \"use strict\";\n\n  e.extend(!0, e.fancybox.defaults, {\n    btnTpl: {\n      slideShow: '<button data-fancybox-play class=\"fancybox-button fancybox-button--play\" title=\"{{PLAY_START}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.5 5.4v13.2l11-6.6z\"/></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z\"/></svg></button>'\n    },\n    slideShow: {\n      autoStart: !1,\n      speed: 3e3,\n      progress: !0\n    }\n  });\n  var n = function n(t) {\n    this.instance = t, this.init();\n  };\n  e.extend(n.prototype, {\n    timer: null,\n    isActive: !1,\n    $button: null,\n    init: function init() {\n      var t = this,\n        n = t.instance,\n        o = n.group[n.currIndex].opts.slideShow;\n      t.$button = n.$refs.toolbar.find(\"[data-fancybox-play]\").on(\"click\", function () {\n        t.toggle();\n      }), n.group.length < 2 || !o ? t.$button.hide() : o.progress && (t.$progress = e('<div class=\"fancybox-progress\"></div>').appendTo(n.$refs.inner));\n    },\n    set: function set(t) {\n      var n = this,\n        o = n.instance,\n        i = o.current;\n      i && (!0 === t || i.opts.loop || o.currIndex < o.group.length - 1) ? n.isActive && \"video\" !== i.contentType && (n.$progress && e.fancybox.animate(n.$progress.show(), {\n        scaleX: 1\n      }, i.opts.slideShow.speed), n.timer = setTimeout(function () {\n        o.current.opts.loop || o.current.index != o.group.length - 1 ? o.next() : o.jumpTo(0);\n      }, i.opts.slideShow.speed)) : (n.stop(), o.idleSecondsCounter = 0, o.showControls());\n    },\n    clear: function clear() {\n      var t = this;\n      clearTimeout(t.timer), t.timer = null, t.$progress && t.$progress.removeAttr(\"style\").hide();\n    },\n    start: function start() {\n      var t = this,\n        e = t.instance.current;\n      e && (t.$button.attr(\"title\", (e.opts.i18n[e.opts.lang] || e.opts.i18n.en).PLAY_STOP).removeClass(\"fancybox-button--play\").addClass(\"fancybox-button--pause\"), t.isActive = !0, e.isComplete && t.set(!0), t.instance.trigger(\"onSlideShowChange\", !0));\n    },\n    stop: function stop() {\n      var t = this,\n        e = t.instance.current;\n      t.clear(), t.$button.attr(\"title\", (e.opts.i18n[e.opts.lang] || e.opts.i18n.en).PLAY_START).removeClass(\"fancybox-button--pause\").addClass(\"fancybox-button--play\"), t.isActive = !1, t.instance.trigger(\"onSlideShowChange\", !1), t.$progress && t.$progress.removeAttr(\"style\").hide();\n    },\n    toggle: function toggle() {\n      var t = this;\n      t.isActive ? t.stop() : t.start();\n    }\n  }), e(t).on({\n    \"onInit.fb\": function onInitFb(t, e) {\n      e && !e.SlideShow && (e.SlideShow = new n(e));\n    },\n    \"beforeShow.fb\": function beforeShowFb(t, e, n, o) {\n      var i = e && e.SlideShow;\n      o ? i && n.opts.slideShow.autoStart && i.start() : i && i.isActive && i.clear();\n    },\n    \"afterShow.fb\": function afterShowFb(t, e, n) {\n      var o = e && e.SlideShow;\n      o && o.isActive && o.set();\n    },\n    \"afterKeydown.fb\": function afterKeydownFb(n, o, i, a, s) {\n      var r = o && o.SlideShow;\n      !r || !i.opts.slideShow || 80 !== s && 32 !== s || e(t.activeElement).is(\"button,a,input\") || (a.preventDefault(), r.toggle());\n    },\n    \"beforeClose.fb onDeactivate.fb\": function beforeCloseFbOnDeactivateFb(t, e) {\n      var n = e && e.SlideShow;\n      n && n.stop();\n    }\n  }), e(t).on(\"visibilitychange\", function () {\n    var n = e.fancybox.getInstance(),\n      o = n && n.SlideShow;\n    o && o.isActive && (t.hidden ? o.clear() : o.set());\n  });\n}(document, jQuery), function (t, e) {\n  \"use strict\";\n\n  var n = function () {\n    for (var e = [[\"requestFullscreen\", \"exitFullscreen\", \"fullscreenElement\", \"fullscreenEnabled\", \"fullscreenchange\", \"fullscreenerror\"], [\"webkitRequestFullscreen\", \"webkitExitFullscreen\", \"webkitFullscreenElement\", \"webkitFullscreenEnabled\", \"webkitfullscreenchange\", \"webkitfullscreenerror\"], [\"webkitRequestFullScreen\", \"webkitCancelFullScreen\", \"webkitCurrentFullScreenElement\", \"webkitCancelFullScreen\", \"webkitfullscreenchange\", \"webkitfullscreenerror\"], [\"mozRequestFullScreen\", \"mozCancelFullScreen\", \"mozFullScreenElement\", \"mozFullScreenEnabled\", \"mozfullscreenchange\", \"mozfullscreenerror\"], [\"msRequestFullscreen\", \"msExitFullscreen\", \"msFullscreenElement\", \"msFullscreenEnabled\", \"MSFullscreenChange\", \"MSFullscreenError\"]], n = {}, o = 0; o < e.length; o++) {\n      var i = e[o];\n      if (i && i[1] in t) {\n        for (var a = 0; a < i.length; a++) n[e[0][a]] = i[a];\n        return n;\n      }\n    }\n    return !1;\n  }();\n  if (n) {\n    var o = {\n      request: function request(e) {\n        e = e || t.documentElement, e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT);\n      },\n      exit: function exit() {\n        t[n.exitFullscreen]();\n      },\n      toggle: function toggle(e) {\n        e = e || t.documentElement, this.isFullscreen() ? this.exit() : this.request(e);\n      },\n      isFullscreen: function isFullscreen() {\n        return Boolean(t[n.fullscreenElement]);\n      },\n      enabled: function enabled() {\n        return Boolean(t[n.fullscreenEnabled]);\n      }\n    };\n    e.extend(!0, e.fancybox.defaults, {\n      btnTpl: {\n        fullScreen: '<button data-fancybox-fullscreen class=\"fancybox-button fancybox-button--fsenter\" title=\"{{FULL_SCREEN}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"/></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z\"/></svg></button>'\n      },\n      fullScreen: {\n        autoStart: !1\n      }\n    }), e(t).on(n.fullscreenchange, function () {\n      var t = o.isFullscreen(),\n        n = e.fancybox.getInstance();\n      n && (n.current && \"image\" === n.current.type && n.isAnimating && (n.isAnimating = !1, n.update(!0, !0, 0), n.isComplete || n.complete()), n.trigger(\"onFullscreenChange\", t), n.$refs.container.toggleClass(\"fancybox-is-fullscreen\", t), n.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").toggleClass(\"fancybox-button--fsenter\", !t).toggleClass(\"fancybox-button--fsexit\", t));\n    });\n  }\n  e(t).on({\n    \"onInit.fb\": function onInitFb(t, e) {\n      var i;\n      if (!n) return void e.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").remove();\n      e && e.group[e.currIndex].opts.fullScreen ? (i = e.$refs.container, i.on(\"click.fb-fullscreen\", \"[data-fancybox-fullscreen]\", function (t) {\n        t.stopPropagation(), t.preventDefault(), o.toggle();\n      }), e.opts.fullScreen && !0 === e.opts.fullScreen.autoStart && o.request(), e.FullScreen = o) : e && e.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").hide();\n    },\n    \"afterKeydown.fb\": function afterKeydownFb(t, e, n, o, i) {\n      e && e.FullScreen && 70 === i && (o.preventDefault(), e.FullScreen.toggle());\n    },\n    \"beforeClose.fb\": function beforeCloseFb(t, e) {\n      e && e.FullScreen && e.$refs.container.hasClass(\"fancybox-is-fullscreen\") && o.exit();\n    }\n  });\n}(document, jQuery), function (t, e) {\n  \"use strict\";\n\n  var n = \"fancybox-thumbs\";\n  e.fancybox.defaults = e.extend(!0, {\n    btnTpl: {\n      thumbs: '<button data-fancybox-thumbs class=\"fancybox-button fancybox-button--thumbs\" title=\"{{THUMBS}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z\"/></svg></button>'\n    },\n    thumbs: {\n      autoStart: !1,\n      hideOnClose: !0,\n      parentEl: \".fancybox-container\",\n      axis: \"y\"\n    }\n  }, e.fancybox.defaults);\n  var o = function o(t) {\n    this.init(t);\n  };\n  e.extend(o.prototype, {\n    $button: null,\n    $grid: null,\n    $list: null,\n    isVisible: !1,\n    isActive: !1,\n    init: function init(t) {\n      var e = this,\n        n = t.group,\n        o = 0;\n      e.instance = t, e.opts = n[t.currIndex].opts.thumbs, t.Thumbs = e, e.$button = t.$refs.toolbar.find(\"[data-fancybox-thumbs]\");\n      for (var i = 0, a = n.length; i < a && (n[i].thumb && o++, !(o > 1)); i++);\n      o > 1 && e.opts ? (e.$button.removeAttr(\"style\").on(\"click\", function () {\n        e.toggle();\n      }), e.isActive = !0) : e.$button.hide();\n    },\n    create: function create() {\n      var t,\n        o = this,\n        i = o.instance,\n        a = o.opts.parentEl,\n        s = [];\n      o.$grid || (o.$grid = e('<div class=\"' + n + \" \" + n + \"-\" + o.opts.axis + '\"></div>').appendTo(i.$refs.container.find(a).addBack().filter(a)), o.$grid.on(\"click\", \"a\", function () {\n        i.jumpTo(e(this).attr(\"data-index\"));\n      })), o.$list || (o.$list = e('<div class=\"' + n + '__list\">').appendTo(o.$grid)), e.each(i.group, function (e, n) {\n        t = n.thumb, t || \"image\" !== n.type || (t = n.src), s.push('<a href=\"javascript:;\" tabindex=\"0\" data-index=\"' + e + '\"' + (t && t.length ? ' style=\"background-image:url(' + t + ')\"' : 'class=\"fancybox-thumbs-missing\"') + \"></a>\");\n      }), o.$list[0].innerHTML = s.join(\"\"), \"x\" === o.opts.axis && o.$list.width(parseInt(o.$grid.css(\"padding-right\"), 10) + i.group.length * o.$list.children().eq(0).outerWidth(!0));\n    },\n    focus: function focus(t) {\n      var e,\n        n,\n        o = this,\n        i = o.$list,\n        a = o.$grid;\n      o.instance.current && (e = i.children().removeClass(\"fancybox-thumbs-active\").filter('[data-index=\"' + o.instance.current.index + '\"]').addClass(\"fancybox-thumbs-active\"), n = e.position(), \"y\" === o.opts.axis && (n.top < 0 || n.top > i.height() - e.outerHeight()) ? i.stop().animate({\n        scrollTop: i.scrollTop() + n.top\n      }, t) : \"x\" === o.opts.axis && (n.left < a.scrollLeft() || n.left > a.scrollLeft() + (a.width() - e.outerWidth())) && i.parent().stop().animate({\n        scrollLeft: n.left\n      }, t));\n    },\n    update: function update() {\n      var t = this;\n      t.instance.$refs.container.toggleClass(\"fancybox-show-thumbs\", this.isVisible), t.isVisible ? (t.$grid || t.create(), t.instance.trigger(\"onThumbsShow\"), t.focus(0)) : t.$grid && t.instance.trigger(\"onThumbsHide\"), t.instance.update();\n    },\n    hide: function hide() {\n      this.isVisible = !1, this.update();\n    },\n    show: function show() {\n      this.isVisible = !0, this.update();\n    },\n    toggle: function toggle() {\n      this.isVisible = !this.isVisible, this.update();\n    }\n  }), e(t).on({\n    \"onInit.fb\": function onInitFb(t, e) {\n      var n;\n      e && !e.Thumbs && (n = new o(e), n.isActive && !0 === n.opts.autoStart && n.show());\n    },\n    \"beforeShow.fb\": function beforeShowFb(t, e, n, o) {\n      var i = e && e.Thumbs;\n      i && i.isVisible && i.focus(o ? 0 : 250);\n    },\n    \"afterKeydown.fb\": function afterKeydownFb(t, e, n, o, i) {\n      var a = e && e.Thumbs;\n      a && a.isActive && 71 === i && (o.preventDefault(), a.toggle());\n    },\n    \"beforeClose.fb\": function beforeCloseFb(t, e) {\n      var n = e && e.Thumbs;\n      n && n.isVisible && !1 !== n.opts.hideOnClose && n.$grid.hide();\n    }\n  });\n}(document, jQuery), function (t, e) {\n  \"use strict\";\n\n  function n(t) {\n    var e = {\n      \"&\": \"&amp;\",\n      \"<\": \"&lt;\",\n      \">\": \"&gt;\",\n      '\"': \"&quot;\",\n      \"'\": \"&#39;\",\n      \"/\": \"&#x2F;\",\n      \"`\": \"&#x60;\",\n      \"=\": \"&#x3D;\"\n    };\n    return String(t).replace(/[&<>\"'`=\\/]/g, function (t) {\n      return e[t];\n    });\n  }\n  e.extend(!0, e.fancybox.defaults, {\n    btnTpl: {\n      share: '<button data-fancybox-share class=\"fancybox-button fancybox-button--share\" title=\"{{SHARE}}\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z\"/></svg></button>'\n    },\n    share: {\n      url: function url(t, e) {\n        return !t.currentHash && \"inline\" !== e.type && \"html\" !== e.type && (e.origSrc || e.src) || window.location;\n      },\n      tpl: '<div class=\"fancybox-share\"><h1>{{SHARE}}</h1><p><a class=\"fancybox-share__button fancybox-share__button--fb\" href=\"https://www.facebook.com/sharer/sharer.php?u={{url}}\"><svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196\" /></svg><span>Facebook</span></a><a class=\"fancybox-share__button fancybox-share__button--tw\" href=\"https://twitter.com/intent/tweet?url={{url}}&text={{descr}}\"><svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z\" /></svg><span>Twitter</span></a><a class=\"fancybox-share__button fancybox-share__button--pt\" href=\"https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}\"><svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z\" fill=\"#fff\"/></svg><span>Pinterest</span></a></p><p><input class=\"fancybox-share__input\" type=\"text\" value=\"{{url_raw}}\" onclick=\"select()\" /></p></div>'\n    }\n  }), e(t).on(\"click\", \"[data-fancybox-share]\", function () {\n    var t,\n      o,\n      i = e.fancybox.getInstance(),\n      a = i.current || null;\n    a && (\"function\" === e.type(a.opts.share.url) && (t = a.opts.share.url.apply(a, [i, a])), o = a.opts.share.tpl.replace(/\\{\\{media\\}\\}/g, \"image\" === a.type ? encodeURIComponent(a.src) : \"\").replace(/\\{\\{url\\}\\}/g, encodeURIComponent(t)).replace(/\\{\\{url_raw\\}\\}/g, n(t)).replace(/\\{\\{descr\\}\\}/g, i.$caption ? encodeURIComponent(i.$caption.text()) : \"\"), e.fancybox.open({\n      src: i.translate(i, o),\n      type: \"html\",\n      opts: {\n        touch: !1,\n        animationEffect: !1,\n        afterLoad: function afterLoad(t, e) {\n          i.$refs.container.one(\"beforeClose.fb\", function () {\n            t.close(null, 0);\n          }), e.$content.find(\".fancybox-share__button\").click(function () {\n            return window.open(this.href, \"Share\", \"width=550, height=450\"), !1;\n          });\n        },\n        mobile: {\n          autoFocus: !1\n        }\n      }\n    }));\n  });\n}(document, jQuery), function (t, e, n) {\n  \"use strict\";\n\n  function o() {\n    var e = t.location.hash.substr(1),\n      n = e.split(\"-\"),\n      o = n.length > 1 && /^\\+?\\d+$/.test(n[n.length - 1]) ? parseInt(n.pop(-1), 10) || 1 : 1,\n      i = n.join(\"-\");\n    return {\n      hash: e,\n      index: o < 1 ? 1 : o,\n      gallery: i\n    };\n  }\n  function i(t) {\n    \"\" !== t.gallery && n(\"[data-fancybox='\" + n.escapeSelector(t.gallery) + \"']\").eq(t.index - 1).focus().trigger(\"click.fb-start\");\n  }\n  function a(t) {\n    var e, n;\n    return !!t && (e = t.current ? t.current.opts : t.opts, \"\" !== (n = e.hash || (e.$orig ? e.$orig.data(\"fancybox\") || e.$orig.data(\"fancybox-trigger\") : \"\")) && n);\n  }\n  n.escapeSelector || (n.escapeSelector = function (t) {\n    return (t + \"\").replace(/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g, function (t, e) {\n      return e ? \"\\0\" === t ? \"�\" : t.slice(0, -1) + \"\\\\\" + t.charCodeAt(t.length - 1).toString(16) + \" \" : \"\\\\\" + t;\n    });\n  }), n(function () {\n    !1 !== n.fancybox.defaults.hash && (n(e).on({\n      \"onInit.fb\": function onInitFb(t, e) {\n        var n, i;\n        !1 !== e.group[e.currIndex].opts.hash && (n = o(), (i = a(e)) && n.gallery && i == n.gallery && (e.currIndex = n.index - 1));\n      },\n      \"beforeShow.fb\": function beforeShowFb(n, o, i, s) {\n        var r;\n        i && !1 !== i.opts.hash && (r = a(o)) && (o.currentHash = r + (o.group.length > 1 ? \"-\" + (i.index + 1) : \"\"), t.location.hash !== \"#\" + o.currentHash && (s && !o.origHash && (o.origHash = t.location.hash), o.hashTimer && clearTimeout(o.hashTimer), o.hashTimer = setTimeout(function () {\n          \"replaceState\" in t.history ? (t.history[s ? \"pushState\" : \"replaceState\"]({}, e.title, t.location.pathname + t.location.search + \"#\" + o.currentHash), s && (o.hasCreatedHistory = !0)) : t.location.hash = o.currentHash, o.hashTimer = null;\n        }, 300)));\n      },\n      \"beforeClose.fb\": function beforeCloseFb(n, o, i) {\n        i && !1 !== i.opts.hash && (clearTimeout(o.hashTimer), o.currentHash && o.hasCreatedHistory ? t.history.back() : o.currentHash && (\"replaceState\" in t.history ? t.history.replaceState({}, e.title, t.location.pathname + t.location.search + (o.origHash || \"\")) : t.location.hash = o.origHash), o.currentHash = null);\n      }\n    }), n(t).on(\"hashchange.fb\", function () {\n      var t = o(),\n        e = null;\n      n.each(n(\".fancybox-container\").get().reverse(), function (t, o) {\n        var i = n(o).data(\"FancyBox\");\n        if (i && i.currentHash) return e = i, !1;\n      }), e ? e.currentHash === t.gallery + \"-\" + t.index || 1 === t.index && e.currentHash == t.gallery || (e.currentHash = null, e.close()) : \"\" !== t.gallery && i(t);\n    }), setTimeout(function () {\n      n.fancybox.getInstance() || i(o());\n    }, 50));\n  });\n}(window, document, jQuery), function (t, e) {\n  \"use strict\";\n\n  var n = new Date().getTime();\n  e(t).on({\n    \"onInit.fb\": function onInitFb(t, e, o) {\n      e.$refs.stage.on(\"mousewheel DOMMouseScroll wheel MozMousePixelScroll\", function (t) {\n        var o = e.current,\n          i = new Date().getTime();\n        e.group.length < 2 || !1 === o.opts.wheel || \"auto\" === o.opts.wheel && \"image\" !== o.type || (t.preventDefault(), t.stopPropagation(), o.$slide.hasClass(\"fancybox-animated\") || (t = t.originalEvent || t, i - n < 250 || (n = i, e[(-t.deltaY || -t.deltaX || t.wheelDelta || -t.detail) < 0 ? \"next\" : \"previous\"]())));\n      });\n    }\n  });\n}(document, jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/jquery.fancybox.min.js\n");

/***/ }),

/***/ "./resources/js/landing-page/jquery.stellar.min.js":
/*!*********************************************************!*\
  !*** ./resources/js/landing-page/jquery.stellar.min.js ***!
  \*********************************************************/
/***/ (function() {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*! Stellar.js v0.6.2 | Copyright 2014, Mark Dalgleish | http://markdalgleish.com/projects/stellar.js | http://markdalgleish.mit-license.org */\n!function (a, b, c, d) {\n  function e(b, c) {\n    this.element = b, this.options = a.extend({}, g, c), this._defaults = g, this._name = f, this.init();\n  }\n  var f = \"stellar\",\n    g = {\n      scrollProperty: \"scroll\",\n      positionProperty: \"position\",\n      horizontalScrolling: !0,\n      verticalScrolling: !0,\n      horizontalOffset: 0,\n      verticalOffset: 0,\n      responsive: !1,\n      parallaxBackgrounds: !0,\n      parallaxElements: !0,\n      hideDistantElements: !0,\n      hideElement: function hideElement(a) {\n        a.hide();\n      },\n      showElement: function showElement(a) {\n        a.show();\n      }\n    },\n    h = {\n      scroll: {\n        getLeft: function getLeft(a) {\n          return a.scrollLeft();\n        },\n        setLeft: function setLeft(a, b) {\n          a.scrollLeft(b);\n        },\n        getTop: function getTop(a) {\n          return a.scrollTop();\n        },\n        setTop: function setTop(a, b) {\n          a.scrollTop(b);\n        }\n      },\n      position: {\n        getLeft: function getLeft(a) {\n          return -1 * parseInt(a.css(\"left\"), 10);\n        },\n        getTop: function getTop(a) {\n          return -1 * parseInt(a.css(\"top\"), 10);\n        }\n      },\n      margin: {\n        getLeft: function getLeft(a) {\n          return -1 * parseInt(a.css(\"margin-left\"), 10);\n        },\n        getTop: function getTop(a) {\n          return -1 * parseInt(a.css(\"margin-top\"), 10);\n        }\n      },\n      transform: {\n        getLeft: function getLeft(a) {\n          var b = getComputedStyle(a[0])[k];\n          return \"none\" !== b ? -1 * parseInt(b.match(/(-?[0-9]+)/g)[4], 10) : 0;\n        },\n        getTop: function getTop(a) {\n          var b = getComputedStyle(a[0])[k];\n          return \"none\" !== b ? -1 * parseInt(b.match(/(-?[0-9]+)/g)[5], 10) : 0;\n        }\n      }\n    },\n    i = {\n      position: {\n        setLeft: function setLeft(a, b) {\n          a.css(\"left\", b);\n        },\n        setTop: function setTop(a, b) {\n          a.css(\"top\", b);\n        }\n      },\n      transform: {\n        setPosition: function setPosition(a, b, c, d, e) {\n          a[0].style[k] = \"translate3d(\" + (b - c) + \"px, \" + (d - e) + \"px, 0)\";\n        }\n      }\n    },\n    j = function () {\n      var b,\n        c = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/,\n        d = a(\"script\")[0].style,\n        e = \"\";\n      for (b in d) if (c.test(b)) {\n        e = b.match(c)[0];\n        break;\n      }\n      return \"WebkitOpacity\" in d && (e = \"Webkit\"), \"KhtmlOpacity\" in d && (e = \"Khtml\"), function (a) {\n        return e + (e.length > 0 ? a.charAt(0).toUpperCase() + a.slice(1) : a);\n      };\n    }(),\n    k = j(\"transform\"),\n    l = a(\"<div />\", {\n      style: \"background:#fff\"\n    }).css(\"background-position-x\") !== d,\n    m = l ? function (a, b, c) {\n      a.css({\n        \"background-position-x\": b,\n        \"background-position-y\": c\n      });\n    } : function (a, b, c) {\n      a.css(\"background-position\", b + \" \" + c);\n    },\n    n = l ? function (a) {\n      return [a.css(\"background-position-x\"), a.css(\"background-position-y\")];\n    } : function (a) {\n      return a.css(\"background-position\").split(\" \");\n    },\n    o = b.requestAnimationFrame || b.webkitRequestAnimationFrame || b.mozRequestAnimationFrame || b.oRequestAnimationFrame || b.msRequestAnimationFrame || function (a) {\n      setTimeout(a, 1e3 / 60);\n    };\n  e.prototype = {\n    init: function init() {\n      this.options.name = f + \"_\" + Math.floor(1e9 * Math.random()), this._defineElements(), this._defineGetters(), this._defineSetters(), this._handleWindowLoadAndResize(), this._detectViewport(), this.refresh({\n        firstLoad: !0\n      }), \"scroll\" === this.options.scrollProperty ? this._handleScrollEvent() : this._startAnimationLoop();\n    },\n    _defineElements: function _defineElements() {\n      this.element === c.body && (this.element = b), this.$scrollElement = a(this.element), this.$element = this.element === b ? a(\"body\") : this.$scrollElement, this.$viewportElement = this.options.viewportElement !== d ? a(this.options.viewportElement) : this.$scrollElement[0] === b || \"scroll\" === this.options.scrollProperty ? this.$scrollElement : this.$scrollElement.parent();\n    },\n    _defineGetters: function _defineGetters() {\n      var a = this,\n        b = h[a.options.scrollProperty];\n      this._getScrollLeft = function () {\n        return b.getLeft(a.$scrollElement);\n      }, this._getScrollTop = function () {\n        return b.getTop(a.$scrollElement);\n      };\n    },\n    _defineSetters: function _defineSetters() {\n      var b = this,\n        c = h[b.options.scrollProperty],\n        d = i[b.options.positionProperty],\n        e = c.setLeft,\n        f = c.setTop;\n      this._setScrollLeft = \"function\" == typeof e ? function (a) {\n        e(b.$scrollElement, a);\n      } : a.noop, this._setScrollTop = \"function\" == typeof f ? function (a) {\n        f(b.$scrollElement, a);\n      } : a.noop, this._setPosition = d.setPosition || function (a, c, e, f, g) {\n        b.options.horizontalScrolling && d.setLeft(a, c, e), b.options.verticalScrolling && d.setTop(a, f, g);\n      };\n    },\n    _handleWindowLoadAndResize: function _handleWindowLoadAndResize() {\n      var c = this,\n        d = a(b);\n      c.options.responsive && d.bind(\"load.\" + this.name, function () {\n        c.refresh();\n      }), d.bind(\"resize.\" + this.name, function () {\n        c._detectViewport(), c.options.responsive && c.refresh();\n      });\n    },\n    refresh: function refresh(c) {\n      var d = this,\n        e = d._getScrollLeft(),\n        f = d._getScrollTop();\n      c && c.firstLoad || this._reset(), this._setScrollLeft(0), this._setScrollTop(0), this._setOffsets(), this._findParticles(), this._findBackgrounds(), c && c.firstLoad && /WebKit/.test(navigator.userAgent) && a(b).load(function () {\n        var a = d._getScrollLeft(),\n          b = d._getScrollTop();\n        d._setScrollLeft(a + 1), d._setScrollTop(b + 1), d._setScrollLeft(a), d._setScrollTop(b);\n      }), this._setScrollLeft(e), this._setScrollTop(f);\n    },\n    _detectViewport: function _detectViewport() {\n      var a = this.$viewportElement.offset(),\n        b = null !== a && a !== d;\n      this.viewportWidth = this.$viewportElement.width(), this.viewportHeight = this.$viewportElement.height(), this.viewportOffsetTop = b ? a.top : 0, this.viewportOffsetLeft = b ? a.left : 0;\n    },\n    _findParticles: function _findParticles() {\n      {\n        var b = this;\n        this._getScrollLeft(), this._getScrollTop();\n      }\n      if (this.particles !== d) for (var c = this.particles.length - 1; c >= 0; c--) this.particles[c].$element.data(\"stellar-elementIsActive\", d);\n      this.particles = [], this.options.parallaxElements && this.$element.find(\"[data-stellar-ratio]\").each(function () {\n        var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m = a(this),\n          n = 0,\n          o = 0,\n          p = 0,\n          q = 0;\n        if (m.data(\"stellar-elementIsActive\")) {\n          if (m.data(\"stellar-elementIsActive\") !== this) return;\n        } else m.data(\"stellar-elementIsActive\", this);\n        b.options.showElement(m), m.data(\"stellar-startingLeft\") ? (m.css(\"left\", m.data(\"stellar-startingLeft\")), m.css(\"top\", m.data(\"stellar-startingTop\"))) : (m.data(\"stellar-startingLeft\", m.css(\"left\")), m.data(\"stellar-startingTop\", m.css(\"top\"))), f = m.position().left, g = m.position().top, h = \"auto\" === m.css(\"margin-left\") ? 0 : parseInt(m.css(\"margin-left\"), 10), i = \"auto\" === m.css(\"margin-top\") ? 0 : parseInt(m.css(\"margin-top\"), 10), k = m.offset().left - h, l = m.offset().top - i, m.parents().each(function () {\n          var b = a(this);\n          return b.data(\"stellar-offset-parent\") === !0 ? (n = p, o = q, j = b, !1) : (p += b.position().left, void (q += b.position().top));\n        }), c = m.data(\"stellar-horizontal-offset\") !== d ? m.data(\"stellar-horizontal-offset\") : j !== d && j.data(\"stellar-horizontal-offset\") !== d ? j.data(\"stellar-horizontal-offset\") : b.horizontalOffset, e = m.data(\"stellar-vertical-offset\") !== d ? m.data(\"stellar-vertical-offset\") : j !== d && j.data(\"stellar-vertical-offset\") !== d ? j.data(\"stellar-vertical-offset\") : b.verticalOffset, b.particles.push({\n          $element: m,\n          $offsetParent: j,\n          isFixed: \"fixed\" === m.css(\"position\"),\n          horizontalOffset: c,\n          verticalOffset: e,\n          startingPositionLeft: f,\n          startingPositionTop: g,\n          startingOffsetLeft: k,\n          startingOffsetTop: l,\n          parentOffsetLeft: n,\n          parentOffsetTop: o,\n          stellarRatio: m.data(\"stellar-ratio\") !== d ? m.data(\"stellar-ratio\") : 1,\n          width: m.outerWidth(!0),\n          height: m.outerHeight(!0),\n          isHidden: !1\n        });\n      });\n    },\n    _findBackgrounds: function _findBackgrounds() {\n      var b,\n        c = this,\n        e = this._getScrollLeft(),\n        f = this._getScrollTop();\n      this.backgrounds = [], this.options.parallaxBackgrounds && (b = this.$element.find(\"[data-stellar-background-ratio]\"), this.$element.data(\"stellar-background-ratio\") && (b = b.add(this.$element)), b.each(function () {\n        var b,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          o = a(this),\n          p = n(o),\n          q = 0,\n          r = 0,\n          s = 0,\n          t = 0;\n        if (o.data(\"stellar-backgroundIsActive\")) {\n          if (o.data(\"stellar-backgroundIsActive\") !== this) return;\n        } else o.data(\"stellar-backgroundIsActive\", this);\n        o.data(\"stellar-backgroundStartingLeft\") ? m(o, o.data(\"stellar-backgroundStartingLeft\"), o.data(\"stellar-backgroundStartingTop\")) : (o.data(\"stellar-backgroundStartingLeft\", p[0]), o.data(\"stellar-backgroundStartingTop\", p[1])), h = \"auto\" === o.css(\"margin-left\") ? 0 : parseInt(o.css(\"margin-left\"), 10), i = \"auto\" === o.css(\"margin-top\") ? 0 : parseInt(o.css(\"margin-top\"), 10), j = o.offset().left - h - e, k = o.offset().top - i - f, o.parents().each(function () {\n          var b = a(this);\n          return b.data(\"stellar-offset-parent\") === !0 ? (q = s, r = t, l = b, !1) : (s += b.position().left, void (t += b.position().top));\n        }), b = o.data(\"stellar-horizontal-offset\") !== d ? o.data(\"stellar-horizontal-offset\") : l !== d && l.data(\"stellar-horizontal-offset\") !== d ? l.data(\"stellar-horizontal-offset\") : c.horizontalOffset, g = o.data(\"stellar-vertical-offset\") !== d ? o.data(\"stellar-vertical-offset\") : l !== d && l.data(\"stellar-vertical-offset\") !== d ? l.data(\"stellar-vertical-offset\") : c.verticalOffset, c.backgrounds.push({\n          $element: o,\n          $offsetParent: l,\n          isFixed: \"fixed\" === o.css(\"background-attachment\"),\n          horizontalOffset: b,\n          verticalOffset: g,\n          startingValueLeft: p[0],\n          startingValueTop: p[1],\n          startingBackgroundPositionLeft: isNaN(parseInt(p[0], 10)) ? 0 : parseInt(p[0], 10),\n          startingBackgroundPositionTop: isNaN(parseInt(p[1], 10)) ? 0 : parseInt(p[1], 10),\n          startingPositionLeft: o.position().left,\n          startingPositionTop: o.position().top,\n          startingOffsetLeft: j,\n          startingOffsetTop: k,\n          parentOffsetLeft: q,\n          parentOffsetTop: r,\n          stellarRatio: o.data(\"stellar-background-ratio\") === d ? 1 : o.data(\"stellar-background-ratio\")\n        });\n      }));\n    },\n    _reset: function _reset() {\n      var a, b, c, d, e;\n      for (e = this.particles.length - 1; e >= 0; e--) a = this.particles[e], b = a.$element.data(\"stellar-startingLeft\"), c = a.$element.data(\"stellar-startingTop\"), this._setPosition(a.$element, b, b, c, c), this.options.showElement(a.$element), a.$element.data(\"stellar-startingLeft\", null).data(\"stellar-elementIsActive\", null).data(\"stellar-backgroundIsActive\", null);\n      for (e = this.backgrounds.length - 1; e >= 0; e--) d = this.backgrounds[e], d.$element.data(\"stellar-backgroundStartingLeft\", null).data(\"stellar-backgroundStartingTop\", null), m(d.$element, d.startingValueLeft, d.startingValueTop);\n    },\n    destroy: function destroy() {\n      this._reset(), this.$scrollElement.unbind(\"resize.\" + this.name).unbind(\"scroll.\" + this.name), this._animationLoop = a.noop, a(b).unbind(\"load.\" + this.name).unbind(\"resize.\" + this.name);\n    },\n    _setOffsets: function _setOffsets() {\n      var c = this,\n        d = a(b);\n      d.unbind(\"resize.horizontal-\" + this.name).unbind(\"resize.vertical-\" + this.name), \"function\" == typeof this.options.horizontalOffset ? (this.horizontalOffset = this.options.horizontalOffset(), d.bind(\"resize.horizontal-\" + this.name, function () {\n        c.horizontalOffset = c.options.horizontalOffset();\n      })) : this.horizontalOffset = this.options.horizontalOffset, \"function\" == typeof this.options.verticalOffset ? (this.verticalOffset = this.options.verticalOffset(), d.bind(\"resize.vertical-\" + this.name, function () {\n        c.verticalOffset = c.options.verticalOffset();\n      })) : this.verticalOffset = this.options.verticalOffset;\n    },\n    _repositionElements: function _repositionElements() {\n      var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k = this._getScrollLeft(),\n        l = this._getScrollTop(),\n        n = !0,\n        o = !0;\n      if (this.currentScrollLeft !== k || this.currentScrollTop !== l || this.currentWidth !== this.viewportWidth || this.currentHeight !== this.viewportHeight) {\n        for (this.currentScrollLeft = k, this.currentScrollTop = l, this.currentWidth = this.viewportWidth, this.currentHeight = this.viewportHeight, j = this.particles.length - 1; j >= 0; j--) a = this.particles[j], b = a.isFixed ? 1 : 0, this.options.horizontalScrolling ? (f = (k + a.horizontalOffset + this.viewportOffsetLeft + a.startingPositionLeft - a.startingOffsetLeft + a.parentOffsetLeft) * -(a.stellarRatio + b - 1) + a.startingPositionLeft, h = f - a.startingPositionLeft + a.startingOffsetLeft) : (f = a.startingPositionLeft, h = a.startingOffsetLeft), this.options.verticalScrolling ? (g = (l + a.verticalOffset + this.viewportOffsetTop + a.startingPositionTop - a.startingOffsetTop + a.parentOffsetTop) * -(a.stellarRatio + b - 1) + a.startingPositionTop, i = g - a.startingPositionTop + a.startingOffsetTop) : (g = a.startingPositionTop, i = a.startingOffsetTop), this.options.hideDistantElements && (o = !this.options.horizontalScrolling || h + a.width > (a.isFixed ? 0 : k) && h < (a.isFixed ? 0 : k) + this.viewportWidth + this.viewportOffsetLeft, n = !this.options.verticalScrolling || i + a.height > (a.isFixed ? 0 : l) && i < (a.isFixed ? 0 : l) + this.viewportHeight + this.viewportOffsetTop), o && n ? (a.isHidden && (this.options.showElement(a.$element), a.isHidden = !1), this._setPosition(a.$element, f, a.startingPositionLeft, g, a.startingPositionTop)) : a.isHidden || (this.options.hideElement(a.$element), a.isHidden = !0);\n        for (j = this.backgrounds.length - 1; j >= 0; j--) c = this.backgrounds[j], b = c.isFixed ? 0 : 1, d = this.options.horizontalScrolling ? (k + c.horizontalOffset - this.viewportOffsetLeft - c.startingOffsetLeft + c.parentOffsetLeft - c.startingBackgroundPositionLeft) * (b - c.stellarRatio) + \"px\" : c.startingValueLeft, e = this.options.verticalScrolling ? (l + c.verticalOffset - this.viewportOffsetTop - c.startingOffsetTop + c.parentOffsetTop - c.startingBackgroundPositionTop) * (b - c.stellarRatio) + \"px\" : c.startingValueTop, m(c.$element, d, e);\n      }\n    },\n    _handleScrollEvent: function _handleScrollEvent() {\n      var a = this,\n        b = !1,\n        c = function c() {\n          a._repositionElements(), b = !1;\n        },\n        d = function d() {\n          b || (o(c), b = !0);\n        };\n      this.$scrollElement.bind(\"scroll.\" + this.name, d), d();\n    },\n    _startAnimationLoop: function _startAnimationLoop() {\n      var a = this;\n      this._animationLoop = function () {\n        o(a._animationLoop), a._repositionElements();\n      }, this._animationLoop();\n    }\n  }, a.fn[f] = function (b) {\n    var c = arguments;\n    return b === d || \"object\" == _typeof(b) ? this.each(function () {\n      a.data(this, \"plugin_\" + f) || a.data(this, \"plugin_\" + f, new e(this, b));\n    }) : \"string\" == typeof b && \"_\" !== b[0] && \"init\" !== b ? this.each(function () {\n      var d = a.data(this, \"plugin_\" + f);\n      d instanceof e && \"function\" == typeof d[b] && d[b].apply(d, Array.prototype.slice.call(c, 1)), \"destroy\" === b && a.data(this, \"plugin_\" + f, null);\n    }) : void 0;\n  }, a[f] = function () {\n    var c = a(b);\n    return c.stellar.apply(c, Array.prototype.slice.call(arguments, 0));\n  }, a[f].scrollProperty = h, a[f].positionProperty = i, b.Stellar = e;\n}(jQuery, this, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/jquery.stellar.min.js\n");

/***/ }),

/***/ "./resources/js/landing-page/main.js":
/*!*******************************************!*\
  !*** ./resources/js/landing-page/main.js ***!
  \*******************************************/
/***/ (() => {

eval("AOS.init({\n  duration: 800,\n  easing: 'slide',\n  once: false\n});\njQuery(document).ready(function ($) {\n  \"use strict\";\n\n  var siteMenuClone = function siteMenuClone() {\n    $('.js-clone-nav').each(function () {\n      var $this = $(this);\n      $this.clone().attr('class', 'site-nav-wrap').appendTo('.site-mobile-menu-body');\n    });\n    setTimeout(function () {\n      var counter = 0;\n      $('.site-mobile-menu .has-children').each(function () {\n        var $this = $(this);\n        $this.prepend('<span class=\"arrow-collapse collapsed\">');\n        $this.find('.arrow-collapse').attr({\n          'data-toggle': 'collapse',\n          'data-target': '#collapseItem' + counter\n        });\n        $this.find('> ul').attr({\n          'class': 'collapse',\n          'id': 'collapseItem' + counter\n        });\n        counter++;\n      });\n    }, 1000);\n    $('body').on('click', '.arrow-collapse', function (e) {\n      var $this = $(this);\n      if ($this.closest('li').find('.collapse').hasClass('show')) {\n        $this.removeClass('active');\n      } else {\n        $this.addClass('active');\n      }\n      e.preventDefault();\n    });\n    $(window).resize(function () {\n      var $this = $(this),\n        w = $this.width();\n      if (w > 768) {\n        if ($('body').hasClass('offcanvas-menu')) {\n          $('body').removeClass('offcanvas-menu');\n        }\n      }\n    });\n    $('body').on('click', '.js-menu-toggle', function (e) {\n      var $this = $(this);\n      e.preventDefault();\n      if ($('body').hasClass('offcanvas-menu')) {\n        $('body').removeClass('offcanvas-menu');\n        $this.removeClass('active');\n      } else {\n        $('body').addClass('offcanvas-menu');\n        $this.addClass('active');\n      }\n    });\n\n    // click outisde offcanvas\n    $(document).mouseup(function (e) {\n      var container = $(\".site-mobile-menu\");\n      if (!container.is(e.target) && container.has(e.target).length === 0) {\n        if ($('body').hasClass('offcanvas-menu')) {\n          $('body').removeClass('offcanvas-menu');\n        }\n      }\n    });\n  };\n  siteMenuClone();\n  var sitePlusMinus = function sitePlusMinus() {\n    $('.js-btn-minus').on('click', function (e) {\n      e.preventDefault();\n      if ($(this).closest('.input-group').find('.form-control').val() != 0) {\n        $(this).closest('.input-group').find('.form-control').val(parseInt($(this).closest('.input-group').find('.form-control').val()) - 1);\n      } else {\n        $(this).closest('.input-group').find('.form-control').val(parseInt(0));\n      }\n    });\n    $('.js-btn-plus').on('click', function (e) {\n      e.preventDefault();\n      $(this).closest('.input-group').find('.form-control').val(parseInt($(this).closest('.input-group').find('.form-control').val()) + 1);\n    });\n  };\n  // sitePlusMinus();\n\n  var siteSliderRange = function siteSliderRange() {\n    $(\"#slider-range\").slider({\n      range: true,\n      min: 0,\n      max: 500,\n      values: [75, 300],\n      slide: function slide(event, ui) {\n        $(\"#amount\").val(\"$\" + ui.values[0] + \" - $\" + ui.values[1]);\n      }\n    });\n    $(\"#amount\").val(\"$\" + $(\"#slider-range\").slider(\"values\", 0) + \" - $\" + $(\"#slider-range\").slider(\"values\", 1));\n  };\n  // siteSliderRange();\n\n  var siteCarousel = function siteCarousel() {\n    if ($('.nonloop-block-13').length > 0) {\n      $('.nonloop-block-13').owlCarousel({\n        center: false,\n        items: 1,\n        loop: true,\n        stagePadding: 0,\n        margin: 0,\n        autoplay: true,\n        nav: true,\n        navText: ['<span class=\"icon-arrow_back\">', '<span class=\"icon-arrow_forward\">'],\n        responsive: {\n          600: {\n            margin: 0,\n            nav: true,\n            items: 2\n          },\n          1000: {\n            margin: 0,\n            stagePadding: 0,\n            nav: true,\n            items: 3\n          },\n          1200: {\n            margin: 0,\n            stagePadding: 0,\n            nav: true,\n            items: 4\n          }\n        }\n      });\n    }\n    if ($('.nonloop-block-14').length > 0) {\n      $('.nonloop-block-14').owlCarousel({\n        center: false,\n        items: 1,\n        loop: true,\n        stagePadding: 0,\n        margin: 0,\n        autoplay: true,\n        dots: false,\n        nav: false,\n        navText: ['<span class=\"icon-arrow_back\">', '<span class=\"icon-arrow_forward\">'],\n        responsive: {\n          600: {\n            margin: 20,\n            nav: true,\n            items: 2\n          },\n          1000: {\n            margin: 30,\n            stagePadding: 20,\n            nav: true,\n            items: 2\n          },\n          1200: {\n            margin: 30,\n            stagePadding: 20,\n            nav: true,\n            items: 3\n          }\n        }\n      });\n      $('.customNextBtn').click(function () {\n        $('.nonloop-block-14').trigger('next.owl.carousel');\n      });\n      $('.customPrevBtn').click(function () {\n        $('.nonloop-block-14').trigger('prev.owl.carousel');\n      });\n    }\n    $('.slide-one-item').owlCarousel({\n      center: false,\n      items: 1,\n      loop: true,\n      smartSpeed: 900,\n      autoplayTimeout: 7000,\n      stagePadding: 0,\n      margin: 0,\n      autoplay: true,\n      nav: true,\n      navText: ['<span class=\"icon-keyboard_arrow_left\">', '<span class=\"icon-keyboard_arrow_right\">']\n    });\n    $('.slide-one-item').on('translated.owl.carousel', function (event) {\n      console.log('translated');\n      $('.owl-item.active').find('.js-slide-text').addClass('active');\n    });\n    $('.slide-one-item').on('translate.owl.carousel', function (event) {\n      console.log('translate');\n      $('.owl-item.active').find('.js-slide-text').removeClass('active');\n    });\n    $('.owl-item.active').find('.js-slide-text').addClass('active');\n  };\n  siteCarousel();\n  var siteStellar = function siteStellar() {\n    $(window).stellar({\n      responsive: false,\n      parallaxBackgrounds: true,\n      parallaxElements: true,\n      horizontalScrolling: false,\n      hideDistantElements: false,\n      scrollProperty: 'scroll'\n    });\n  };\n  siteStellar();\n  var siteDatePicker = function siteDatePicker() {\n    if ($('.datepicker').length > 0) {\n      $('.datepicker').datepicker();\n    }\n  };\n  siteDatePicker();\n  var siteSticky = function siteSticky() {\n    $(\".js-sticky-header\").sticky({\n      topSpacing: 0\n    });\n  };\n  siteSticky();\n\n  // navigation\n  var OnePageNavigation = function OnePageNavigation() {\n    var navToggler = $('.site-menu-toggle');\n    $(\"body\").on(\"click\", \".main-menu li a[href^='#'], .smoothscroll[href^='#'], .site-mobile-menu .site-nav-wrap li a\", function (e) {\n      e.preventDefault();\n      var hash = this.hash;\n      $('html, body').animate({\n        'scrollTop': $(hash).offset().top\n      }, 600, 'easeInOutCirc', function () {\n        window.location.hash = hash;\n      });\n    });\n  };\n  OnePageNavigation();\n  var siteScroll = function siteScroll() {\n    $(window).scroll(function () {\n      var st = $(this).scrollTop();\n      if (st > 100) {\n        $('.js-sticky-header').addClass('shrink');\n      } else {\n        $('.js-sticky-header').removeClass('shrink');\n      }\n    });\n  };\n  siteScroll();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/main.js\n");

/***/ }),

/***/ "./resources/js/landing-page/owl.carousel.min.js":
/*!*******************************************************!*\
  !*** ./resources/js/landing-page/owl.carousel.min.js ***!
  \*******************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Owl Carousel v2.2.1\r\n * Copyright 2013-2017 David Deutsch\r\n * Licensed under  ()\r\n */\n!function (a, b, c, d) {\n  function e(b, c) {\n    this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = {\n      time: null,\n      target: null,\n      pointer: null,\n      stage: {\n        start: null,\n        current: null\n      },\n      direction: null\n    }, this._states = {\n      current: {},\n      tags: {\n        initializing: [\"busy\"],\n        animating: [\"busy\"],\n        dragging: [\"interacting\"]\n      }\n    }, a.each([\"onResize\", \"onThrottledResize\"], a.proxy(function (b, c) {\n      this._handlers[c] = a.proxy(this[c], this);\n    }, this)), a.each(e.Plugins, a.proxy(function (a, b) {\n      this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);\n    }, this)), a.each(e.Workers, a.proxy(function (b, c) {\n      this._pipe.push({\n        filter: c.filter,\n        run: a.proxy(c.run, this)\n      });\n    }, this)), this.setup(), this.initialize();\n  }\n  e.Defaults = {\n    items: 3,\n    loop: !1,\n    center: !1,\n    rewind: !1,\n    mouseDrag: !0,\n    touchDrag: !0,\n    pullDrag: !0,\n    freeDrag: !1,\n    margin: 0,\n    stagePadding: 0,\n    merge: !1,\n    mergeFit: !0,\n    autoWidth: !1,\n    startPosition: 0,\n    rtl: !1,\n    smartSpeed: 250,\n    fluidSpeed: !1,\n    dragEndSpeed: !1,\n    responsive: {},\n    responsiveRefreshRate: 200,\n    responsiveBaseElement: b,\n    fallbackEasing: \"swing\",\n    info: !1,\n    nestedItemSelector: !1,\n    itemElement: \"div\",\n    stageElement: \"div\",\n    refreshClass: \"owl-refresh\",\n    loadedClass: \"owl-loaded\",\n    loadingClass: \"owl-loading\",\n    rtlClass: \"owl-rtl\",\n    responsiveClass: \"owl-responsive\",\n    dragClass: \"owl-drag\",\n    itemClass: \"owl-item\",\n    stageClass: \"owl-stage\",\n    stageOuterClass: \"owl-stage-outer\",\n    grabClass: \"owl-grab\"\n  }, e.Width = {\n    Default: \"default\",\n    Inner: \"inner\",\n    Outer: \"outer\"\n  }, e.Type = {\n    Event: \"event\",\n    State: \"state\"\n  }, e.Plugins = {}, e.Workers = [{\n    filter: [\"width\", \"settings\"],\n    run: function run() {\n      this._width = this.$element.width();\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run(a) {\n      a.current = this._items && this._items[this.relative(this._current)];\n    }\n  }, {\n    filter: [\"items\", \"settings\"],\n    run: function run() {\n      this.$stage.children(\".cloned\").remove();\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run(a) {\n      var b = this.settings.margin || \"\",\n        c = !this.settings.autoWidth,\n        d = this.settings.rtl,\n        e = {\n          width: \"auto\",\n          \"margin-left\": d ? b : \"\",\n          \"margin-right\": d ? \"\" : b\n        };\n      !c && this.$stage.children().css(e), a.css = e;\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run(a) {\n      var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,\n        c = null,\n        d = this._items.length,\n        e = !this.settings.autoWidth,\n        f = [];\n      for (a.items = {\n        merge: !1,\n        width: b\n      }; d--;) c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();\n      this._widths = f;\n    }\n  }, {\n    filter: [\"items\", \"settings\"],\n    run: function run() {\n      var b = [],\n        c = this._items,\n        d = this.settings,\n        e = Math.max(2 * d.items, 4),\n        f = 2 * Math.ceil(c.length / 2),\n        g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,\n        h = \"\",\n        i = \"\";\n      for (g /= 2; g--;) b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i;\n      this._clones = b, a(h).addClass(\"cloned\").appendTo(this.$stage), a(i).addClass(\"cloned\").prependTo(this.$stage);\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run() {\n      for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);\n      this._coordinates = f;\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run() {\n      var a = this.settings.stagePadding,\n        b = this._coordinates,\n        c = {\n          width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a,\n          \"padding-left\": a || \"\",\n          \"padding-right\": a || \"\"\n        };\n      this.$stage.css(c);\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run(a) {\n      var b = this._coordinates.length,\n        c = !this.settings.autoWidth,\n        d = this.$stage.children();\n      if (c && a.items.merge) for (; b--;) a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);else c && (a.css.width = a.items.width, d.css(a.css));\n    }\n  }, {\n    filter: [\"items\"],\n    run: function run() {\n      this._coordinates.length < 1 && this.$stage.removeAttr(\"style\");\n    }\n  }, {\n    filter: [\"width\", \"items\", \"settings\"],\n    run: function run(a) {\n      a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);\n    }\n  }, {\n    filter: [\"position\"],\n    run: function run() {\n      this.animate(this.coordinates(this._current));\n    }\n  }, {\n    filter: [\"width\", \"position\", \"items\", \"settings\"],\n    run: function run() {\n      var a,\n        b,\n        c,\n        d,\n        e = this.settings.rtl ? 1 : -1,\n        f = 2 * this.settings.stagePadding,\n        g = this.coordinates(this.current()) + f,\n        h = g + this.width() * e,\n        i = [];\n      for (c = 0, d = this._coordinates.length; c < d; c++) a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, \"<=\", g) && this.op(a, \">\", h) || this.op(b, \"<\", g) && this.op(b, \">\", h)) && i.push(c);\n      this.$stage.children(\".active\").removeClass(\"active\"), this.$stage.children(\":eq(\" + i.join(\"), :eq(\") + \")\").addClass(\"active\"), this.settings.center && (this.$stage.children(\".center\").removeClass(\"center\"), this.$stage.children().eq(this.current()).addClass(\"center\"));\n    }\n  }], e.prototype.initialize = function () {\n    if (this.enter(\"initializing\"), this.trigger(\"initialize\"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is(\"pre-loading\")) {\n      var b, c, e;\n      b = this.$element.find(\"img\"), c = this.settings.nestedItemSelector ? \".\" + this.settings.nestedItemSelector : d, e = this.$element.children(c).width(), b.length && e <= 0 && this.preloadAutoWidthImages(b);\n    }\n    this.$element.addClass(this.options.loadingClass), this.$stage = a(\"<\" + this.settings.stageElement + ' class=\"' + this.settings.stageClass + '\"/>').wrap('<div class=\"' + this.settings.stageOuterClass + '\"/>'), this.$element.append(this.$stage.parent()), this.replace(this.$element.children().not(this.$stage.parent())), this.$element.is(\":visible\") ? this.refresh() : this.invalidate(\"width\"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass), this.registerEventHandlers(), this.leave(\"initializing\"), this.trigger(\"initialized\");\n  }, e.prototype.setup = function () {\n    var b = this.viewport(),\n      c = this.options.responsive,\n      d = -1,\n      e = null;\n    c ? (a.each(c, function (a) {\n      a <= b && a > d && (d = Number(a));\n    }), e = a.extend({}, this.options, c[d]), \"function\" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr(\"class\", this.$element.attr(\"class\").replace(new RegExp(\"(\" + this.options.responsiveClass + \"-)\\\\S+\\\\s\", \"g\"), \"$1\" + d))) : e = a.extend({}, this.options), this.trigger(\"change\", {\n      property: {\n        name: \"settings\",\n        value: e\n      }\n    }), this._breakpoint = d, this.settings = e, this.invalidate(\"settings\"), this.trigger(\"changed\", {\n      property: {\n        name: \"settings\",\n        value: this.settings\n      }\n    });\n  }, e.prototype.optionsLogic = function () {\n    this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);\n  }, e.prototype.prepare = function (b) {\n    var c = this.trigger(\"prepare\", {\n      content: b\n    });\n    return c.data || (c.data = a(\"<\" + this.settings.itemElement + \"/>\").addClass(this.options.itemClass).append(b)), this.trigger(\"prepared\", {\n      content: c.data\n    }), c.data;\n  }, e.prototype.update = function () {\n    for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {\n        return this[a];\n      }, this._invalidated), e = {}; b < c;) (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;\n    this._invalidated = {}, !this.is(\"valid\") && this.enter(\"valid\");\n  }, e.prototype.width = function (a) {\n    switch (a = a || e.Width.Default) {\n      case e.Width.Inner:\n      case e.Width.Outer:\n        return this._width;\n      default:\n        return this._width - 2 * this.settings.stagePadding + this.settings.margin;\n    }\n  }, e.prototype.refresh = function () {\n    this.enter(\"refreshing\"), this.trigger(\"refresh\"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave(\"refreshing\"), this.trigger(\"refreshed\");\n  }, e.prototype.onThrottledResize = function () {\n    b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n  }, e.prototype.onResize = function () {\n    return !!this._items.length && this._width !== this.$element.width() && !!this.$element.is(\":visible\") && (this.enter(\"resizing\"), this.trigger(\"resize\").isDefaultPrevented() ? (this.leave(\"resizing\"), !1) : (this.invalidate(\"width\"), this.refresh(), this.leave(\"resizing\"), void this.trigger(\"resized\")));\n  }, e.prototype.registerEventHandlers = function () {\n    a.support.transition && this.$stage.on(a.support.transition.end + \".owl.core\", a.proxy(this.onTransitionEnd, this)), this.settings.responsive !== !1 && this.on(b, \"resize\", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on(\"mousedown.owl.core\", a.proxy(this.onDragStart, this)), this.$stage.on(\"dragstart.owl.core selectstart.owl.core\", function () {\n      return !1;\n    })), this.settings.touchDrag && (this.$stage.on(\"touchstart.owl.core\", a.proxy(this.onDragStart, this)), this.$stage.on(\"touchcancel.owl.core\", a.proxy(this.onDragEnd, this)));\n  }, e.prototype.onDragStart = function (b) {\n    var d = null;\n    3 !== b.which && (a.support.transform ? (d = this.$stage.css(\"transform\").replace(/.*\\(|\\)| /g, \"\").split(\",\"), d = {\n      x: d[16 === d.length ? 12 : 4],\n      y: d[16 === d.length ? 13 : 5]\n    }) : (d = this.$stage.position(), d = {\n      x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left,\n      y: d.top\n    }), this.is(\"animating\") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate(\"position\")), this.$element.toggleClass(this.options.grabClass, \"mousedown\" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on(\"mouseup.owl.core touchend.owl.core\", a.proxy(this.onDragEnd, this)), a(c).one(\"mousemove.owl.core touchmove.owl.core\", a.proxy(function (b) {\n      var d = this.difference(this._drag.pointer, this.pointer(b));\n      a(c).on(\"mousemove.owl.core touchmove.owl.core\", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is(\"valid\") || (b.preventDefault(), this.enter(\"dragging\"), this.trigger(\"drag\"));\n    }, this)));\n  }, e.prototype.onDragMove = function (a) {\n    var b = null,\n      c = null,\n      d = null,\n      e = this.difference(this._drag.pointer, this.pointer(a)),\n      f = this.difference(this._drag.stage.start, e);\n    this.is(\"dragging\") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));\n  }, e.prototype.onDragEnd = function (b) {\n    var d = this.difference(this._drag.pointer, this.pointer(b)),\n      e = this._drag.stage.current,\n      f = d.x > 0 ^ this.settings.rtl ? \"left\" : \"right\";\n    a(c).off(\".owl.core\"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is(\"dragging\") || !this.is(\"valid\")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate(\"position\"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one(\"click.owl.core\", function () {\n      return !1;\n    })), this.is(\"dragging\") && (this.leave(\"dragging\"), this.trigger(\"dragged\"));\n  }, e.prototype.closest = function (b, c) {\n    var d = -1,\n      e = 30,\n      f = this.width(),\n      g = this.coordinates();\n    return this.settings.freeDrag || a.each(g, a.proxy(function (a, h) {\n      return \"left\" === c && b > h - e && b < h + e ? d = a : \"right\" === c && b > h - f - e && b < h - f + e ? d = a + 1 : this.op(b, \"<\", h) && this.op(b, \">\", g[a + 1] || h - f) && (d = \"left\" === c ? a + 1 : a), d === -1;\n    }, this)), this.settings.loop || (this.op(b, \">\", g[this.minimum()]) ? d = b = this.minimum() : this.op(b, \"<\", g[this.maximum()]) && (d = b = this.maximum())), d;\n  }, e.prototype.animate = function (b) {\n    var c = this.speed() > 0;\n    this.is(\"animating\") && this.onTransitionEnd(), c && (this.enter(\"animating\"), this.trigger(\"translate\")), a.support.transform3d && a.support.transition ? this.$stage.css({\n      transform: \"translate3d(\" + b + \"px,0px,0px)\",\n      transition: this.speed() / 1e3 + \"s\"\n    }) : c ? this.$stage.animate({\n      left: b + \"px\"\n    }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({\n      left: b + \"px\"\n    });\n  }, e.prototype.is = function (a) {\n    return this._states.current[a] && this._states.current[a] > 0;\n  }, e.prototype.current = function (a) {\n    if (a === d) return this._current;\n    if (0 === this._items.length) return d;\n    if (a = this.normalize(a), this._current !== a) {\n      var b = this.trigger(\"change\", {\n        property: {\n          name: \"position\",\n          value: a\n        }\n      });\n      b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate(\"position\"), this.trigger(\"changed\", {\n        property: {\n          name: \"position\",\n          value: this._current\n        }\n      });\n    }\n    return this._current;\n  }, e.prototype.invalidate = function (b) {\n    return \"string\" === a.type(b) && (this._invalidated[b] = !0, this.is(\"valid\") && this.leave(\"valid\")), a.map(this._invalidated, function (a, b) {\n      return b;\n    });\n  }, e.prototype.reset = function (a) {\n    a = this.normalize(a), a !== d && (this._speed = 0, this._current = a, this.suppress([\"translate\", \"translated\"]), this.animate(this.coordinates(a)), this.release([\"translate\", \"translated\"]));\n  }, e.prototype.normalize = function (a, b) {\n    var c = this._items.length,\n      e = b ? 0 : this._clones.length;\n    return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;\n  }, e.prototype.relative = function (a) {\n    return a -= this._clones.length / 2, this.normalize(a, !0);\n  }, e.prototype.maximum = function (a) {\n    var b,\n      c,\n      d,\n      e = this.settings,\n      f = this._coordinates.length;\n    if (e.loop) f = this._clones.length / 2 + this._items.length - 1;else if (e.autoWidth || e.merge) {\n      for (b = this._items.length, c = this._items[--b].width(), d = this.$element.width(); b-- && (c += this._items[b].width() + this.settings.margin, !(c > d)););\n      f = b + 1;\n    } else f = e.center ? this._items.length - 1 : this._items.length - e.items;\n    return a && (f -= this._clones.length / 2), Math.max(f, 0);\n  }, e.prototype.minimum = function (a) {\n    return a ? 0 : this._clones.length / 2;\n  }, e.prototype.items = function (a) {\n    return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);\n  }, e.prototype.mergers = function (a) {\n    return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);\n  }, e.prototype.clones = function (b) {\n    var c = this._clones.length / 2,\n      e = c + this._items.length,\n      f = function f(a) {\n        return a % 2 === 0 ? e + a / 2 : c - (a + 1) / 2;\n      };\n    return b === d ? a.map(this._clones, function (a, b) {\n      return f(b);\n    }) : a.map(this._clones, function (a, c) {\n      return a === b ? f(c) : null;\n    });\n  }, e.prototype.speed = function (a) {\n    return a !== d && (this._speed = a), this._speed;\n  }, e.prototype.coordinates = function (b) {\n    var c,\n      e = 1,\n      f = b - 1;\n    return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {\n      return this.coordinates(b);\n    }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));\n  }, e.prototype.duration = function (a, b, c) {\n    return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);\n  }, e.prototype.to = function (a, b) {\n    var c = this.current(),\n      d = null,\n      e = a - this.relative(c),\n      f = (e > 0) - (e < 0),\n      g = this._items.length,\n      h = this.minimum(),\n      i = this.maximum();\n    this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += f * -1 * g), a = c + e, d = ((a - h) % g + g) % g + h, d !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.$element.is(\":visible\") && this.update();\n  }, e.prototype.next = function (a) {\n    a = a || !1, this.to(this.relative(this.current()) + 1, a);\n  }, e.prototype.prev = function (a) {\n    a = a || !1, this.to(this.relative(this.current()) - 1, a);\n  }, e.prototype.onTransitionEnd = function (a) {\n    if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;\n    this.leave(\"animating\"), this.trigger(\"translated\");\n  }, e.prototype.viewport = function () {\n    var d;\n    return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn(\"Can not detect viewport width.\"), d;\n  }, e.prototype.replace = function (b) {\n    this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find(\".\" + this.settings.nestedItemSelector)), b.filter(function () {\n      return 1 === this.nodeType;\n    }).each(a.proxy(function (a, b) {\n      b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find(\"[data-merge]\").addBack(\"[data-merge]\").attr(\"data-merge\") || 1);\n    }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate(\"items\");\n  }, e.prototype.add = function (b, c) {\n    var e = this.relative(this._current);\n    c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger(\"add\", {\n      content: b,\n      position: c\n    }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find(\"[data-merge]\").addBack(\"[data-merge]\").attr(\"data-merge\") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find(\"[data-merge]\").addBack(\"[data-merge]\").attr(\"data-merge\") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate(\"items\"), this.trigger(\"added\", {\n      content: b,\n      position: c\n    });\n  }, e.prototype.remove = function (a) {\n    a = this.normalize(a, !0), a !== d && (this.trigger(\"remove\", {\n      content: this._items[a],\n      position: a\n    }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate(\"items\"), this.trigger(\"removed\", {\n      content: null,\n      position: a\n    }));\n  }, e.prototype.preloadAutoWidthImages = function (b) {\n    b.each(a.proxy(function (b, c) {\n      this.enter(\"pre-loading\"), c = a(c), a(new Image()).one(\"load\", a.proxy(function (a) {\n        c.attr(\"src\", a.target.src), c.css(\"opacity\", 1), this.leave(\"pre-loading\"), !this.is(\"pre-loading\") && !this.is(\"initializing\") && this.refresh();\n      }, this)).attr(\"src\", c.attr(\"src\") || c.attr(\"data-src\") || c.attr(\"data-src-retina\"));\n    }, this));\n  }, e.prototype.destroy = function () {\n    this.$element.off(\".owl.core\"), this.$stage.off(\".owl.core\"), a(c).off(\".owl.core\"), this.settings.responsive !== !1 && (b.clearTimeout(this.resizeTimer), this.off(b, \"resize\", this._handlers.onThrottledResize));\n    for (var d in this._plugins) this._plugins[d].destroy();\n    this.$stage.children(\".cloned\").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr(\"class\", this.$element.attr(\"class\").replace(new RegExp(this.options.responsiveClass + \"-\\\\S+\\\\s\", \"g\"), \"\")).removeData(\"owl.carousel\");\n  }, e.prototype.op = function (a, b, c) {\n    var d = this.settings.rtl;\n    switch (b) {\n      case \"<\":\n        return d ? a > c : a < c;\n      case \">\":\n        return d ? a < c : a > c;\n      case \">=\":\n        return d ? a <= c : a >= c;\n      case \"<=\":\n        return d ? a >= c : a <= c;\n    }\n  }, e.prototype.on = function (a, b, c, d) {\n    a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent(\"on\" + b, c);\n  }, e.prototype.off = function (a, b, c, d) {\n    a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent(\"on\" + b, c);\n  }, e.prototype.trigger = function (b, c, d, f, g) {\n    var h = {\n        item: {\n          count: this._items.length,\n          index: this.current()\n        }\n      },\n      i = a.camelCase(a.grep([\"on\", b, d], function (a) {\n        return a;\n      }).join(\"-\").toLowerCase()),\n      j = a.Event([b, \"owl\", d || \"carousel\"].join(\".\").toLowerCase(), a.extend({\n        relatedTarget: this\n      }, h, c));\n    return this._supress[b] || (a.each(this._plugins, function (a, b) {\n      b.onTrigger && b.onTrigger(j);\n    }), this.register({\n      type: e.Type.Event,\n      name: b\n    }), this.$element.trigger(j), this.settings && \"function\" == typeof this.settings[i] && this.settings[i].call(this, j)), j;\n  }, e.prototype.enter = function (b) {\n    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {\n      this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;\n    }, this));\n  }, e.prototype.leave = function (b) {\n    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {\n      this._states.current[b]--;\n    }, this));\n  }, e.prototype.register = function (b) {\n    if (b.type === e.Type.Event) {\n      if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {\n        var c = a.event.special[b.name]._default;\n        a.event.special[b.name]._default = function (a) {\n          return !c || !c.apply || a.namespace && a.namespace.indexOf(\"owl\") !== -1 ? a.namespace && a.namespace.indexOf(\"owl\") > -1 : c.apply(this, arguments);\n        }, a.event.special[b.name].owl = !0;\n      }\n    } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {\n      return a.inArray(c, this._states.tags[b.name]) === d;\n    }, this)));\n  }, e.prototype.suppress = function (b) {\n    a.each(b, a.proxy(function (a, b) {\n      this._supress[b] = !0;\n    }, this));\n  }, e.prototype.release = function (b) {\n    a.each(b, a.proxy(function (a, b) {\n      delete this._supress[b];\n    }, this));\n  }, e.prototype.pointer = function (a) {\n    var c = {\n      x: null,\n      y: null\n    };\n    return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;\n  }, e.prototype.isNumeric = function (a) {\n    return !isNaN(parseFloat(a));\n  }, e.prototype.difference = function (a, b) {\n    return {\n      x: a.x - b.x,\n      y: a.y - b.y\n    };\n  }, a.fn.owlCarousel = function (b) {\n    var c = Array.prototype.slice.call(arguments, 1);\n    return this.each(function () {\n      var d = a(this),\n        f = d.data(\"owl.carousel\");\n      f || (f = new e(this, \"object\" == _typeof(b) && b), d.data(\"owl.carousel\", f), a.each([\"next\", \"prev\", \"to\", \"destroy\", \"refresh\", \"replace\", \"add\", \"remove\"], function (b, c) {\n        f.register({\n          type: e.Type.Event,\n          name: c\n        }), f.$element.on(c + \".owl.carousel.core\", a.proxy(function (a) {\n          a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));\n        }, f));\n      })), \"string\" == typeof b && \"_\" !== b.charAt(0) && f[b].apply(f, c);\n    });\n  }, a.fn.owlCarousel.Constructor = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  var e = function e(b) {\n    this._core = b, this._interval = null, this._visible = null, this._handlers = {\n      \"initialized.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.autoRefresh && this.watch();\n      }, this)\n    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);\n  };\n  e.Defaults = {\n    autoRefresh: !0,\n    autoRefreshInterval: 500\n  }, e.prototype.watch = function () {\n    this._interval || (this._visible = this._core.$element.is(\":visible\"), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));\n  }, e.prototype.refresh = function () {\n    this._core.$element.is(\":visible\") !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass(\"owl-hidden\", !this._visible), this._visible && this._core.invalidate(\"width\") && this._core.refresh());\n  }, e.prototype.destroy = function () {\n    var a, c;\n    b.clearInterval(this._interval);\n    for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);\n    for (c in Object.getOwnPropertyNames(this)) \"function\" != typeof this[c] && (this[c] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  var e = function e(b) {\n    this._core = b, this._loaded = [], this._handlers = {\n      \"initialized.owl.carousel change.owl.carousel resized.owl.carousel\": a.proxy(function (b) {\n        if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && \"position\" == b.property.name || \"initialized\" == b.type)) for (var c = this._core.settings, e = c.center && Math.ceil(c.items / 2) || c.items, f = c.center && e * -1 || 0, g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f, h = this._core.clones().length, i = a.proxy(function (a, b) {\n            this.load(b);\n          }, this); f++ < e;) this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;\n      }, this)\n    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);\n  };\n  e.Defaults = {\n    lazyLoad: !1\n  }, e.prototype.load = function (c) {\n    var d = this._core.$stage.children().eq(c),\n      e = d && d.find(\".owl-lazy\");\n    !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {\n      var e,\n        f = a(d),\n        g = b.devicePixelRatio > 1 && f.attr(\"data-src-retina\") || f.attr(\"data-src\");\n      this._core.trigger(\"load\", {\n        element: f,\n        url: g\n      }, \"lazy\"), f.is(\"img\") ? f.one(\"load.owl.lazy\", a.proxy(function () {\n        f.css(\"opacity\", 1), this._core.trigger(\"loaded\", {\n          element: f,\n          url: g\n        }, \"lazy\");\n      }, this)).attr(\"src\", g) : (e = new Image(), e.onload = a.proxy(function () {\n        f.css({\n          \"background-image\": 'url(\"' + g + '\")',\n          opacity: \"1\"\n        }), this._core.trigger(\"loaded\", {\n          element: f,\n          url: g\n        }, \"lazy\");\n      }, this), e.src = g);\n    }, this)), this._loaded.push(d.get(0)));\n  }, e.prototype.destroy = function () {\n    var a, b;\n    for (a in this.handlers) this._core.$element.off(a, this.handlers[a]);\n    for (b in Object.getOwnPropertyNames(this)) \"function\" != typeof this[b] && (this[b] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  var e = function e(b) {\n    this._core = b, this._handlers = {\n      \"initialized.owl.carousel refreshed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.autoHeight && this.update();\n      }, this),\n      \"changed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.autoHeight && \"position\" == a.property.name && this.update();\n      }, this),\n      \"loaded.owl.lazy\": a.proxy(function (a) {\n        a.namespace && this._core.settings.autoHeight && a.element.closest(\".\" + this._core.settings.itemClass).index() === this._core.current() && this.update();\n      }, this)\n    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);\n  };\n  e.Defaults = {\n    autoHeight: !1,\n    autoHeightClass: \"owl-height\"\n  }, e.prototype.update = function () {\n    var b = this._core._current,\n      c = b + this._core.settings.items,\n      d = this._core.$stage.children().toArray().slice(b, c),\n      e = [],\n      f = 0;\n    a.each(d, function (b, c) {\n      e.push(a(c).height());\n    }), f = Math.max.apply(null, e), this._core.$stage.parent().height(f).addClass(this._core.settings.autoHeightClass);\n  }, e.prototype.destroy = function () {\n    var a, b;\n    for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);\n    for (b in Object.getOwnPropertyNames(this)) \"function\" != typeof this[b] && (this[b] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  var e = function e(b) {\n    this._core = b, this._videos = {}, this._playing = null, this._handlers = {\n      \"initialized.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.register({\n          type: \"state\",\n          name: \"playing\",\n          tags: [\"interacting\"]\n        });\n      }, this),\n      \"resize.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();\n      }, this),\n      \"refreshed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.is(\"resizing\") && this._core.$stage.find(\".cloned .owl-video-frame\").remove();\n      }, this),\n      \"changed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && \"position\" === a.property.name && this._playing && this.stop();\n      }, this),\n      \"prepared.owl.carousel\": a.proxy(function (b) {\n        if (b.namespace) {\n          var c = a(b.content).find(\".owl-video\");\n          c.length && (c.css(\"display\", \"none\"), this.fetch(c, a(b.content)));\n        }\n      }, this)\n    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on(\"click.owl.video\", \".owl-video-play-icon\", a.proxy(function (a) {\n      this.play(a);\n    }, this));\n  };\n  e.Defaults = {\n    video: !1,\n    videoHeight: !1,\n    videoWidth: !1\n  }, e.prototype.fetch = function (a, b) {\n    var c = function () {\n        return a.attr(\"data-vimeo-id\") ? \"vimeo\" : a.attr(\"data-vzaar-id\") ? \"vzaar\" : \"youtube\";\n      }(),\n      d = a.attr(\"data-vimeo-id\") || a.attr(\"data-youtube-id\") || a.attr(\"data-vzaar-id\"),\n      e = a.attr(\"data-width\") || this._core.settings.videoWidth,\n      f = a.attr(\"data-height\") || this._core.settings.videoHeight,\n      g = a.attr(\"href\");\n    if (!g) throw new Error(\"Missing video URL.\");\n    if (d = g.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/), d[3].indexOf(\"youtu\") > -1) c = \"youtube\";else if (d[3].indexOf(\"vimeo\") > -1) c = \"vimeo\";else {\n      if (!(d[3].indexOf(\"vzaar\") > -1)) throw new Error(\"Video URL not supported.\");\n      c = \"vzaar\";\n    }\n    d = d[6], this._videos[g] = {\n      type: c,\n      id: d,\n      width: e,\n      height: f\n    }, b.attr(\"data-video\", g), this.thumbnail(a, this._videos[g]);\n  }, e.prototype.thumbnail = function (b, c) {\n    var d,\n      e,\n      f,\n      g = c.width && c.height ? 'style=\"width:' + c.width + \"px;height:\" + c.height + 'px;\"' : \"\",\n      h = b.find(\"img\"),\n      i = \"src\",\n      j = \"\",\n      k = this._core.settings,\n      l = function l(a) {\n        e = '<div class=\"owl-video-play-icon\"></div>', d = k.lazyLoad ? '<div class=\"owl-video-tn ' + j + '\" ' + i + '=\"' + a + '\"></div>' : '<div class=\"owl-video-tn\" style=\"opacity:1;background-image:url(' + a + ')\"></div>', b.after(d), b.after(e);\n      };\n    if (b.wrap('<div class=\"owl-video-wrapper\"' + g + \"></div>\"), this._core.settings.lazyLoad && (i = \"data-src\", j = \"owl-lazy\"), h.length) return l(h.attr(i)), h.remove(), !1;\n    \"youtube\" === c.type ? (f = \"//img.youtube.com/vi/\" + c.id + \"/hqdefault.jpg\", l(f)) : \"vimeo\" === c.type ? a.ajax({\n      type: \"GET\",\n      url: \"//vimeo.com/api/v2/video/\" + c.id + \".json\",\n      jsonp: \"callback\",\n      dataType: \"jsonp\",\n      success: function success(a) {\n        f = a[0].thumbnail_large, l(f);\n      }\n    }) : \"vzaar\" === c.type && a.ajax({\n      type: \"GET\",\n      url: \"//vzaar.com/api/videos/\" + c.id + \".json\",\n      jsonp: \"callback\",\n      dataType: \"jsonp\",\n      success: function success(a) {\n        f = a.framegrab_url, l(f);\n      }\n    });\n  }, e.prototype.stop = function () {\n    this._core.trigger(\"stop\", null, \"video\"), this._playing.find(\".owl-video-frame\").remove(), this._playing.removeClass(\"owl-video-playing\"), this._playing = null, this._core.leave(\"playing\"), this._core.trigger(\"stopped\", null, \"video\");\n  }, e.prototype.play = function (b) {\n    var c,\n      d = a(b.target),\n      e = d.closest(\".\" + this._core.settings.itemClass),\n      f = this._videos[e.attr(\"data-video\")],\n      g = f.width || \"100%\",\n      h = f.height || this._core.$stage.height();\n    this._playing || (this._core.enter(\"playing\"), this._core.trigger(\"play\", null, \"video\"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), \"youtube\" === f.type ? c = '<iframe width=\"' + g + '\" height=\"' + h + '\" src=\"//www.youtube.com/embed/' + f.id + \"?autoplay=1&rel=0&v=\" + f.id + '\" frameborder=\"0\" allowfullscreen></iframe>' : \"vimeo\" === f.type ? c = '<iframe src=\"//player.vimeo.com/video/' + f.id + '?autoplay=1\" width=\"' + g + '\" height=\"' + h + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>' : \"vzaar\" === f.type && (c = '<iframe frameborder=\"0\"height=\"' + h + '\"width=\"' + g + '\" allowfullscreen mozallowfullscreen webkitAllowFullScreen src=\"//view.vzaar.com/' + f.id + '/player?autoplay=true\"></iframe>'), a('<div class=\"owl-video-frame\">' + c + \"</div>\").insertAfter(e.find(\".owl-video\")), this._playing = e.addClass(\"owl-video-playing\"));\n  }, e.prototype.isInFullScreen = function () {\n    var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;\n    return b && a(b).parent().hasClass(\"owl-video-frame\");\n  }, e.prototype.destroy = function () {\n    var a, b;\n    this._core.$element.off(\"click.owl.video\");\n    for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);\n    for (b in Object.getOwnPropertyNames(this)) \"function\" != typeof this[b] && (this[b] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.Video = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  var e = function e(b) {\n    this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = {\n      \"change.owl.carousel\": a.proxy(function (a) {\n        a.namespace && \"position\" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);\n      }, this),\n      \"drag.owl.carousel dragged.owl.carousel translated.owl.carousel\": a.proxy(function (a) {\n        a.namespace && (this.swapping = \"translated\" == a.type);\n      }, this),\n      \"translate.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();\n      }, this)\n    }, this.core.$element.on(this.handlers);\n  };\n  e.Defaults = {\n    animateOut: !1,\n    animateIn: !1\n  }, e.prototype.swap = function () {\n    if (1 === this.core.settings.items && a.support.animation && a.support.transition) {\n      this.core.speed(0);\n      var b,\n        c = a.proxy(this.clear, this),\n        d = this.core.$stage.children().eq(this.previous),\n        e = this.core.$stage.children().eq(this.next),\n        f = this.core.settings.animateIn,\n        g = this.core.settings.animateOut;\n      this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({\n        left: b + \"px\"\n      }).addClass(\"animated owl-animated-out\").addClass(g)), f && e.one(a.support.animation.end, c).addClass(\"animated owl-animated-in\").addClass(f));\n    }\n  }, e.prototype.clear = function (b) {\n    a(b.target).css({\n      left: \"\"\n    }).removeClass(\"animated owl-animated-out owl-animated-in\").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();\n  }, e.prototype.destroy = function () {\n    var a, b;\n    for (a in this.handlers) this.core.$element.off(a, this.handlers[a]);\n    for (b in Object.getOwnPropertyNames(this)) \"function\" != typeof this[b] && (this[b] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  var e = function e(b) {\n    this._core = b, this._timeout = null, this._paused = !1, this._handlers = {\n      \"changed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && \"settings\" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && \"position\" === a.property.name && this._core.settings.autoplay && this._setAutoPlayInterval();\n      }, this),\n      \"initialized.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.autoplay && this.play();\n      }, this),\n      \"play.owl.autoplay\": a.proxy(function (a, b, c) {\n        a.namespace && this.play(b, c);\n      }, this),\n      \"stop.owl.autoplay\": a.proxy(function (a) {\n        a.namespace && this.stop();\n      }, this),\n      \"mouseover.owl.autoplay\": a.proxy(function () {\n        this._core.settings.autoplayHoverPause && this._core.is(\"rotating\") && this.pause();\n      }, this),\n      \"mouseleave.owl.autoplay\": a.proxy(function () {\n        this._core.settings.autoplayHoverPause && this._core.is(\"rotating\") && this.play();\n      }, this),\n      \"touchstart.owl.core\": a.proxy(function () {\n        this._core.settings.autoplayHoverPause && this._core.is(\"rotating\") && this.pause();\n      }, this),\n      \"touchend.owl.core\": a.proxy(function () {\n        this._core.settings.autoplayHoverPause && this.play();\n      }, this)\n    }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);\n  };\n  e.Defaults = {\n    autoplay: !1,\n    autoplayTimeout: 5e3,\n    autoplayHoverPause: !1,\n    autoplaySpeed: !1\n  }, e.prototype.play = function (a, b) {\n    this._paused = !1, this._core.is(\"rotating\") || (this._core.enter(\"rotating\"), this._setAutoPlayInterval());\n  }, e.prototype._getNextTimeout = function (d, e) {\n    return this._timeout && b.clearTimeout(this._timeout), b.setTimeout(a.proxy(function () {\n      this._paused || this._core.is(\"busy\") || this._core.is(\"interacting\") || c.hidden || this._core.next(e || this._core.settings.autoplaySpeed);\n    }, this), d || this._core.settings.autoplayTimeout);\n  }, e.prototype._setAutoPlayInterval = function () {\n    this._timeout = this._getNextTimeout();\n  }, e.prototype.stop = function () {\n    this._core.is(\"rotating\") && (b.clearTimeout(this._timeout), this._core.leave(\"rotating\"));\n  }, e.prototype.pause = function () {\n    this._core.is(\"rotating\") && (this._paused = !0);\n  }, e.prototype.destroy = function () {\n    var a, b;\n    this.stop();\n    for (a in this._handlers) this._core.$element.off(a, this._handlers[a]);\n    for (b in Object.getOwnPropertyNames(this)) \"function\" != typeof this[b] && (this[b] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  \"use strict\";\n\n  var e = function e(b) {\n    this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = {\n      next: this._core.next,\n      prev: this._core.prev,\n      to: this._core.to\n    }, this._handlers = {\n      \"prepared.owl.carousel\": a.proxy(function (b) {\n        b.namespace && this._core.settings.dotsData && this._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' + a(b.content).find(\"[data-dot]\").addBack(\"[data-dot]\").attr(\"data-dot\") + \"</div>\");\n      }, this),\n      \"added.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());\n      }, this),\n      \"remove.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);\n      }, this),\n      \"changed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && \"position\" == a.property.name && this.draw();\n      }, this),\n      \"initialized.owl.carousel\": a.proxy(function (a) {\n        a.namespace && !this._initialized && (this._core.trigger(\"initialize\", null, \"navigation\"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger(\"initialized\", null, \"navigation\"));\n      }, this),\n      \"refreshed.owl.carousel\": a.proxy(function (a) {\n        a.namespace && this._initialized && (this._core.trigger(\"refresh\", null, \"navigation\"), this.update(), this.draw(), this._core.trigger(\"refreshed\", null, \"navigation\"));\n      }, this)\n    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);\n  };\n  e.Defaults = {\n    nav: !1,\n    navText: [\"prev\", \"next\"],\n    navSpeed: !1,\n    navElement: \"div\",\n    navContainer: !1,\n    navContainerClass: \"owl-nav\",\n    navClass: [\"owl-prev\", \"owl-next\"],\n    slideBy: 1,\n    dotClass: \"owl-dot\",\n    dotsClass: \"owl-dots\",\n    dots: !0,\n    dotsEach: !1,\n    dotsData: !1,\n    dotsSpeed: !1,\n    dotsContainer: !1\n  }, e.prototype.initialize = function () {\n    var b,\n      c = this._core.settings;\n    this._controls.$relative = (c.navContainer ? a(c.navContainer) : a(\"<div>\").addClass(c.navContainerClass).appendTo(this.$element)).addClass(\"disabled\"), this._controls.$previous = a(\"<\" + c.navElement + \">\").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on(\"click\", a.proxy(function (a) {\n      this.prev(c.navSpeed);\n    }, this)), this._controls.$next = a(\"<\" + c.navElement + \">\").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on(\"click\", a.proxy(function (a) {\n      this.next(c.navSpeed);\n    }, this)), c.dotsData || (this._templates = [a(\"<div>\").addClass(c.dotClass).append(a(\"<span>\")).prop(\"outerHTML\")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a(\"<div>\").addClass(c.dotsClass).appendTo(this.$element)).addClass(\"disabled\"), this._controls.$absolute.on(\"click\", \"div\", a.proxy(function (b) {\n      var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();\n      b.preventDefault(), this.to(d, c.dotsSpeed);\n    }, this));\n    for (b in this._overrides) this._core[b] = a.proxy(this[b], this);\n  }, e.prototype.destroy = function () {\n    var a, b, c, d;\n    for (a in this._handlers) this.$element.off(a, this._handlers[a]);\n    for (b in this._controls) this._controls[b].remove();\n    for (d in this.overides) this._core[d] = this._overrides[d];\n    for (c in Object.getOwnPropertyNames(this)) \"function\" != typeof this[c] && (this[c] = null);\n  }, e.prototype.update = function () {\n    var a,\n      b,\n      c,\n      d = this._core.clones().length / 2,\n      e = d + this._core.items().length,\n      f = this._core.maximum(!0),\n      g = this._core.settings,\n      h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;\n    if (\"page\" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || \"page\" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {\n      if (b >= h || 0 === b) {\n        if (this._pages.push({\n          start: Math.min(f, a - d),\n          end: a - d + h - 1\n        }), Math.min(f, a - d) === f) break;\n        b = 0, ++c;\n      }\n      b += this._core.mergers(this._core.relative(a));\n    }\n  }, e.prototype.draw = function () {\n    var b,\n      c = this._core.settings,\n      d = this._core.items().length <= c.items,\n      e = this._core.relative(this._core.current()),\n      f = c.loop || c.rewind;\n    this._controls.$relative.toggleClass(\"disabled\", !c.nav || d), c.nav && (this._controls.$previous.toggleClass(\"disabled\", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass(\"disabled\", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass(\"disabled\", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join(\"\")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(\".active\").removeClass(\"active\"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass(\"active\"));\n  }, e.prototype.onTrigger = function (b) {\n    var c = this._core.settings;\n    b.page = {\n      index: a.inArray(this.current(), this._pages),\n      count: this._pages.length,\n      size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items)\n    };\n  }, e.prototype.current = function () {\n    var b = this._core.relative(this._core.current());\n    return a.grep(this._pages, a.proxy(function (a, c) {\n      return a.start <= b && a.end >= b;\n    }, this)).pop();\n  }, e.prototype.getPosition = function (b) {\n    var c,\n      d,\n      e = this._core.settings;\n    return \"page\" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;\n  }, e.prototype.next = function (b) {\n    a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);\n  }, e.prototype.prev = function (b) {\n    a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);\n  }, e.prototype.to = function (b, c, d) {\n    var e;\n    !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);\n  }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  \"use strict\";\n\n  var e = function e(c) {\n    this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = {\n      \"initialized.owl.carousel\": a.proxy(function (c) {\n        c.namespace && \"URLHash\" === this._core.settings.startPosition && a(b).trigger(\"hashchange.owl.navigation\");\n      }, this),\n      \"prepared.owl.carousel\": a.proxy(function (b) {\n        if (b.namespace) {\n          var c = a(b.content).find(\"[data-hash]\").addBack(\"[data-hash]\").attr(\"data-hash\");\n          if (!c) return;\n          this._hashes[c] = b.content;\n        }\n      }, this),\n      \"changed.owl.carousel\": a.proxy(function (c) {\n        if (c.namespace && \"position\" === c.property.name) {\n          var d = this._core.items(this._core.relative(this._core.current())),\n            e = a.map(this._hashes, function (a, b) {\n              return a === d ? b : null;\n            }).join();\n          if (!e || b.location.hash.slice(1) === e) return;\n          b.location.hash = e;\n        }\n      }, this)\n    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on(\"hashchange.owl.navigation\", a.proxy(function (a) {\n      var c = b.location.hash.substring(1),\n        e = this._core.$stage.children(),\n        f = this._hashes[c] && e.index(this._hashes[c]);\n      f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);\n    }, this));\n  };\n  e.Defaults = {\n    URLhashListener: !1\n  }, e.prototype.destroy = function () {\n    var c, d;\n    a(b).off(\"hashchange.owl.navigation\");\n    for (c in this._handlers) this._core.$element.off(c, this._handlers[c]);\n    for (d in Object.getOwnPropertyNames(this)) \"function\" != typeof this[d] && (this[d] = null);\n  }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;\n}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {\n  function e(b, c) {\n    var e = !1,\n      f = b.charAt(0).toUpperCase() + b.slice(1);\n    return a.each((b + \" \" + h.join(f + \" \") + f).split(\" \"), function (a, b) {\n      if (g[b] !== d) return e = !c || b, !1;\n    }), e;\n  }\n  function f(a) {\n    return e(a, !0);\n  }\n  var g = a(\"<support>\").get(0).style,\n    h = \"Webkit Moz O ms\".split(\" \"),\n    i = {\n      transition: {\n        end: {\n          WebkitTransition: \"webkitTransitionEnd\",\n          MozTransition: \"transitionend\",\n          OTransition: \"oTransitionEnd\",\n          transition: \"transitionend\"\n        }\n      },\n      animation: {\n        end: {\n          WebkitAnimation: \"webkitAnimationEnd\",\n          MozAnimation: \"animationend\",\n          OAnimation: \"oAnimationEnd\",\n          animation: \"animationend\"\n        }\n      }\n    },\n    j = {\n      csstransforms: function csstransforms() {\n        return !!e(\"transform\");\n      },\n      csstransforms3d: function csstransforms3d() {\n        return !!e(\"perspective\");\n      },\n      csstransitions: function csstransitions() {\n        return !!e(\"transition\");\n      },\n      cssanimations: function cssanimations() {\n        return !!e(\"animation\");\n      }\n    };\n  j.csstransitions() && (a.support.transition = new String(f(\"transition\")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f(\"animation\")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f(\"transform\")), a.support.transform3d = j.csstransforms3d());\n}(window.Zepto || window.jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/owl.carousel.min.js\n");

/***/ }),

/***/ "./resources/js/landing-page/popper.min.js":
/*!*************************************************!*\
  !*** ./resources/js/landing-page/popper.min.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*\r\n Copyright (C) Federico Zivolo 2018\r\n Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\r\n */\n(function (e, t) {\n  'object' == ( false ? 0 : _typeof(exports)) && 'undefined' != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  function e(e) {\n    return e && '[object Function]' === {}.toString.call(e);\n  }\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var o = getComputedStyle(e, null);\n    return t ? o[t] : o;\n  }\n  function o(e) {\n    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;\n  }\n  function n(e) {\n    if (!e) return document.body;\n    switch (e.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return e.ownerDocument.body;\n      case '#document':\n        return e.body;\n    }\n    var i = t(e),\n      r = i.overflow,\n      p = i.overflowX,\n      s = i.overflowY;\n    return /(auto|scroll|overlay)/.test(r + s + p) ? e : n(o(e));\n  }\n  function r(e) {\n    return 11 === e ? re : 10 === e ? pe : re || pe;\n  }\n  function p(e) {\n    if (!e) return document.documentElement;\n    for (var o = r(10) ? document.body : null, n = e.offsetParent; n === o && e.nextElementSibling;) n = (e = e.nextElementSibling).offsetParent;\n    var i = n && n.nodeName;\n    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(n.nodeName) && 'static' === t(n, 'position') ? p(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;\n  }\n  function s(e) {\n    var t = e.nodeName;\n    return 'BODY' !== t && ('HTML' === t || p(e.firstElementChild) === e);\n  }\n  function d(e) {\n    return null === e.parentNode ? e : d(e.parentNode);\n  }\n  function a(e, t) {\n    if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;\n    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n      n = o ? e : t,\n      i = o ? t : e,\n      r = document.createRange();\n    r.setStart(n, 0), r.setEnd(i, 0);\n    var l = r.commonAncestorContainer;\n    if (e !== l && t !== l || n.contains(i)) return s(l) ? l : p(l);\n    var f = d(e);\n    return f.host ? a(f.host, t) : a(e, d(t).host);\n  }\n  function l(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',\n      o = 'top' === t ? 'scrollTop' : 'scrollLeft',\n      n = e.nodeName;\n    if ('BODY' === n || 'HTML' === n) {\n      var i = e.ownerDocument.documentElement,\n        r = e.ownerDocument.scrollingElement || i;\n      return r[o];\n    }\n    return e[o];\n  }\n  function f(e, t) {\n    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n      n = l(t, 'top'),\n      i = l(t, 'left'),\n      r = o ? -1 : 1;\n    return e.top += n * r, e.bottom += n * r, e.left += i * r, e.right += i * r, e;\n  }\n  function m(e, t) {\n    var o = 'x' === t ? 'Left' : 'Top',\n      n = 'Left' == o ? 'Right' : 'Bottom';\n    return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + n + 'Width'], 10);\n  }\n  function h(e, t, o, n) {\n    return $(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], r(10) ? o['offset' + e] + n['margin' + ('Height' === e ? 'Top' : 'Left')] + n['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);\n  }\n  function c() {\n    var e = document.body,\n      t = document.documentElement,\n      o = r(10) && getComputedStyle(t);\n    return {\n      height: h('Height', e, t, o),\n      width: h('Width', e, t, o)\n    };\n  }\n  function g(e) {\n    return le({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n  function u(e) {\n    var o = {};\n    try {\n      if (r(10)) {\n        o = e.getBoundingClientRect();\n        var n = l(e, 'top'),\n          i = l(e, 'left');\n        o.top += n, o.left += i, o.bottom += n, o.right += i;\n      } else o = e.getBoundingClientRect();\n    } catch (t) {}\n    var p = {\n        left: o.left,\n        top: o.top,\n        width: o.right - o.left,\n        height: o.bottom - o.top\n      },\n      s = 'HTML' === e.nodeName ? c() : {},\n      d = s.width || e.clientWidth || p.right - p.left,\n      a = s.height || e.clientHeight || p.bottom - p.top,\n      f = e.offsetWidth - d,\n      h = e.offsetHeight - a;\n    if (f || h) {\n      var u = t(e);\n      f -= m(u, 'x'), h -= m(u, 'y'), p.width -= f, p.height -= h;\n    }\n    return g(p);\n  }\n  function b(e, o) {\n    var i = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n      p = r(10),\n      s = 'HTML' === o.nodeName,\n      d = u(e),\n      a = u(o),\n      l = n(e),\n      m = t(o),\n      h = parseFloat(m.borderTopWidth, 10),\n      c = parseFloat(m.borderLeftWidth, 10);\n    i && 'HTML' === o.nodeName && (a.top = $(a.top, 0), a.left = $(a.left, 0));\n    var b = g({\n      top: d.top - a.top - h,\n      left: d.left - a.left - c,\n      width: d.width,\n      height: d.height\n    });\n    if (b.marginTop = 0, b.marginLeft = 0, !p && s) {\n      var y = parseFloat(m.marginTop, 10),\n        w = parseFloat(m.marginLeft, 10);\n      b.top -= h - y, b.bottom -= h - y, b.left -= c - w, b.right -= c - w, b.marginTop = y, b.marginLeft = w;\n    }\n    return (p && !i ? o.contains(l) : o === l && 'BODY' !== l.nodeName) && (b = f(b, o)), b;\n  }\n  function y(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n      o = e.ownerDocument.documentElement,\n      n = b(e, o),\n      i = $(o.clientWidth, window.innerWidth || 0),\n      r = $(o.clientHeight, window.innerHeight || 0),\n      p = t ? 0 : l(o),\n      s = t ? 0 : l(o, 'left'),\n      d = {\n        top: p - n.top + n.marginTop,\n        left: s - n.left + n.marginLeft,\n        width: i,\n        height: r\n      };\n    return g(d);\n  }\n  function w(e) {\n    var n = e.nodeName;\n    return 'BODY' === n || 'HTML' === n ? !1 : 'fixed' === t(e, 'position') || w(o(e));\n  }\n  function E(e) {\n    if (!e || !e.parentElement || r()) return document.documentElement;\n    for (var o = e.parentElement; o && 'none' === t(o, 'transform');) o = o.parentElement;\n    return o || document.documentElement;\n  }\n  function v(e, t, i, r) {\n    var p = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],\n      s = {\n        top: 0,\n        left: 0\n      },\n      d = p ? E(e) : a(e, t);\n    if ('viewport' === r) s = y(d, p);else {\n      var l;\n      'scrollParent' === r ? (l = n(o(t)), 'BODY' === l.nodeName && (l = e.ownerDocument.documentElement)) : 'window' === r ? l = e.ownerDocument.documentElement : l = r;\n      var f = b(l, d, p);\n      if ('HTML' === l.nodeName && !w(d)) {\n        var m = c(),\n          h = m.height,\n          g = m.width;\n        s.top += f.top - f.marginTop, s.bottom = h + f.top, s.left += f.left - f.marginLeft, s.right = g + f.left;\n      } else s = f;\n    }\n    return s.left += i, s.top += i, s.right -= i, s.bottom -= i, s;\n  }\n  function x(e) {\n    var t = e.width,\n      o = e.height;\n    return t * o;\n  }\n  function O(e, t, o, n, i) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf('auto')) return e;\n    var p = v(o, n, r, i),\n      s = {\n        top: {\n          width: p.width,\n          height: t.top - p.top\n        },\n        right: {\n          width: p.right - t.right,\n          height: p.height\n        },\n        bottom: {\n          width: p.width,\n          height: p.bottom - t.bottom\n        },\n        left: {\n          width: t.left - p.left,\n          height: p.height\n        }\n      },\n      d = Object.keys(s).map(function (e) {\n        return le({\n          key: e\n        }, s[e], {\n          area: x(s[e])\n        });\n      }).sort(function (e, t) {\n        return t.area - e.area;\n      }),\n      a = d.filter(function (e) {\n        var t = e.width,\n          n = e.height;\n        return t >= o.clientWidth && n >= o.clientHeight;\n      }),\n      l = 0 < a.length ? a[0].key : d[0].key,\n      f = e.split('-')[1];\n    return l + (f ? '-' + f : '');\n  }\n  function L(e, t, o) {\n    var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null,\n      i = n ? E(t) : a(t, o);\n    return b(o, i, n);\n  }\n  function S(e) {\n    var t = getComputedStyle(e),\n      o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),\n      n = parseFloat(t.marginLeft) + parseFloat(t.marginRight),\n      i = {\n        width: e.offsetWidth + n,\n        height: e.offsetHeight + o\n      };\n    return i;\n  }\n  function T(e) {\n    var t = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n  function C(e, t, o) {\n    o = o.split('-')[0];\n    var n = S(e),\n      i = {\n        width: n.width,\n        height: n.height\n      },\n      r = -1 !== ['right', 'left'].indexOf(o),\n      p = r ? 'top' : 'left',\n      s = r ? 'left' : 'top',\n      d = r ? 'height' : 'width',\n      a = r ? 'width' : 'height';\n    return i[p] = t[p] + t[d] / 2 - n[d] / 2, i[s] = o === s ? t[s] - n[a] : t[T(s)], i;\n  }\n  function D(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n  function N(e, t, o) {\n    if (Array.prototype.findIndex) return e.findIndex(function (e) {\n      return e[t] === o;\n    });\n    var n = D(e, function (e) {\n      return e[t] === o;\n    });\n    return e.indexOf(n);\n  }\n  function P(t, o, n) {\n    var i = void 0 === n ? t : t.slice(0, N(t, 'name', n));\n    return i.forEach(function (t) {\n      t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      var n = t['function'] || t.fn;\n      t.enabled && e(n) && (o.offsets.popper = g(o.offsets.popper), o.offsets.reference = g(o.offsets.reference), o = n(o, t));\n    }), o;\n  }\n  function k() {\n    if (!this.state.isDestroyed) {\n      var e = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      e.offsets.reference = L(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = O(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = C(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute', e = P(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n    }\n  }\n  function W(e, t) {\n    return e.some(function (e) {\n      var o = e.name,\n        n = e.enabled;\n      return n && o === t;\n    });\n  }\n  function B(e) {\n    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length; n++) {\n      var i = t[n],\n        r = i ? '' + i + o : e;\n      if ('undefined' != typeof document.body.style[r]) return r;\n    }\n    return null;\n  }\n  function H() {\n    return this.state.isDestroyed = !0, W(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.position = '', this.popper.style.top = '', this.popper.style.left = '', this.popper.style.right = '', this.popper.style.bottom = '', this.popper.style.willChange = '', this.popper.style[B('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n  function A(e) {\n    var t = e.ownerDocument;\n    return t ? t.defaultView : window;\n  }\n  function M(e, t, o, i) {\n    var r = 'BODY' === e.nodeName,\n      p = r ? e.ownerDocument.defaultView : e;\n    p.addEventListener(t, o, {\n      passive: !0\n    }), r || M(n(p.parentNode), t, o, i), i.push(p);\n  }\n  function I(e, t, o, i) {\n    o.updateBound = i, A(e).addEventListener('resize', o.updateBound, {\n      passive: !0\n    });\n    var r = n(e);\n    return M(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;\n  }\n  function F() {\n    this.state.eventsEnabled || (this.state = I(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n  function R(e, t) {\n    return A(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener('scroll', t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;\n  }\n  function U() {\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = R(this.reference, this.state));\n  }\n  function Y(e) {\n    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n  function j(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var n = '';\n      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && Y(t[o]) && (n = 'px'), e.style[o] = t[o] + n;\n    });\n  }\n  function K(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var n = t[o];\n      !1 === n ? e.removeAttribute(o) : e.setAttribute(o, t[o]);\n    });\n  }\n  function q(e, t, o) {\n    var n = D(e, function (e) {\n        var o = e.name;\n        return o === t;\n      }),\n      i = !!n && e.some(function (e) {\n        return e.name === o && e.enabled && e.order < n.order;\n      });\n    if (!i) {\n      var r = '`' + t + '`';\n      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');\n    }\n    return i;\n  }\n  function G(e) {\n    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;\n  }\n  function z(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n      o = me.indexOf(e),\n      n = me.slice(o + 1).concat(me.slice(0, o));\n    return t ? n.reverse() : n;\n  }\n  function V(e, t, o, n) {\n    var i = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n      r = +i[1],\n      p = i[2];\n    if (!r) return e;\n    if (0 === p.indexOf('%')) {\n      var s;\n      switch (p) {\n        case '%p':\n          s = o;\n          break;\n        case '%':\n        case '%r':\n        default:\n          s = n;\n      }\n      var d = g(s);\n      return d[t] / 100 * r;\n    }\n    if ('vh' === p || 'vw' === p) {\n      var a;\n      return a = 'vh' === p ? $(document.documentElement.clientHeight, window.innerHeight || 0) : $(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;\n    }\n    return r;\n  }\n  function _(e, t, o, n) {\n    var i = [0, 0],\n      r = -1 !== ['right', 'left'].indexOf(n),\n      p = e.split(/(\\+|\\-)/).map(function (e) {\n        return e.trim();\n      }),\n      s = p.indexOf(D(p, function (e) {\n        return -1 !== e.search(/,|\\s/);\n      }));\n    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    var d = /\\s*,\\s*|\\s+/,\n      a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];\n    return a = a.map(function (e, n) {\n      var i = (1 === n ? !r : r) ? 'height' : 'width',\n        p = !1;\n      return e.reduce(function (e, t) {\n        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return V(e, i, t, o);\n      });\n    }), a.forEach(function (e, t) {\n      e.forEach(function (o, n) {\n        Y(o) && (i[t] += o * ('-' === e[n - 1] ? -1 : 1));\n      });\n    }), i;\n  }\n  function X(e, t) {\n    var o,\n      n = t.offset,\n      i = e.placement,\n      r = e.offsets,\n      p = r.popper,\n      s = r.reference,\n      d = i.split('-')[0];\n    return o = Y(+n) ? [+n, 0] : _(n, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;\n  }\n  for (var J = Math.min, Q = Math.round, Z = Math.floor, $ = Math.max, ee = 'undefined' != typeof window && 'undefined' != typeof document, te = ['Edge', 'Trident', 'Firefox'], oe = 0, ne = 0; ne < te.length; ne += 1) if (ee && 0 <= navigator.userAgent.indexOf(te[ne])) {\n    oe = 1;\n    break;\n  }\n  var i = ee && window.Promise,\n    ie = i ? function (e) {\n      var t = !1;\n      return function () {\n        t || (t = !0, window.Promise.resolve().then(function () {\n          t = !1, e();\n        }));\n      };\n    } : function (e) {\n      var t = !1;\n      return function () {\n        t || (t = !0, setTimeout(function () {\n          t = !1, e();\n        }, oe));\n      };\n    },\n    re = ee && !!(window.MSInputMethodContext && document.documentMode),\n    pe = ee && /MSIE 10/.test(navigator.userAgent),\n    se = function se(e, t) {\n      if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');\n    },\n    de = function () {\n      function e(e, t) {\n        for (var o, n = 0; n < t.length; n++) o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n      }\n      return function (t, o, n) {\n        return o && e(t.prototype, o), n && e(t, n), t;\n      };\n    }(),\n    ae = function ae(e, t, o) {\n      return t in e ? Object.defineProperty(e, t, {\n        value: o,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }) : e[t] = o, e;\n    },\n    le = Object.assign || function (e) {\n      for (var t, o = 1; o < arguments.length; o++) for (var n in t = arguments[o], t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n      return e;\n    },\n    fe = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],\n    me = fe.slice(3),\n    he = {\n      FLIP: 'flip',\n      CLOCKWISE: 'clockwise',\n      COUNTERCLOCKWISE: 'counterclockwise'\n    },\n    ce = function () {\n      function t(o, n) {\n        var i = this,\n          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n        se(this, t), this.scheduleUpdate = function () {\n          return requestAnimationFrame(i.update);\n        }, this.update = ie(this.update.bind(this)), this.options = le({}, t.Defaults, r), this.state = {\n          isDestroyed: !1,\n          isCreated: !1,\n          scrollParents: []\n        }, this.reference = o && o.jquery ? o[0] : o, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(le({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {\n          i.options.modifiers[e] = le({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});\n        }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n          return le({\n            name: e\n          }, i.options.modifiers[e]);\n        }).sort(function (e, t) {\n          return e.order - t.order;\n        }), this.modifiers.forEach(function (t) {\n          t.enabled && e(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);\n        }), this.update();\n        var p = this.options.eventsEnabled;\n        p && this.enableEventListeners(), this.state.eventsEnabled = p;\n      }\n      return de(t, [{\n        key: 'update',\n        value: function value() {\n          return k.call(this);\n        }\n      }, {\n        key: 'destroy',\n        value: function value() {\n          return H.call(this);\n        }\n      }, {\n        key: 'enableEventListeners',\n        value: function value() {\n          return F.call(this);\n        }\n      }, {\n        key: 'disableEventListeners',\n        value: function value() {\n          return U.call(this);\n        }\n      }]), t;\n    }();\n  return ce.Utils = ('undefined' == typeof window ? __webpack_require__.g : window).PopperUtils, ce.placements = fe, ce.Defaults = {\n    placement: 'bottom',\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.placement,\n            o = t.split('-')[0],\n            n = t.split('-')[1];\n          if (n) {\n            var i = e.offsets,\n              r = i.reference,\n              p = i.popper,\n              s = -1 !== ['bottom', 'top'].indexOf(o),\n              d = s ? 'left' : 'top',\n              a = s ? 'width' : 'height',\n              l = {\n                start: ae({}, d, r[d]),\n                end: ae({}, d, r[d] + r[a] - p[a])\n              };\n            e.offsets.popper = le({}, p, l[n]);\n          }\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: X,\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.boundariesElement || p(e.instance.popper);\n          e.instance.reference === o && (o = p(o));\n          var n = B('transform'),\n            i = e.instance.popper.style,\n            r = i.top,\n            s = i.left,\n            d = i[n];\n          i.top = '', i.left = '', i[n] = '';\n          var a = v(e.instance.popper, e.instance.reference, t.padding, o, e.positionFixed);\n          i.top = r, i.left = s, i[n] = d, t.boundaries = a;\n          var l = t.priority,\n            f = e.offsets.popper,\n            m = {\n              primary: function primary(e) {\n                var o = f[e];\n                return f[e] < a[e] && !t.escapeWithReference && (o = $(f[e], a[e])), ae({}, e, o);\n              },\n              secondary: function secondary(e) {\n                var o = 'right' === e ? 'left' : 'top',\n                  n = f[o];\n                return f[e] > a[e] && !t.escapeWithReference && (n = J(f[o], a[e] - ('right' === e ? f.width : f.height))), ae({}, o, n);\n              }\n            };\n          return l.forEach(function (e) {\n            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';\n            f = le({}, f, m[t](e));\n          }), e.offsets.popper = f, e;\n        },\n        priority: ['left', 'right', 'top', 'bottom'],\n        padding: 5,\n        boundariesElement: 'scrollParent'\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.offsets,\n            o = t.popper,\n            n = t.reference,\n            i = e.placement.split('-')[0],\n            r = Z,\n            p = -1 !== ['top', 'bottom'].indexOf(i),\n            s = p ? 'right' : 'bottom',\n            d = p ? 'left' : 'top',\n            a = p ? 'width' : 'height';\n          return o[s] < r(n[d]) && (e.offsets.popper[d] = r(n[d]) - o[a]), o[d] > r(n[s]) && (e.offsets.popper[d] = r(n[s])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(e, o) {\n          var n;\n          if (!q(e.instance.modifiers, 'arrow', 'keepTogether')) return e;\n          var i = o.element;\n          if ('string' == typeof i) {\n            if (i = e.instance.popper.querySelector(i), !i) return e;\n          } else if (!e.instance.popper.contains(i)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;\n          var r = e.placement.split('-')[0],\n            p = e.offsets,\n            s = p.popper,\n            d = p.reference,\n            a = -1 !== ['left', 'right'].indexOf(r),\n            l = a ? 'height' : 'width',\n            f = a ? 'Top' : 'Left',\n            m = f.toLowerCase(),\n            h = a ? 'left' : 'top',\n            c = a ? 'bottom' : 'right',\n            u = S(i)[l];\n          d[c] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[c] - u)), d[m] + u > s[c] && (e.offsets.popper[m] += d[m] + u - s[c]), e.offsets.popper = g(e.offsets.popper);\n          var b = d[m] + d[l] / 2 - u / 2,\n            y = t(e.instance.popper),\n            w = parseFloat(y['margin' + f], 10),\n            E = parseFloat(y['border' + f + 'Width'], 10),\n            v = b - e.offsets.popper[m] - w - E;\n          return v = $(J(s[l] - u, v), 0), e.arrowElement = i, e.offsets.arrow = (n = {}, ae(n, m, Q(v)), ae(n, h, ''), n), e;\n        },\n        element: '[x-arrow]'\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (W(e.instance.modifiers, 'inner')) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var o = v(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),\n            n = e.placement.split('-')[0],\n            i = T(n),\n            r = e.placement.split('-')[1] || '',\n            p = [];\n          switch (t.behavior) {\n            case he.FLIP:\n              p = [n, i];\n              break;\n            case he.CLOCKWISE:\n              p = z(n);\n              break;\n            case he.COUNTERCLOCKWISE:\n              p = z(n, !0);\n              break;\n            default:\n              p = t.behavior;\n          }\n          return p.forEach(function (s, d) {\n            if (n !== s || p.length === d + 1) return e;\n            n = e.placement.split('-')[0], i = T(n);\n            var a = e.offsets.popper,\n              l = e.offsets.reference,\n              f = Z,\n              m = 'left' === n && f(a.right) > f(l.left) || 'right' === n && f(a.left) < f(l.right) || 'top' === n && f(a.bottom) > f(l.top) || 'bottom' === n && f(a.top) < f(l.bottom),\n              h = f(a.left) < f(o.left),\n              c = f(a.right) > f(o.right),\n              g = f(a.top) < f(o.top),\n              u = f(a.bottom) > f(o.bottom),\n              b = 'left' === n && h || 'right' === n && c || 'top' === n && g || 'bottom' === n && u,\n              y = -1 !== ['top', 'bottom'].indexOf(n),\n              w = !!t.flipVariations && (y && 'start' === r && h || y && 'end' === r && c || !y && 'start' === r && g || !y && 'end' === r && u);\n            (m || b || w) && (e.flipped = !0, (m || b) && (n = p[d + 1]), w && (r = G(r)), e.placement = n + (r ? '-' + r : ''), e.offsets.popper = le({}, e.offsets.popper, C(e.instance.popper, e.offsets.reference, e.placement)), e = P(e.instance.modifiers, e, 'flip'));\n          }), e;\n        },\n        behavior: 'flip',\n        padding: 5,\n        boundariesElement: 'viewport'\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(e) {\n          var t = e.placement,\n            o = t.split('-')[0],\n            n = e.offsets,\n            i = n.popper,\n            r = n.reference,\n            p = -1 !== ['left', 'right'].indexOf(o),\n            s = -1 === ['top', 'left'].indexOf(o);\n          return i[p ? 'left' : 'top'] = r[o] - (s ? i[p ? 'width' : 'height'] : 0), e.placement = T(t), e.offsets.popper = g(i), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(e) {\n          if (!q(e.instance.modifiers, 'hide', 'preventOverflow')) return e;\n          var t = e.offsets.reference,\n            o = D(e.instance.modifiers, function (e) {\n              return 'preventOverflow' === e.name;\n            }).boundaries;\n          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;\n          }\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.x,\n            n = t.y,\n            i = e.offsets.popper,\n            r = D(e.instance.modifiers, function (e) {\n              return 'applyStyle' === e.name;\n            }).gpuAcceleration;\n          void 0 !== r && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n          var s,\n            d,\n            a = void 0 === r ? t.gpuAcceleration : r,\n            l = p(e.instance.popper),\n            f = u(l),\n            m = {\n              position: i.position\n            },\n            h = {\n              left: Z(i.left),\n              top: Q(i.top),\n              bottom: Q(i.bottom),\n              right: Z(i.right)\n            },\n            c = 'bottom' === o ? 'top' : 'bottom',\n            g = 'right' === n ? 'left' : 'right',\n            b = B('transform');\n          if (d = 'bottom' == c ? -f.height + h.bottom : h.top, s = 'right' == g ? -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[g] = 0, m.willChange = 'transform';else {\n            var y = 'bottom' == c ? -1 : 1,\n              w = 'right' == g ? -1 : 1;\n            m[c] = d * y, m[g] = s * w, m.willChange = c + ', ' + g;\n          }\n          var E = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = le({}, E, e.attributes), e.styles = le({}, m, e.styles), e.arrowStyles = le({}, e.offsets.arrow, e.arrowStyles), e;\n        },\n        gpuAcceleration: !0,\n        x: 'bottom',\n        y: 'right'\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(e) {\n          return j(e.instance.popper, e.styles), K(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && j(e.arrowElement, e.arrowStyles), e;\n        },\n        onLoad: function onLoad(e, t, o, n, i) {\n          var r = L(i, t, e, o.positionFixed),\n            p = O(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);\n          return t.setAttribute('x-placement', p), j(t, {\n            position: o.positionFixed ? 'fixed' : 'absolute'\n          }), o;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, ce;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/landing-page/popper.min.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.7.0\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-05-11T18:29Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar version = \"3.7.0\",\n\n\trhtmlSuffix = /HTML$/i,\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\n\t// Retrieve the text value of an array of DOM nodes\n\ttext: function( elem ) {\n\t\tvar node,\n\t\t\tret = \"\",\n\t\t\ti = 0,\n\t\t\tnodeType = elem.nodeType;\n\n\t\tif ( !nodeType ) {\n\n\t\t\t// If no nodeType, this is expected to be an array\n\t\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t\t// Do not traverse comment nodes\n\t\t\t\tret += jQuery.text( node );\n\t\t\t}\n\t\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t\treturn elem.textContent;\n\t\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\t\treturn elem.nodeValue;\n\t\t}\n\n\t\t// Do not include comment or processing instruction nodes\n\n\t\treturn ret;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tisXMLDoc: function( elem ) {\n\t\tvar namespace = elem && elem.namespaceURI,\n\t\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t\t// Assume HTML when documentElement doesn't yet exist, such as inside\n\t\t// document fragments.\n\t\treturn !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar pop = arr.pop;\n\n\nvar sort = arr.sort;\n\n\nvar splice = arr.splice;\n\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar bup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\ta.contains ?\n\t\t\ta.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n\n\n\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\n\n\n\nvar preferredDoc = document,\n\tpushNative = push;\n\n( function() {\n\nvar i,\n\tExpr,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\tpush = pushNative,\n\n\t// Local document vars\n\tdocument,\n\tdocumentElement,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\tmatches,\n\n\t// Instance-specific data\n\texpando = jQuery.expando,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n\t\t\"loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trleadingCombinator = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n\t\twhitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\tID: new RegExp( \"^#(\" + identifier + \")\" ),\n\t\tCLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\tTAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\tATTR: new RegExp( \"^\" + attributes ),\n\t\tPSEUDO: new RegExp( \"^\" + pseudos ),\n\t\tCHILD: new RegExp(\n\t\t\t\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\tbool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\tneedsContext: new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\tif ( nonHex ) {\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\treturn nonHex;\n\t\t}\n\n\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t// Support: IE <=11+\n\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t// surrogate pair\n\t\treturn high < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes; see `setDocument`.\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE/Edge.\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && nodeName( elem, \"fieldset\" );\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android <=4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = {\n\t\tapply: function( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t},\n\t\tcall: function( target ) {\n\t\t\tpushNative.apply( target, slice.call( arguments, 1 ) );\n\t\t}\n\t};\n}\n\nfunction find( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tfind.contains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( !nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when\n\t\t\t\t\t// strict-comparing two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( newContext != context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = jQuery.escapeSelector( nid );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrimCSS, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties\n\t\t// (see https://github.com/jquery/sizzle/issues/157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn nodeName( elem, \"input\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n\t\t\telem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11+\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nfunction setDocument( node ) {\n\tvar subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocumentElement = document.documentElement;\n\tdocumentIsHTML = !jQuery.isXMLDoc( document );\n\n\t// Support: iOS 7 only, IE 9 - 11+\n\t// Older browsers didn't support unprefixed `matches`.\n\tmatches = documentElement.matches ||\n\t\tdocumentElement.webkitMatchesSelector ||\n\t\tdocumentElement.msMatchesSelector;\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (see trac-13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t\tsubWindow.addEventListener( \"unload\", unloadHandler );\n\t}\n\n\t// Support: IE <10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocumentElement.appendChild( el ).id = jQuery.expando;\n\t\treturn !document.getElementsByName ||\n\t\t\t!document.getElementsByName( jQuery.expando ).length;\n\t} );\n\n\t// Support: IE 9 only\n\t// Check to see if it's possible to do matchesSelector\n\t// on a disconnected node.\n\tsupport.disconnectedMatch = assert( function( el ) {\n\t\treturn matches.call( el, \"*\" );\n\t} );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// IE/Edge don't support the :scope pseudo-class.\n\tsupport.scope = assert( function() {\n\t\treturn document.querySelectorAll( \":scope\" );\n\t} );\n\n\t// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\n\t// Make sure the `:has()` argument is parsed unforgivingly.\n\t// We include `*` in the test to detect buggy implementations that are\n\t// _selectively_ forgiving (specifically when the list includes at least\n\t// one valid selector).\n\t// Note that we treat complete lack of support for `:has()` as if it were\n\t// spec-compliant support, which is fine because use of `:has()` in such\n\t// environments will fail in the qSA path and fall back to jQuery traversal\n\t// anyway.\n\tsupport.cssHas = assert( function() {\n\t\ttry {\n\t\t\tdocument.querySelector( \":has(*,:jqfake)\" );\n\t\t\treturn false;\n\t\t} catch ( e ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter.ID = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter.ID =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find.TAG = function( tag, context ) {\n\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t// DocumentFragment nodes don't have gEBTN\n\t\t} else {\n\t\t\treturn context.querySelectorAll( tag );\n\t\t}\n\t};\n\n\t// Class\n\tExpr.find.CLASS = function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\trbuggyQSA = [];\n\n\t// Build QSA regex\n\t// Regex strategy adopted from Diego Perini\n\tassert( function( el ) {\n\n\t\tvar input;\n\n\t\tdocumentElement.appendChild( el ).innerHTML =\n\t\t\t\"<a id='\" + expando + \"' href='' disabled='disabled'></a>\" +\n\t\t\t\"<select id='\" + expando + \"-\\r\\\\' disabled='disabled'>\" +\n\t\t\t\"<option selected=''></option></select>\";\n\n\t\t// Support: iOS <=7 - 8 only\n\t\t// Boolean attributes and \"value\" are not treated correctly in some XML documents\n\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t}\n\n\t\t// Support: iOS <=7 - 8 only\n\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\trbuggyQSA.push( \"~=\" );\n\t\t}\n\n\t\t// Support: iOS 8 only\n\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t}\n\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\trbuggyQSA.push( \":checked\" );\n\t\t}\n\n\t\t// Support: Windows 8 Native Apps\n\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tdocumentElement.appendChild( el ).disabled = true;\n\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t}\n\n\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t// Adding a temporary attribute to the document before the selection works\n\t\t// around the issue.\n\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"name\", \"\" );\n\t\tel.appendChild( input );\n\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t}\n\t} );\n\n\tif ( !support.cssHas ) {\n\n\t\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t\t// Our regular `try-catch` mechanism fails to detect natively-unsupported\n\t\t// pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n\t\t// in browsers that parse the `:has()` argument as a forgiving selector list.\n\t\t// https://drafts.csswg.org/selectors/#relational now requires the argument\n\t\t// to be parsed unforgivingly, but browsers have not yet fully adjusted.\n\t\trbuggyQSA.push( \":has\" );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = function( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a === document || a.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b === document || b.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t};\n\n\treturn document;\n}\n\nfind.matches = function( expr, elements ) {\n\treturn find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn find( expr, document, null, [ elem ] ).length > 0;\n};\n\nfind.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn jQuery.contains( context, elem );\n};\n\n\nfind.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (see trac-13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\tif ( val !== undefined ) {\n\t\treturn val;\n\t}\n\n\treturn elem.getAttribute( name );\n};\n\nfind.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\t//\n\t// Support: Android <=4.0+\n\t// Testing for detecting duplicates is unpredictable so instead assume we can't\n\t// depend on duplicate detection in all browsers without a stable sort.\n\thasDuplicate = !support.sortStable;\n\tsortInput = !support.sortStable && slice.call( results, 0 );\n\tsort.call( results, sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tsplice.call( results, duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\njQuery.fn.uniqueSort = function() {\n\treturn this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );\n};\n\nExpr = jQuery.expr = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\tATTR: function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n\t\t\t\t.replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\tCHILD: function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n\t\t\t\t);\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\tPSEUDO: function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\tTAG: function( nodeNameSelector ) {\n\t\t\tvar expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn nodeName( elem, expectedNodeName );\n\t\t\t\t};\n\t\t},\n\n\t\tCLASS: function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n\t\t\t\t\t\"(\" + whitespace + \"|$)\" ) ) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\tATTR: function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = find.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\tif ( operator === \"=\" ) {\n\t\t\t\t\treturn result === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"!=\" ) {\n\t\t\t\t\treturn result !== check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"^=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) === 0;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"*=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"$=\" ) {\n\t\t\t\t\treturn check && result.slice( -check.length ) === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"~=\" ) {\n\t\t\t\t\treturn ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n\t\t\t\t\t\t.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"|=\" ) {\n\t\t\t\t\treturn result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t};\n\t\t},\n\n\t\tCHILD: function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || ( parent[ expando ] = {} );\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\t\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\t\t\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\tPSEUDO: function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// https://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tfind.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as jQuery does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\tnot: markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrimCSS, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element\n\t\t\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\thas: markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn find( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\tcontains: markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// https://www.w3.org/TR/selectors/#lang-pseudo\n\t\tlang: markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tfind.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\ttarget: function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\troot: function( elem ) {\n\t\t\treturn elem === documentElement;\n\t\t},\n\n\t\tfocus: function( elem ) {\n\t\t\treturn elem === safeActiveElement() &&\n\t\t\t\tdocument.hasFocus() &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\tenabled: createDisabledPseudo( false ),\n\t\tdisabled: createDisabledPseudo( true ),\n\n\t\tchecked: function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\treturn ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n\t\t\t\t( nodeName( elem, \"option\" ) && !!elem.selected );\n\t\t},\n\n\t\tselected: function( elem ) {\n\n\t\t\t// Support: IE <=11+\n\t\t\t// Accessing the selectedIndex property\n\t\t\t// forces the browser to treat the default option as\n\t\t\t// selected when in an optgroup.\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\tempty: function( elem ) {\n\n\t\t\t// https://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tparent: function( elem ) {\n\t\t\treturn !Expr.pseudos.empty( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\theader: function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\tinput: function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\tbutton: function( elem ) {\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n\t\t\t\tnodeName( elem, \"button\" );\n\t\t},\n\n\t\ttext: function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"text\" &&\n\n\t\t\t\t// Support: IE <10 only\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear\n\t\t\t\t// with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\tfirst: createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\tlast: createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\teq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\teven: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\todd: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tlt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i;\n\n\t\t\tif ( argument < 0 ) {\n\t\t\t\ti = argument + length;\n\t\t\t} else if ( argument > length ) {\n\t\t\t\ti = length;\n\t\t\t} else {\n\t\t\t\ti = argument;\n\t\t\t}\n\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tgt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rleadingCombinator.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrimCSS, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\tif ( parseOnly ) {\n\t\treturn soFar.length;\n\t}\n\n\treturn soFar ?\n\t\tfind.error( selector ) :\n\n\t\t// Cache the tokens\n\t\ttokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\tif ( skip && nodeName( elem, skip ) ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = outerCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tfind( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem, matcherOut,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed ||\n\t\t\t\tmultipleContexts( selector || \"*\",\n\t\t\t\t\tcontext.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems;\n\n\t\tif ( matcher ) {\n\n\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter\n\t\t\t// or preexisting results,\n\t\t\tmatcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults;\n\n\t\t\t// Find primary matches\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t} else {\n\t\t\tmatcherOut = matcherIn;\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tvar ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element\n\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 )\n\t\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrimCSS, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: iOS <=7 - 9 only\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching\n\t\t\t// elements by id. (see trac-14142)\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tjQuery.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find.ID(\n\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\tcontext\n\t\t\t) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) &&\n\t\t\t\t\t\ttestContext( context.parentNode ) || context\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n}\n\n// One-time assignments\n\n// Support: Android <=4.0 - 4.1+\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Android <=4.0 - 4.1+\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\njQuery.find = find;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.unique = jQuery.uniqueSort;\n\n// These have always been private, but they used to be documented\n// as part of Sizzle so let's maintain them in the 3.x line\n// for backwards compatibility purposes.\nfind.compile = compile;\nfind.select = select;\nfind.setDocument = setDocument;\n\nfind.escape = jQuery.escapeSelector;\nfind.getText = jQuery.text;\nfind.isXML = jQuery.isXMLDoc;\nfind.selectors = jQuery.expr;\nfind.support = jQuery.support;\nfind.uniqueSort = jQuery.uniqueSort;\n\n\t/* eslint-enable */\n\n} )();\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to jQuery#find\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.error );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the error, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getErrorHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getErrorHook();\n\n\t\t\t\t\t\t\t\t// The deprecated alias of the above. While the name suggests\n\t\t\t\t\t\t\t\t// returning the stack, not an error instance, jQuery just passes\n\t\t\t\t\t\t\t\t// it directly to `console.warn` so both will work; an instance\n\t\t\t\t\t\t\t\t// just better cooperates with source maps.\n\t\t\t\t\t\t\t\t} else if ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\n// captured before the async barrier to get the original error cause\n// which may otherwise be hidden.\njQuery.Deferred.exceptionHook = function( error, asyncError ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message,\n\t\t\terror.stack, asyncError );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", true );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, isSetup ) {\n\n\t// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !isSetup ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\tif ( !saved ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tdataPriv.set( this, type, false );\n\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering\n\t\t\t\t// the native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, jQuery.event.trigger(\n\t\t\t\t\tsaved[ 0 ],\n\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\tthis\n\t\t\t\t) );\n\n\t\t\t\t// Abort handling of the native event by all jQuery handlers while allowing\n\t\t\t\t// native handlers on the same element to run. On target, this is achieved\n\t\t\t\t// by stopping immediate propagation just on the jQuery event. However,\n\t\t\t\t// the native event is re-wrapped by a jQuery one on each level of the\n\t\t\t\t// propagation so the only way to stop it for jQuery is to stop it for\n\t\t\t\t// everyone via native `stopPropagation()`. This is not a problem for\n\t\t\t\t// focus/blur which don't bubble, but it does also stop click on checkboxes\n\t\t\t\t// and radios. We accept this limitation.\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.isImmediatePropagationStopped = returnTrue;\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\n\tfunction focusMappedHandler( nativeEvent ) {\n\t\tif ( document.documentMode ) {\n\n\t\t\t// Support: IE 11+\n\t\t\t// Attach a single focusin/focusout handler on the document while someone wants\n\t\t\t// focus/blur. This is because the former are synchronous in IE while the latter\n\t\t\t// are async. In other browsers, all those handlers are invoked synchronously.\n\n\t\t\t// `handle` from private data would already wrap the event, but we need\n\t\t\t// to change the `type` here.\n\t\t\tvar handle = dataPriv.get( this, \"handle\" ),\n\t\t\t\tevent = jQuery.event.fix( nativeEvent );\n\t\t\tevent.type = nativeEvent.type === \"focusin\" ? \"focus\" : \"blur\";\n\t\t\tevent.isSimulated = true;\n\n\t\t\t// First, handle focusin/focusout\n\t\t\thandle( nativeEvent );\n\n\t\t\t// ...then, handle focus/blur\n\t\t\t//\n\t\t\t// focus/blur don't bubble while focusin/focusout do; simulate the former by only\n\t\t\t// invoking the handler at the lower level.\n\t\t\tif ( event.target === event.currentTarget ) {\n\n\t\t\t\t// The setup part calls `leverageNative`, which, in turn, calls\n\t\t\t\t// `jQuery.event.add`, so event handle will already have been set\n\t\t\t\t// by this point.\n\t\t\t\thandle( event );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// For non-IE browsers, attach a single capturing handler on the document\n\t\t\t// while someone wants focusin/focusout.\n\t\t\tjQuery.event.simulate( delegateType, nativeEvent.target,\n\t\t\t\tjQuery.event.fix( nativeEvent ) );\n\t\t}\n\t}\n\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\tvar attaches;\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, true );\n\n\t\t\tif ( document.documentMode ) {\n\n\t\t\t\t// Support: IE 9 - 11+\n\t\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\t\tattaches = dataPriv.get( this, delegateType );\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t}\n\t\t\t\tdataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );\n\t\t\t} else {\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar attaches;\n\n\t\t\tif ( document.documentMode ) {\n\t\t\t\tattaches = dataPriv.get( this, delegateType ) - 1;\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t\tdataPriv.remove( this, delegateType );\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.set( this, delegateType, attaches );\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Return false to indicate standard teardown should be applied\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\t//\n\t// Support: IE 9 - 11+\n\t// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\n\t// attach a single handler for both events in IE.\n\tjQuery.event.special[ delegateType ] = {\n\t\tsetup: function() {\n\n\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType );\n\n\t\t\t// Support: IE 9 - 11+\n\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.addEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );\n\t\t},\n\t\tteardown: function() {\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType ) - 1;\n\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.removeEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( dataHolder, delegateType );\n\t\t\t} else {\n\t\t\t\tdataPriv.set( dataHolder, delegateType, attaches );\n\t\t\t}\n\t\t}\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew jQuery#find here for performance reasons:\n\t\t\t// https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0,\n\t\tmarginDelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\t// Count margin delta separately to only add it after scroll gutter adjustment.\n\t\t// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\n\t\tif ( box === \"margin\" ) {\n\t\t\tmarginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta + marginDelta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\tanimationIterationCount: true,\n\t\taspectRatio: true,\n\t\tborderImageSlice: true,\n\t\tcolumnCount: true,\n\t\tflexGrow: true,\n\t\tflexShrink: true,\n\t\tfontWeight: true,\n\t\tgridArea: true,\n\t\tgridColumn: true,\n\t\tgridColumnEnd: true,\n\t\tgridColumnStart: true,\n\t\tgridRow: true,\n\t\tgridRowEnd: true,\n\t\tgridRowStart: true,\n\t\tlineHeight: true,\n\t\topacity: true,\n\t\torder: true,\n\t\torphans: true,\n\t\tscale: true,\n\t\twidows: true,\n\t\tzIndex: true,\n\t\tzoom: true,\n\n\t\t// SVG-related\n\t\tfillOpacity: true,\n\t\tfloodOpacity: true,\n\t\tstopOpacity: true,\n\t\tstrokeMiterlimit: true,\n\t\tstrokeOpacity: true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTSxLQUEwQjs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOzs7QUFHQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFlBQVk7O0FBRXJCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixvQkFBb0I7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLFNBQVM7QUFDbkI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTs7O0FBR0E7OztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBOztBQUVBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxJQUFJO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLDBCQUEwQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTLDZCQUE2QjtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixhQUFhLHdCQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxlQUFlOztBQUVmLFNBQVM7O0FBRVQ7QUFDQSxTQUFTLGdDQUFnQztBQUN6QyxTQUFTLG1CQUFtQjtBQUM1QixTQUFTLHFDQUFxQztBQUM5QyxTQUFTO0FBQ1QsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVE7O0FBRVI7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0Esa0VBQWtFLFVBQVU7QUFDNUUsdUNBQXVDLDJCQUEyQjtBQUNsRTtBQUNBLGlDQUFpQyxNQUFNO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxhQUFhLHVFQUF1RTtBQUNwRjtBQUNBO0FBQ0EsYUFBYSw0QkFBNEI7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDZEQUE2RDs7QUFFN0Q7QUFDQTtBQUNBLFFBQVE7QUFDUjs7QUFFQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBOztBQUVBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixTQUFTLFNBQVM7QUFDbEI7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixpREFBaUQ7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0EsV0FBVyw0Q0FBNEM7QUFDdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQSxTQUFTLEdBQUc7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxNQUFNO0FBQ047O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLDJCQUEyQix3QkFBd0I7O0FBRW5EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLDJDQUEyQztBQUMzQyxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5Q0FBeUMscUNBQXFDO0FBQzlFLHFDQUFxQyxzQ0FBc0M7QUFDM0UscUNBQXFDLHFDQUFxQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7QUFDckMsc0NBQXNDO0FBQ3RDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7O0FBS0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsYUFBYTtBQUNyQyxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOzs7QUFHQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyxnQkFBZ0I7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRztBQUNIOztBQUVBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLE9BQU87QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsT0FBTztBQUNoQjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVzs7QUFFWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnRUFBZ0U7QUFDaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLGNBQWM7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUNBQXVDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1REFBdUQ7QUFDL0U7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUk7QUFDSixFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sK0NBQStDO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELGVBQWUsb0NBQW9DOztBQUVuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtB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O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOERBQThEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxPQUFPOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLFNBQVM7QUFDckI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQSxTQUFTLE9BQU87QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQjtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsa0RBQWtELDBCQUEwQjtBQUM1RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0E7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTs7QUFFQSxTQUFTLGdCQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFVBQVUsZ0JBQWdCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEMsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlEOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0MsU0FBUztBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsU0FBUztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVksaUJBQWlCO0FBQzdCLGVBQWU7QUFDZixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFNBQVMsbUJBQW1CO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7OztBQUtGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7Ozs7QUFLRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQix1QkFBdUI7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7Ozs7O0FBS0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEM7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7OztBQUtGO0FBQ0E7O0FBRUEsY0FBYzs7QUFFZDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsTUFBTTtBQUNOOztBQUVBLFlBQVk7QUFDWixJQUFJO0FBQ0o7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEIscURBQXFEO0FBQ3JEOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVCQUF1QjtBQUNuQyxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7Ozs7QUFLRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxjQUFjLHVDQUF1QztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7OztBQUtGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7Ozs7QUFLRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxxREFBcUQ7QUFDckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLGVBQWUscURBQXFEO0FBQ3BFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0EsZUFBZSxrQ0FBa0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7Ozs7O0FBS0Y7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSyxJQUEwQztBQUMvQyxDQUFDLGlDQUFrQixFQUFFLG1DQUFFO0FBQ3ZCO0FBQ0EsRUFBRTtBQUFBLGtHQUFFO0FBQ0o7Ozs7O0FBS0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzPzgyNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjcuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMy0wNS0xMVQxODoyOVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgdHJhYy0xNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXIgdmVyc2lvbiA9IFwiMy43LjBcIixcblxuXHRyaHRtbFN1ZmZpeCA9IC9IVE1MJC9pLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXG5cdC8vIFJldHJpZXZlIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuXHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbm9kZSxcblx0XHRcdHJldCA9IFwiXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRcdHJldCArPSBqUXVlcnkudGV4dCggbm9kZSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHRcdH1cblxuXHRcdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0aXNYTUxEb2M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZVxuXHRcdC8vIGRvY3VtZW50IGZyYWdtZW50cy5cblx0XHRyZXR1cm4gIXJodG1sU3VmZml4LnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHBvcCA9IGFyci5wb3A7XG5cblxudmFyIHNvcnQgPSBhcnIuc29ydDtcblxuXG52YXIgc3BsaWNlID0gYXJyLnNwbGljZTtcblxuXG52YXIgd2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIjtcblxuXG52YXIgcnRyaW1DU1MgPSBuZXcgUmVnRXhwKFxuXHRcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLFxuXHRcImdcIlxuKTtcblxuXG5cblxuLy8gTm90ZTogYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxualF1ZXJ5LmNvbnRhaW5zID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdHZhciBidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblxuXHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHQvLyBJRSBkb2Vzbid0IGhhdmUgYGNvbnRhaW5zYCBvbiBTVkcuXG5cdFx0YS5jb250YWlucyA/XG5cdFx0XHRhLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0KSApO1xufTtcblxuXG5cblxuLy8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cbi8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xudmFyIHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztcblxuZnVuY3Rpb24gZmNzc2VzY2FwZSggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHR9XG5cblx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdH1cblxuXHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdHJldHVybiBcIlxcXFxcIiArIGNoO1xufVxuXG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuXG5cblxudmFyIHByZWZlcnJlZERvYyA9IGRvY3VtZW50LFxuXHRwdXNoTmF0aXZlID0gcHVzaDtcblxuKCBmdW5jdGlvbigpIHtcblxudmFyIGksXG5cdEV4cHIsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXHRwdXNoID0gcHVzaE5hdGl2ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdGRvY3VtZW50LFxuXHRkb2N1bWVudEVsZW1lbnQsXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdG1hdGNoZXMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0galF1ZXJ5LmV4cGFuZG8sXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8XCIgK1xuXHRcdFwibG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJsZWFkaW5nQ29tYmluYXRvciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0SUQ6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRDTEFTUzogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRUQUc6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRBVFRSOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRQU0VVRE86IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdENISUxEOiBuZXcgUmVnRXhwKFxuXHRcdFx0XCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdGJvb2w6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0bmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0aWYgKCBub25IZXggKSB7XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0cmV0dXJuIG5vbkhleDtcblx0XHR9XG5cblx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdHJldHVybiBoaWdoIDwgMCA/XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXM7IHNlZSBgc2V0RG9jdW1lbnRgLlxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRS9FZGdlLlxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgbm9kZU5hbWUoIGVsZW0sIFwiZmllbGRzZXRcIiApO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7XG5cdFx0YXBwbHk6IGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9LFxuXHRcdGNhbGw6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApICk7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBmaW5kKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggIW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCBybGVhZGluZ0NvbWJpbmF0b3IudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW5cblx0XHRcdFx0XHQvLyBzdHJpY3QtY29tcGFyaW5nIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IGpRdWVyeS5lc2NhcGVTZWxlY3RvciggbmlkICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXNcblx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8xNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBqUXVlcnkgc2VsZWN0b3IgbW9kdWxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IG5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICkgKSAmJlxuXHRcdFx0ZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExK1xuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIGpRdWVyeSBzZWxlY3RvciBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW25vZGVdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbmZ1bmN0aW9uIHNldERvY3VtZW50KCBub2RlICkge1xuXHR2YXIgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhalF1ZXJ5LmlzWE1MRG9jKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUyA3IG9ubHksIElFIDkgLSAxMStcblx0Ly8gT2xkZXIgYnJvd3NlcnMgZGlkbid0IHN1cHBvcnQgdW5wcmVmaXhlZCBgbWF0Y2hlc2AuXG5cdG1hdGNoZXMgPSBkb2N1bWVudEVsZW1lbnQubWF0Y2hlcyB8fFxuXHRcdGRvY3VtZW50RWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKHNlZSB0cmFjLTEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBqUXVlcnkuZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8XG5cdFx0XHQhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGpRdWVyeS5leHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlLlxuXHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0cmV0dXJuIG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIElFL0VkZ2UgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlXCIgKTtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTEgb25seSwgU2FmYXJpIDE1LjQgLSAxNi4zIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBpcyBwYXJzZWQgdW5mb3JnaXZpbmdseS5cblx0Ly8gV2UgaW5jbHVkZSBgKmAgaW4gdGhlIHRlc3QgdG8gZGV0ZWN0IGJ1Z2d5IGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZVxuXHQvLyBfc2VsZWN0aXZlbHlfIGZvcmdpdmluZyAoc3BlY2lmaWNhbGx5IHdoZW4gdGhlIGxpc3QgaW5jbHVkZXMgYXQgbGVhc3Rcblx0Ly8gb25lIHZhbGlkIHNlbGVjdG9yKS5cblx0Ly8gTm90ZSB0aGF0IHdlIHRyZWF0IGNvbXBsZXRlIGxhY2sgb2Ygc3VwcG9ydCBmb3IgYDpoYXMoKWAgYXMgaWYgaXQgd2VyZVxuXHQvLyBzcGVjLWNvbXBsaWFudCBzdXBwb3J0LCB3aGljaCBpcyBmaW5lIGJlY2F1c2UgdXNlIG9mIGA6aGFzKClgIGluIHN1Y2hcblx0Ly8gZW52aXJvbm1lbnRzIHdpbGwgZmFpbCBpbiB0aGUgcVNBIHBhdGggYW5kIGZhbGwgYmFjayB0byBqUXVlcnkgdHJhdmVyc2FsXG5cdC8vIGFueXdheS5cblx0c3VwcG9ydC5jc3NIYXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBcIjpoYXMoKiw6anFmYWtlKVwiICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZC5JRCA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kLklEID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmQuVEFHID0gZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmQuQ0xBU1MgPSBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0cmJ1Z2d5UVNBID0gW107XG5cblx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHR2YXIgaW5wdXQ7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID1cblx0XHRcdFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJyBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz5cIiArXG5cdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOCBvbmx5XG5cdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseSBpbiBzb21lIFhNTCBkb2N1bWVudHNcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDggb25seVxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDggb25seVxuXHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0xMDUrLCBGaXJlZm94IDw9MTA0KywgU2FmYXJpIDw9MTUuNCtcblx0XHQvLyBJbiBzb21lIG9mIHRoZSBkb2N1bWVudCBraW5kcywgdGhlc2Ugc2VsZWN0b3JzIHdvdWxkbid0IHdvcmsgbmF0aXZlbHkuXG5cdFx0Ly8gVGhpcyBpcyBwcm9iYWJseSBPSyBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIHdhbnQgdG8gbWFpbnRhaW5cblx0XHQvLyBoYW5kbGluZyB0aGVtIHRocm91Z2ggalF1ZXJ5IHRyYXZlcnNhbCBpbiBqUXVlcnkgMy54LlxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTEwNSssIEZpcmVmb3ggPD0xMDQrLCBTYWZhcmkgPD0xNS40K1xuXHRcdC8vIEluIHNvbWUgb2YgdGhlIGRvY3VtZW50IGtpbmRzLCB0aGVzZSBzZWxlY3RvcnMgd291bGRuJ3Qgd29yayBuYXRpdmVseS5cblx0XHQvLyBUaGlzIGlzIHByb2JhYmx5IE9LIGJ1dCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2Ugd2FudCB0byBtYWludGFpblxuXHRcdC8vIGhhbmRsaW5nIHRoZW0gdGhyb3VnaCBqUXVlcnkgdHJhdmVyc2FsIGluIGpRdWVyeSAzLnguXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHR9XG5cdH0gKTtcblxuXHRpZiAoICFzdXBwb3J0LmNzc0hhcyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTArLCBTYWZhcmkgMTUuNCAtIDE2LjMrXG5cdFx0Ly8gT3VyIHJlZ3VsYXIgYHRyeS1jYXRjaGAgbWVjaGFuaXNtIGZhaWxzIHRvIGRldGVjdCBuYXRpdmVseS11bnN1cHBvcnRlZFxuXHRcdC8vIHBzZXVkby1jbGFzc2VzIGluc2lkZSBgOmhhcygpYCAoc3VjaCBhcyBgOmhhcyg6Y29udGFpbnMoXCJGb29cIikpYClcblx0XHQvLyBpbiBicm93c2VycyB0aGF0IHBhcnNlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBhcyBhIGZvcmdpdmluZyBzZWxlY3RvciBsaXN0LlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMvI3JlbGF0aW9uYWwgbm93IHJlcXVpcmVzIHRoZSBhcmd1bWVudFxuXHRcdC8vIHRvIGJlIHBhcnNlZCB1bmZvcmdpdmluZ2x5LCBidXQgYnJvd3NlcnMgaGF2ZSBub3QgeWV0IGZ1bGx5IGFkanVzdGVkLlxuXHRcdHJidWdneVFTQS5wdXNoKCBcIjpoYXNcIiApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0ZmluZC5jb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufVxuXG5maW5kLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBmaW5kKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuZmluZC5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmaW5kKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuZmluZC5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblxuZmluZC5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSB0cmFjLTEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCB2YWwgIT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG59O1xuXG5maW5kLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cbmpRdWVyeS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdC8vXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjArXG5cdC8vIFRlc3RpbmcgZm9yIGRldGVjdGluZyBkdXBsaWNhdGVzIGlzIHVucHJlZGljdGFibGUgc28gaW5zdGVhZCBhc3N1bWUgd2UgY2FuJ3Rcblx0Ly8gZGVwZW5kIG9uIGR1cGxpY2F0ZSBkZXRlY3Rpb24gaW4gYWxsIGJyb3dzZXJzIHdpdGhvdXQgYSBzdGFibGUgc29ydC5cblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuc29ydFN0YWJsZTtcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiBzbGljZS5jYWxsKCByZXN1bHRzLCAwICk7XG5cdHNvcnQuY2FsbCggcmVzdWx0cywgc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRzcGxpY2UuY2FsbCggcmVzdWx0cywgZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG5qUXVlcnkuZm4udW5pcXVlU29ydCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS51bmlxdWVTb3J0KCBzbGljZS5hcHBseSggdGhpcyApICkgKTtcbn07XG5cbkV4cHIgPSBqUXVlcnkuZXhwciA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRBVFRSOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIiApXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0Q0hJTEQ6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiIClcblx0XHRcdFx0KTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwci5DSElMRC50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0VEFHOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBleHBlY3RlZE5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgZXhwZWN0ZWROb2RlTmFtZSApO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRDTEFTUzogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArXG5cdFx0XHRcdFx0XCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRBVFRSOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgPT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiIT1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICE9PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIl49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiKj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIiQ9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApXG5cdFx0XHRcdFx0XHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwifD1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdENISUxEOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZU5hbWUoIG5vZGUsIG5hbWUgKSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8ICggcGFyZW50WyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlTmFtZSggbm9kZSwgbmFtZSApIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBqUXVlcnkgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YuY2FsbCggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRub3Q6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0aGFzOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGZpbmQoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Y29udGFpbnM6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGpRdWVyeS50ZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0bGFuZzogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0dGFyZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRyb290OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSxcblxuXHRcdGZvY3VzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmXG5cdFx0XHRcdGRvY3VtZW50Lmhhc0ZvY3VzKCkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0ZW5hYmxlZDogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0ZGlzYWJsZWQ6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRjaGVja2VkOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUoIGVsZW0sIFwib3B0aW9uXCIgKSAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0c2VsZWN0ZWQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG5cdFx0XHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gdHJlYXQgdGhlIGRlZmF1bHQgb3B0aW9uIGFzXG5cdFx0XHQvLyBzZWxlY3RlZCB3aGVuIGluIGFuIG9wdGdyb3VwLlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdGVtcHR5OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zLmVtcHR5KCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRoZWFkZXI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRpbnB1dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdGJ1dHRvbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fFxuXHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApO1xuXHRcdH0sXG5cblx0XHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDEwIG9ubHlcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhclxuXHRcdFx0XHQvLyB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRmaXJzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0bGFzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRlcTogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0ZXZlbjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdG9kZDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGx0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGk7XG5cblx0XHRcdGlmICggYXJndW1lbnQgPCAwICkge1xuXHRcdFx0XHRpID0gYXJndW1lbnQgKyBsZW5ndGg7XG5cdFx0XHR9IGVsc2UgaWYgKCBhcmd1bWVudCA+IGxlbmd0aCApIHtcblx0XHRcdFx0aSA9IGxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhcmd1bWVudDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGd0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zLm50aCA9IEV4cHIucHNldWRvcy5lcTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG5mdW5jdGlvbiB0b2tlbml6ZSggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmxlYWRpbmdDb21iaW5hdG9yLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW1DU1MsIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0aWYgKCBwYXJzZU9ubHkgKSB7XG5cdFx0cmV0dXJuIHNvRmFyLmxlbmd0aDtcblx0fVxuXG5cdHJldHVybiBzb0ZhciA/XG5cdFx0ZmluZC5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIG5vZGVOYW1lKCBlbGVtLCBza2lwICkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0ZmluZCggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSwgbWF0Y2hlck91dCxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fFxuXHRcdFx0XHRtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zO1xuXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlclxuXHRcdFx0Ly8gb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdG1hdGNoZXJPdXQgPSBwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFtdIDpcblxuXHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0cmVzdWx0cztcblxuXHRcdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVySW47XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mLmNhbGwoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudFxuXHRcdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZC5UQUcoIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDkgb25seVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nXG5cdFx0XHQvLyBlbGVtZW50cyBieSBpZC4gKHNlZSB0cmFjLTE0MTQyKVxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guY2FsbCggcmVzdWx0cywgZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuZnVuY3Rpb24gY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn1cblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIGpRdWVyeSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggalF1ZXJ5IHNlbGVjdG9yIGNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5mdW5jdGlvbiBzZWxlY3QoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kLklEKFxuXHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0Y29udGV4dFxuXHRcdFx0KSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJlxuXHRcdFx0XHRcdFx0dGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCAtIDQuMStcbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgLSA0LjErXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbmpRdWVyeS5maW5kID0gZmluZDtcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IGpRdWVyeS51bmlxdWVTb3J0O1xuXG4vLyBUaGVzZSBoYXZlIGFsd2F5cyBiZWVuIHByaXZhdGUsIGJ1dCB0aGV5IHVzZWQgdG8gYmUgZG9jdW1lbnRlZFxuLy8gYXMgcGFydCBvZiBTaXp6bGUgc28gbGV0J3MgbWFpbnRhaW4gdGhlbSBpbiB0aGUgMy54IGxpbmVcbi8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy5cbmZpbmQuY29tcGlsZSA9IGNvbXBpbGU7XG5maW5kLnNlbGVjdCA9IHNlbGVjdDtcbmZpbmQuc2V0RG9jdW1lbnQgPSBzZXREb2N1bWVudDtcblxuZmluZC5lc2NhcGUgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3I7XG5maW5kLmdldFRleHQgPSBqUXVlcnkudGV4dDtcbmZpbmQuaXNYTUwgPSBqUXVlcnkuaXNYTUxEb2M7XG5maW5kLnNlbGVjdG9ycyA9IGpRdWVyeS5leHByO1xuZmluZC5zdXBwb3J0ID0galF1ZXJ5LnN1cHBvcnQ7XG5maW5kLnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlU29ydDtcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cbn0gKSgpO1xuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICh0cmFjLTk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICh0cmFjLTExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBqUXVlcnkjZmluZFxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIGVycm9yLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rKCk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgZGVwcmVjYXRlZCBhbGlhcyBvZiB0aGUgYWJvdmUuIFdoaWxlIHRoZSBuYW1lIHN1Z2dlc3RzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmV0dXJuaW5nIHRoZSBzdGFjaywgbm90IGFuIGVycm9yIGluc3RhbmNlLCBqUXVlcnkganVzdCBwYXNzZXNcblx0XHRcdFx0XHRcdFx0XHQvLyBpdCBkaXJlY3RseSB0byBgY29uc29sZS53YXJuYCBzbyBib3RoIHdpbGwgd29yazsgYW4gaW5zdGFuY2Vcblx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IGJldHRlciBjb29wZXJhdGVzIHdpdGggc291cmNlIG1hcHMuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxuLy8gSWYgYGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2tgIGlzIGRlZmluZWQsIGBhc3luY0Vycm9yYCBpcyBhbiBlcnJvclxuLy8gY2FwdHVyZWQgYmVmb3JlIHRoZSBhc3luYyBiYXJyaWVyIHRvIGdldCB0aGUgb3JpZ2luYWwgZXJyb3IgY2F1c2Vcbi8vIHdoaWNoIG1heSBvdGhlcndpc2UgYmUgaGlkZGVuLlxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIGFzeW5jRXJyb3IgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLFxuXHRcdFx0ZXJyb3Iuc3RhY2ssIGFzeW5jRXJyb3IgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlIHRyYWMtNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICh0cmFjLTk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSB0cmFjLTgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICh0cmFjLTE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICh0cmFjLTExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAodHJhYy0xNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAodHJhYy0xMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKHRyYWMtMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICh0cmFjLTEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAodHJhYy0xMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKHRyYWMtNjkxMSwgdHJhYy04MTY1LCB0cmFjLTExMzgyLCB0cmFjLTExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHRyYWMtMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgaXNTZXR1cCApIHtcblxuXHQvLyBNaXNzaW5nIGBpc1NldHVwYCBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWlzU2V0dXAgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdGlmICggIXNhdmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nXG5cdFx0XHRcdC8vIHRoZSBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQgKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXHRcdFx0XHRcdHNhdmVkWyAwIF0sXG5cdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdCkgKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50IGJ5IGFsbCBqUXVlcnkgaGFuZGxlcnMgd2hpbGUgYWxsb3dpbmdcblx0XHRcdFx0Ly8gbmF0aXZlIGhhbmRsZXJzIG9uIHRoZSBzYW1lIGVsZW1lbnQgdG8gcnVuLiBPbiB0YXJnZXQsIHRoaXMgaXMgYWNoaWV2ZWRcblx0XHRcdFx0Ly8gYnkgc3RvcHBpbmcgaW1tZWRpYXRlIHByb3BhZ2F0aW9uIGp1c3Qgb24gdGhlIGpRdWVyeSBldmVudC4gSG93ZXZlcixcblx0XHRcdFx0Ly8gdGhlIG5hdGl2ZSBldmVudCBpcyByZS13cmFwcGVkIGJ5IGEgalF1ZXJ5IG9uZSBvbiBlYWNoIGxldmVsIG9mIHRoZVxuXHRcdFx0XHQvLyBwcm9wYWdhdGlvbiBzbyB0aGUgb25seSB3YXkgdG8gc3RvcCBpdCBmb3IgalF1ZXJ5IGlzIHRvIHN0b3AgaXQgZm9yXG5cdFx0XHRcdC8vIGV2ZXJ5b25lIHZpYSBuYXRpdmUgYHN0b3BQcm9wYWdhdGlvbigpYC4gVGhpcyBpcyBub3QgYSBwcm9ibGVtIGZvclxuXHRcdFx0XHQvLyBmb2N1cy9ibHVyIHdoaWNoIGRvbid0IGJ1YmJsZSwgYnV0IGl0IGRvZXMgYWxzbyBzdG9wIGNsaWNrIG9uIGNoZWNrYm94ZXNcblx0XHRcdFx0Ly8gYW5kIHJhZGlvcy4gV2UgYWNjZXB0IHRoaXMgbGltaXRhdGlvbi5cblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICh0cmFjLTUwNCwgdHJhYy0xMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblxuXHRmdW5jdGlvbiBmb2N1c01hcHBlZEhhbmRsZXIoIG5hdGl2ZUV2ZW50ICkge1xuXHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBmb2N1c2luL2ZvY3Vzb3V0IGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHNcblx0XHRcdC8vIGZvY3VzL2JsdXIuIFRoaXMgaXMgYmVjYXVzZSB0aGUgZm9ybWVyIGFyZSBzeW5jaHJvbm91cyBpbiBJRSB3aGlsZSB0aGUgbGF0dGVyXG5cdFx0XHQvLyBhcmUgYXN5bmMuIEluIG90aGVyIGJyb3dzZXJzLCBhbGwgdGhvc2UgaGFuZGxlcnMgYXJlIGludm9rZWQgc3luY2hyb25vdXNseS5cblxuXHRcdFx0Ly8gYGhhbmRsZWAgZnJvbSBwcml2YXRlIGRhdGEgd291bGQgYWxyZWFkeSB3cmFwIHRoZSBldmVudCwgYnV0IHdlIG5lZWRcblx0XHRcdC8vIHRvIGNoYW5nZSB0aGUgYHR5cGVgIGhlcmUuXG5cdFx0XHR2YXIgaGFuZGxlID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBcImhhbmRsZVwiICksXG5cdFx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblx0XHRcdGV2ZW50LnR5cGUgPSBuYXRpdmVFdmVudC50eXBlID09PSBcImZvY3VzaW5cIiA/IFwiZm9jdXNcIiA6IFwiYmx1clwiO1xuXHRcdFx0ZXZlbnQuaXNTaW11bGF0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBGaXJzdCwgaGFuZGxlIGZvY3VzaW4vZm9jdXNvdXRcblx0XHRcdGhhbmRsZSggbmF0aXZlRXZlbnQgKTtcblxuXHRcdFx0Ly8gLi4udGhlbiwgaGFuZGxlIGZvY3VzL2JsdXJcblx0XHRcdC8vXG5cdFx0XHQvLyBmb2N1cy9ibHVyIGRvbid0IGJ1YmJsZSB3aGlsZSBmb2N1c2luL2ZvY3Vzb3V0IGRvOyBzaW11bGF0ZSB0aGUgZm9ybWVyIGJ5IG9ubHlcblx0XHRcdC8vIGludm9raW5nIHRoZSBoYW5kbGVyIGF0IHRoZSBsb3dlciBsZXZlbC5cblx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICkge1xuXG5cdFx0XHRcdC8vIFRoZSBzZXR1cCBwYXJ0IGNhbGxzIGBsZXZlcmFnZU5hdGl2ZWAsIHdoaWNoLCBpbiB0dXJuLCBjYWxsc1xuXHRcdFx0XHQvLyBgalF1ZXJ5LmV2ZW50LmFkZGAsIHNvIGV2ZW50IGhhbmRsZSB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIHNldFxuXHRcdFx0XHQvLyBieSB0aGlzIHBvaW50LlxuXHRcdFx0XHRoYW5kbGUoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIG5vbi1JRSBicm93c2VycywgYXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudFxuXHRcdFx0Ly8gd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0LlxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBkZWxlZ2F0ZVR5cGUsIG5hdGl2ZUV2ZW50LnRhcmdldCxcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSApO1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBhdHRhY2hlcztcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCB0cnVlICk7XG5cblx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHRcdFx0Ly8gV2UgdXNlIHRoZSBzYW1lIG5hdGl2ZSBoYW5kbGVyIGZvciBmb2N1c2luICYgZm9jdXMgKGFuZCBmb2N1c291dCAmIGJsdXIpXG5cdFx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0XHQvLyBVc2UgYGRlbGVnYXRlVHlwZWAgYXMgdGhlIGtleSBhcyBgdHlwZWAgaXMgYWxyZWFkeSB1c2VkIGJ5IGBsZXZlcmFnZU5hdGl2ZWAuXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGF0dGFjaGVzO1xuXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSApIC0gMTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggdGhpcywgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHN0YW5kYXJkIHRlYXJkb3duIHNob3VsZCBiZSBhcHBsaWVkXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZVxuXHRcdC8vIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBldmVudC50YXJnZXQsIHR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcblx0Ly8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcblx0Ly8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG5cdC8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdC8vIFRvIHByZXNlcnZlIHJlbGF0aXZlIGZvY3VzaW4vZm9jdXMgJiBmb2N1c291dC9ibHVyIGV2ZW50IG9yZGVyIGd1YXJhbnRlZWQgb24gdGhlIDMueCBicmFuY2gsXG5cdC8vIGF0dGFjaCBhIHNpbmdsZSBoYW5kbGVyIGZvciBib3RoIGV2ZW50cyBpbiBJRS5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGRlbGVnYXRlVHlwZSBdID0ge1xuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0XHQvLyBXZSB1c2UgdGhlIHNhbWUgbmF0aXZlIGhhbmRsZXIgZm9yIGZvY3VzaW4gJiBmb2N1cyAoYW5kIGZvY3Vzb3V0ICYgYmx1cilcblx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0Ly8gVXNlIGBkZWxlZ2F0ZVR5cGVgIGFzIHRoZSBrZXkgYXMgYHR5cGVgIGlzIGFscmVhZHkgdXNlZCBieSBgbGV2ZXJhZ2VOYXRpdmVgLlxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHR9LFxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApIC0gMTtcblxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCBhdHRhY2hlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCFcXFtDREFUQVxcW3xcXF1cXF0+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKHRyYWMtODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVW53cmFwIGEgQ0RBVEEgc2VjdGlvbiBjb250YWluaW5nIHNjcmlwdCBjb250ZW50cy4gVGhpcyBzaG91bGRuJ3QgYmVcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZGVkIGFzIGluIFhNTCBkb2N1bWVudHMgdGhleSdyZSBhbHJlYWR5IG5vdCB2aXNpYmxlIHdoZW5cblx0XHRcdFx0XHRcdFx0Ly8gaW5zcGVjdGluZyBlbGVtZW50IGNvbnRlbnRzIGFuZCBpbiBIVE1MIGRvY3VtZW50cyB0aGV5IGhhdmUgbm9cblx0XHRcdFx0XHRcdFx0Ly8gbWVhbmluZyBidXQgd2UncmUgcHJlc2VydmluZyB0aGF0IGxvZ2ljIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgY29tcGxldGVseSBpbiA0LjAuIFNlZSBnaC00OTA0LlxuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IGpRdWVyeSNmaW5kIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6XG5cdFx0XHQvLyBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciByY3VzdG9tUHJvcCA9IC9eLS0vO1xuXG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICh0cmFjLTE1MDk4LCB0cmFjLTE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAodHJhYy04OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCB0cmFjLTEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpIChnaC0zMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0Ly8gSUUgb25seSBzdXBwb3J0cyBgXCJmbG9hdFwiYCBpbiBgZ2V0UHJvcGVydHlWYWx1ZWA7IGluIGNvbXB1dGVkIHN0eWxlc1xuXHRcdC8vIGl0J3Mgb25seSBhdmFpbGFibGUgYXMgYFwiY3NzRmxvYXRcImAuIFdlIG5vIGxvbmdlciBtb2RpZnkgcHJvcGVydGllc1xuXHRcdC8vIHNlbnQgdG8gYC5jc3MoKWAgYXBhcnQgZnJvbSBjYW1lbENhc2luZywgc28gd2UgbmVlZCB0byBjaGVjayBib3RoLlxuXHRcdC8vIE5vcm1hbGx5LCB0aGlzIHdvdWxkIGNyZWF0ZSBkaWZmZXJlbmNlIGluIGJlaGF2aW9yOiBpZlxuXHRcdC8vIGBnZXRQcm9wZXJ0eVZhbHVlYCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZywgdGhlIHZhbHVlIHJldHVybmVkXG5cdFx0Ly8gYnkgYC5jc3MoKWAgd291bGQgYmUgYHVuZGVmaW5lZGAuIFRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBmb3Jcblx0XHQvLyBkaXNjb25uZWN0ZWQgZWxlbWVudHMuIEhvd2V2ZXIsIGluIElFIGV2ZW4gZGlzY29ubmVjdGVkIGVsZW1lbnRzXG5cdFx0Ly8gd2l0aCBubyBzdHlsZXMgcmV0dXJuIGBcIm5vbmVcImAgZm9yIGBnZXRQcm9wZXJ0eVZhbHVlKCBcImZsb2F0XCIgKWBcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggaXNDdXN0b21Qcm9wICYmIHJldCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAxMDUrLCBDaHJvbWUgPD0xMDUrXG5cdFx0XHQvLyBTcGVjIHJlcXVpcmVzIHRyaW1taW5nIHdoaXRlc3BhY2UgZm9yIGN1c3RvbSBwcm9wZXJ0aWVzIChnaC00OTI2KS5cblx0XHRcdC8vIEZpcmVmb3ggb25seSB0cmltcyBsZWFkaW5nIHdoaXRlc3BhY2UuIENocm9tZSBqdXN0IGNvbGxhcHNlc1xuXHRcdFx0Ly8gYm90aCBsZWFkaW5nICYgdHJhaWxpbmcgd2hpdGVzcGFjZSB0byBhIHNpbmdsZSBzcGFjZS5cblx0XHRcdC8vXG5cdFx0XHQvLyBGYWxsIGJhY2sgdG8gYHVuZGVmaW5lZGAgaWYgZW1wdHkgc3RyaW5nIHJldHVybmVkLlxuXHRcdFx0Ly8gVGhpcyBjb2xsYXBzZXMgYSBtaXNzaW5nIGRlZmluaXRpb24gd2l0aCBwcm9wZXJ0eSBkZWZpbmVkXG5cdFx0XHQvLyBhbmQgc2V0IHRvIGFuIGVtcHR5IHN0cmluZyBidXQgdGhlcmUncyBubyBzdGFuZGFyZCBBUElcblx0XHRcdC8vIGFsbG93aW5nIHVzIHRvIGRpZmZlcmVudGlhdGUgdGhlbSB3aXRob3V0IGEgcGVyZm9ybWFuY2UgcGVuYWx0eVxuXHRcdFx0Ly8gYW5kIHJldHVybmluZyBgdW5kZWZpbmVkYCBhbGlnbnMgd2l0aCBvbGRlciBqUXVlcnkuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gcnRyaW1DU1MgdHJlYXRzIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gYW5kIFUrMDAwQyBGT1JNIEZFRURcblx0XHRcdC8vIGFzIHdoaXRlc3BhY2Ugd2hpbGUgQ1NTIGRvZXMgbm90LCBidXQgdGhpcyBpcyBub3QgYSBwcm9ibGVtXG5cdFx0XHQvLyBiZWNhdXNlIENTUyBwcmVwcm9jZXNzaW5nIHJlcGxhY2VzIHRoZW0gd2l0aCBVKzAwMEEgTElORSBGRUVEXG5cdFx0XHQvLyAod2hpY2ggKmlzKiBDU1Mgd2hpdGVzcGFjZSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lucHV0LXByZXByb2Nlc3Npbmdcblx0XHRcdHJldCA9IHJldC5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICkgfHwgdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMCxcblx0XHRtYXJnaW5EZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0Ly8gQ291bnQgbWFyZ2luIGRlbHRhIHNlcGFyYXRlbHkgdG8gb25seSBhZGQgaXQgYWZ0ZXIgc2Nyb2xsIGd1dHRlciBhZGp1c3RtZW50LlxuXHRcdC8vIFRoaXMgaXMgbmVlZGVkIHRvIG1ha2UgbmVnYXRpdmUgbWFyZ2lucyB3b3JrIHdpdGggYG91dGVySGVpZ2h0KCB0cnVlIClgIChnaC0zOTgyKS5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdG1hcmdpbkRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YSArIG1hcmdpbkRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcblx0XHRhc3BlY3RSYXRpbzogdHJ1ZSxcblx0XHRib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuXHRcdGNvbHVtbkNvdW50OiB0cnVlLFxuXHRcdGZsZXhHcm93OiB0cnVlLFxuXHRcdGZsZXhTaHJpbms6IHRydWUsXG5cdFx0Zm9udFdlaWdodDogdHJ1ZSxcblx0XHRncmlkQXJlYTogdHJ1ZSxcblx0XHRncmlkQ29sdW1uOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW5FbmQ6IHRydWUsXG5cdFx0Z3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuXHRcdGdyaWRSb3c6IHRydWUsXG5cdFx0Z3JpZFJvd0VuZDogdHJ1ZSxcblx0XHRncmlkUm93U3RhcnQ6IHRydWUsXG5cdFx0bGluZUhlaWdodDogdHJ1ZSxcblx0XHRvcGFjaXR5OiB0cnVlLFxuXHRcdG9yZGVyOiB0cnVlLFxuXHRcdG9ycGhhbnM6IHRydWUsXG5cdFx0c2NhbGU6IHRydWUsXG5cdFx0d2lkb3dzOiB0cnVlLFxuXHRcdHpJbmRleDogdHJ1ZSxcblx0XHR6b29tOiB0cnVlLFxuXG5cdFx0Ly8gU1ZHLXJlbGF0ZWRcblx0XHRmaWxsT3BhY2l0eTogdHJ1ZSxcblx0XHRmbG9vZE9wYWNpdHk6IHRydWUsXG5cdFx0c3RvcE9wYWNpdHk6IHRydWUsXG5cdFx0c3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcblx0XHRzdHJva2VPcGFjaXR5OiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICh0cmFjLTczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyB0cmFjLTkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAodHJhYy03MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKHRyYWMtMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwgKHRyYWMtMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjdXIsIGN1clZhbHVlLCBjbGFzc05hbWUsIGksIGZpbmFsVmFsdWU7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRjdXIgPSB0aGlzLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjdXIsIGN1clZhbHVlLCBjbGFzc05hbWUsIGksIGZpbmFsVmFsdWU7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSB0aGlzLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjbGFzc05hbWUsIGksIHNlbGYsXG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICh0cmFjLTE0Njg2LCB0cmFjLTE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAodHJhYy0yNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKHRyYWMtOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKHRyYWMtOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAodHJhYy02MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyB0cmFjLTc2NTMsIHRyYWMtODEyNSwgdHJhYy04MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICh0cmFjLTEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzIHRyYWMtOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKHRyYWMtMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgdHJhYy0xMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKHRyYWMtMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyB0cmFjLTk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKHRyYWMtMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vIHRyYWMtMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlIHRyYWMtODYwNSwgdHJhYy0xNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gdHJhYy0xNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcbi8vIFJlcXVpcmUgdGhhdCB0aGUgXCJ3aGl0ZXNwYWNlIHJ1blwiIHN0YXJ0cyBmcm9tIGEgbm9uLXdoaXRlc3BhY2Vcbi8vIHRvIGF2b2lkIE8oTl4yKSBiZWhhdmlvciB3aGVuIHRoZSBlbmdpbmUgd291bGQgdHJ5IG1hdGNoaW5nIFwiXFxzKyRcIiBhdCBlYWNoIHNwYWNlIHBvc2l0aW9uLlxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICh0cmFjLTcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICh0cmFjLTEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popper);\n//# sourceMappingURL=popper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./resources/js/landing-page/jquery-ui.js");
/******/ 	__webpack_require__("./resources/js/landing-page/popper.min.js");
/******/ 	__webpack_require__("./resources/js/landing-page/bootstrap.min.js");
/******/ 	__webpack_require__("./resources/js/landing-page/owl.carousel.min.js");
/******/ 	__webpack_require__("./resources/js/landing-page/jquery.stellar.min.js");
/******/ 	__webpack_require__("./resources/js/landing-page/bootstrap-datepicker.min.js");
/******/ 	__webpack_require__("./resources/js/landing-page/jquery.easing.1.3.js");
/******/ 	__webpack_require__("./resources/js/landing-page/jquery.fancybox.min.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/landing-page/main.js");
/******/ 	
/******/ })()
;